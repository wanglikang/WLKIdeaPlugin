1、先解析下面的结构

public without sharing class UserTriggerHandler {
    public static Boolean isRun = true;
    public class UserTriggerHandlerException extends Exception {
    }
}

2、要想测试Lexer，需要额外添加一下代码，来兼容grammar-kit生成的_ApexLexer

  //在这之间，可以定义一些java的中间变量，方法
  private static String zzToPrintable(CharSequence str) {
      // jflex 内置的 zzToPrintable 和 yytext 返回的结果不匹配，使用grammar-kit 的插件，会报错
      // 因此才自定义个本方法，兼容一下
      return str.toString();
  }
  	private long parseLong(int start, int end, int radix) {
  		long result = 0;
  		long digit;

  		for (int i = start; i < end; i++) {
  		  digit  = Character.digit(yycharat(i),radix);
  		  result*= radix;
  		  result+= digit;
  		}

  		return result;
  	}


3、同时，在main里，还需要重置一下lexer的输入
	3.1 找到下面的一行语句
	 scanner = new _ApexLexer(reader);
	 替换为下面的代码

BufferedReader bufferedReader = new BufferedReader(reader);
StringBuilder sb = new StringBuilder();
char[] buff = new char[1024];
int readCount = -1 ;
while((readCount= bufferedReader.read(buff))>0){
	sb.append(buff,0,readCount);
}
scanner = new _ApexLexer(reader);
scanner.reset(sb,0,sb.length(),YYINITIAL);


4、 对于表达式，重点关注 函数调用这种类型的
一般需要考虑如下几种情况
```
a
a()
a.b
a.b()
a().b
a().b()
a.b.c
a.b.c()
a.b().c
a.b().c()
a().b.c
a().b.()
a().b().c
a().b().c()

a(b).c
a(b()).c
a(b()).c()
a(b.c)
a(b.c())
a(b().c)
a(b().c())

```
