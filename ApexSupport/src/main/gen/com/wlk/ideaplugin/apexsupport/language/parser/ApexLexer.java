// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: Simple.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package com.wlk.ideaplugin.apexsupport.language.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.wlk.ideaplugin.apexsupport.language.gen.psi.ApexTypes;
import com.intellij.psi.TokenType;


@SuppressWarnings("fallthrough")
public final class ApexLexer implements FlexLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;
  public static final int STRING = 4;
  public static final int CHARLITERAL = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\2\31\4\32\2\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\6\3\42\1\43\1\44\1\45"+
    "\5\13\1\46\13\13\1\47\2\13\1\50\1\51\1\52"+
    "\1\53\1\13\1\6\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\13\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\13\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\6\0\1\110\32\0\2\6\4\13\4\6\1\13"+
    "\2\6\1\0\7\6\1\13\4\6\1\13\5\6\27\13"+
    "\1\6\37\13\1\6\u01ca\13\4\6\14\13\16\6\5\13"+
    "\7\6\1\13\1\6\1\13\21\6\160\0\5\13\1\6"+
    "\2\13\2\6\4\13\1\6\1\13\6\6\1\13\1\6"+
    "\3\13\1\6\1\13\1\6\24\13\1\6\123\13\1\6"+
    "\213\13\1\6\5\0\2\6\246\13\1\6\46\13\2\6"+
    "\1\13\6\6\51\13\6\6\1\13\1\6\55\0\1\6"+
    "\1\0\1\6\2\0\1\6\2\0\1\6\1\0\10\6"+
    "\33\13\4\6\4\13\15\6\6\0\5\6\1\13\4\6"+
    "\13\0\1\6\1\0\3\6\53\13\37\0\4\6\2\13"+
    "\1\0\143\13\1\6\1\13\10\0\1\6\6\0\2\13"+
    "\2\0\1\6\4\0\2\13\12\0\3\13\2\6\1\13"+
    "\17\6\1\0\1\13\1\0\36\13\33\0\2\6\131\13"+
    "\13\0\1\13\16\6\12\0\41\13\11\0\2\13\4\6"+
    "\1\13\2\6\1\0\30\13\4\0\1\13\11\0\1\13"+
    "\3\0\1\13\5\0\22\6\31\13\3\0\4\6\13\13"+
    "\65\6\25\13\1\6\22\13\13\6\61\0\66\13\3\0"+
    "\1\13\22\0\1\13\7\0\12\13\2\0\2\6\12\0"+
    "\1\6\20\13\3\0\1\6\10\13\2\6\2\13\2\6"+
    "\26\13\1\6\7\13\1\6\1\13\3\6\4\13\2\6"+
    "\1\0\1\13\7\0\2\6\2\0\2\6\3\0\1\13"+
    "\10\6\1\0\4\6\2\13\1\6\3\13\2\0\2\6"+
    "\12\0\4\13\7\6\2\13\1\6\1\0\2\6\3\0"+
    "\1\6\6\13\4\6\2\13\2\6\26\13\1\6\7\13"+
    "\1\6\2\13\1\6\2\13\1\6\2\13\2\6\1\0"+
    "\1\6\5\0\4\6\2\0\2\6\3\0\3\6\1\0"+
    "\7\6\4\13\1\6\1\13\7\6\14\0\3\13\1\0"+
    "\13\6\3\0\1\6\11\13\1\6\3\13\1\6\26\13"+
    "\1\6\7\13\1\6\2\13\1\6\5\13\2\6\1\0"+
    "\1\13\10\0\1\6\3\0\1\6\3\0\2\6\1\13"+
    "\17\6\2\13\2\0\2\6\12\0\1\6\1\13\7\6"+
    "\1\13\6\0\1\6\3\0\1\6\10\13\2\6\2\13"+
    "\2\6\26\13\1\6\7\13\1\6\2\13\1\6\5\13"+
    "\2\6\1\0\1\13\7\0\2\6\2\0\2\6\3\0"+
    "\7\6\3\0\4\6\2\13\1\6\3\13\2\0\2\6"+
    "\12\0\1\6\1\13\20\6\1\0\1\13\1\6\6\13"+
    "\3\6\3\13\1\6\4\13\3\6\2\13\1\6\1\13"+
    "\1\6\2\13\3\6\2\13\3\6\3\13\3\6\14\13"+
    "\4\6\5\0\3\6\3\0\1\6\4\0\2\6\1\13"+
    "\6\6\1\0\16\6\12\0\11\6\1\13\6\6\5\0"+
    "\10\13\1\6\3\13\1\6\27\13\1\6\20\13\3\6"+
    "\1\13\7\0\1\6\3\0\1\6\4\0\7\6\2\0"+
    "\1\6\3\13\5\6\2\13\2\0\2\6\12\0\20\6"+
    "\1\13\3\0\1\6\10\13\1\6\3\13\1\6\27\13"+
    "\1\6\12\13\1\6\5\13\2\6\1\0\1\13\7\0"+
    "\1\6\3\0\1\6\4\0\7\6\2\0\7\6\1\13"+
    "\1\6\2\13\2\0\2\6\12\0\1\6\2\13\15\6"+
    "\4\0\11\13\1\6\3\13\1\6\51\13\2\0\1\13"+
    "\7\0\1\6\3\0\1\6\4\0\1\13\5\6\3\13"+
    "\1\0\7\6\3\13\2\0\2\6\12\0\12\6\6\13"+
    "\1\6\3\0\1\6\22\13\3\6\30\13\1\6\11\13"+
    "\1\6\1\13\2\6\7\13\3\6\1\0\4\6\6\0"+
    "\1\6\1\0\1\6\10\0\6\6\12\0\2\6\2\0"+
    "\15\6\60\13\1\0\2\13\7\0\4\6\10\13\10\0"+
    "\1\6\12\0\47\6\2\13\1\6\1\13\1\6\5\13"+
    "\1\6\30\13\1\6\1\13\1\6\12\13\1\0\2\13"+
    "\11\0\1\13\2\6\5\13\1\6\1\13\1\6\6\0"+
    "\2\6\12\0\2\6\4\13\40\6\1\13\27\6\2\0"+
    "\6\6\12\0\13\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\2\0\10\13\1\6\44\13\4\6\24\0\1\6"+
    "\2\0\5\13\13\0\1\6\44\0\11\6\1\0\71\6"+
    "\53\13\24\0\1\13\12\0\6\6\6\13\4\0\4\13"+
    "\3\0\1\13\3\0\2\13\7\0\3\13\4\0\15\13"+
    "\14\0\1\13\17\0\2\6\46\13\1\6\1\13\5\6"+
    "\1\13\2\6\53\13\1\6\115\13\1\6\4\13\2\6"+
    "\7\13\1\6\1\13\1\6\4\13\2\6\51\13\1\6"+
    "\4\13\2\6\41\13\1\6\4\13\2\6\7\13\1\6"+
    "\1\13\1\6\4\13\2\6\17\13\1\6\71\13\1\6"+
    "\4\13\2\6\103\13\2\6\3\0\40\6\20\13\20\6"+
    "\126\13\2\6\6\13\3\6\u016c\13\2\6\21\13\1\6"+
    "\32\13\5\6\113\13\3\6\13\13\7\6\15\13\1\6"+
    "\4\13\3\0\13\6\22\13\3\0\13\6\22\13\2\0"+
    "\14\6\15\13\1\6\3\13\1\6\2\0\14\6\64\13"+
    "\40\0\3\6\1\13\3\6\2\13\1\0\2\6\12\0"+
    "\41\6\4\0\1\6\12\0\6\6\131\13\7\6\5\13"+
    "\2\0\42\13\1\0\1\13\5\6\106\13\12\6\37\13"+
    "\1\6\14\0\4\6\14\0\12\6\12\0\36\13\2\6"+
    "\5\13\13\6\54\13\4\6\32\13\6\6\12\0\46\6"+
    "\27\13\5\0\4\6\65\13\12\0\1\6\35\0\2\6"+
    "\13\0\6\6\12\0\15\6\1\13\10\6\16\0\1\6"+
    "\2\0\77\6\5\0\57\13\21\0\7\13\4\6\12\0"+
    "\21\6\11\0\14\6\3\0\36\13\15\0\2\13\12\0"+
    "\54\13\16\0\14\6\44\13\24\0\10\6\12\0\3\6"+
    "\3\13\12\0\44\13\2\6\11\13\7\6\53\13\2\6"+
    "\3\13\20\6\3\0\1\6\25\0\4\13\1\0\6\13"+
    "\1\0\2\13\3\0\1\13\5\6\300\13\72\0\1\6"+
    "\5\0\26\13\2\6\6\13\2\6\46\13\2\6\6\13"+
    "\2\6\10\13\1\6\1\13\1\6\1\13\1\6\1\13"+
    "\1\6\37\13\2\6\65\13\1\6\7\13\1\6\1\13"+
    "\3\6\3\13\1\6\7\13\3\6\4\13\2\6\6\13"+
    "\4\6\15\13\5\6\3\13\1\6\7\13\16\6\5\0"+
    "\30\6\2\3\5\0\20\6\2\13\23\6\1\13\13\6"+
    "\5\0\1\6\12\0\1\6\1\13\15\6\1\13\20\6"+
    "\15\13\3\6\40\13\20\6\15\0\4\6\1\0\3\6"+
    "\14\0\21\6\1\13\4\6\1\13\2\6\12\13\1\6"+
    "\1\13\3\6\5\13\6\6\1\13\1\6\1\13\1\6"+
    "\1\13\1\6\4\13\1\6\13\13\2\6\4\13\5\6"+
    "\5\13\4\6\1\13\21\6\51\13\u0177\6\57\13\1\6"+
    "\57\13\1\6\205\13\6\6\4\13\3\0\2\13\14\6"+
    "\46\13\1\6\1\13\5\6\1\13\2\6\70\13\7\6"+
    "\1\13\17\6\1\0\27\13\11\6\7\13\1\6\7\13"+
    "\1\6\7\13\1\6\7\13\1\6\7\13\1\6\7\13"+
    "\1\6\7\13\1\6\7\13\1\6\40\0\57\6\1\13"+
    "\325\6\3\13\31\6\11\13\6\0\1\6\5\13\2\6"+
    "\5\13\4\6\126\13\2\6\2\0\2\6\3\13\1\6"+
    "\132\13\1\6\4\13\5\6\53\13\1\6\136\13\21\6"+
    "\40\13\60\6\320\13\100\6\375\13\3\6\215\13\103\6"+
    "\56\13\2\6\15\13\3\6\20\13\12\0\2\13\24\6"+
    "\57\13\1\0\4\6\12\0\1\6\37\13\2\0\120\13"+
    "\2\0\45\6\11\13\2\6\147\13\2\6\65\13\2\6"+
    "\11\13\52\6\15\13\1\0\3\13\1\0\4\13\1\0"+
    "\27\13\5\0\4\6\1\0\13\6\1\13\7\6\64\13"+
    "\14\6\2\0\62\13\22\0\12\6\12\0\6\6\22\0"+
    "\6\13\3\6\1\13\1\6\2\13\13\0\34\13\10\0"+
    "\2\6\27\13\15\0\14\6\35\13\3\6\4\0\57\13"+
    "\16\0\16\6\1\13\12\0\6\6\5\13\1\0\12\13"+
    "\12\0\5\13\1\6\51\13\16\0\11\6\3\13\1\0"+
    "\10\13\2\0\2\6\12\0\6\6\27\13\3\6\1\13"+
    "\3\0\62\13\1\0\1\13\3\0\2\13\2\0\5\13"+
    "\2\0\1\13\1\0\1\13\30\6\3\13\2\6\13\13"+
    "\5\0\2\6\3\13\2\0\12\6\6\13\2\6\6\13"+
    "\2\6\6\13\11\6\7\13\1\6\7\13\1\6\53\13"+
    "\1\6\16\13\6\6\163\13\10\0\1\6\2\0\2\6"+
    "\12\0\6\6\244\13\14\6\27\13\4\6\61\13\4\6"+
    "\u0100\111\156\13\2\6\152\13\46\6\7\13\14\6\5\13"+
    "\5\6\1\13\1\0\12\13\1\6\15\13\1\6\5\13"+
    "\1\6\1\13\1\6\2\13\1\6\2\13\1\6\154\13"+
    "\41\6\153\13\22\6\100\13\2\6\66\13\50\6\15\13"+
    "\3\6\20\0\20\6\20\0\3\6\2\13\30\6\3\13"+
    "\31\6\1\13\6\6\5\13\1\6\207\13\2\6\1\0"+
    "\4\6\1\13\13\6\12\0\7\6\32\13\4\6\1\13"+
    "\1\6\32\13\13\6\131\13\3\6\6\13\2\6\6\13"+
    "\2\6\6\13\2\6\3\13\3\6\2\13\3\6\2\13"+
    "\22\6\3\0\4\6\14\13\1\6\32\13\1\6\23\13"+
    "\1\6\2\13\1\6\17\13\2\6\16\13\42\6\173\13"+
    "\105\6\65\13\210\6\1\0\202\6\35\13\3\6\61\13"+
    "\17\6\1\0\37\6\40\13\15\6\36\13\5\6\46\13"+
    "\5\0\5\6\36\13\2\6\44\13\4\6\10\13\1\6"+
    "\5\13\52\6\236\13\2\6\12\0\6\6\44\13\4\6"+
    "\44\13\4\6\50\13\10\6\64\13\234\6\67\13\11\6"+
    "\26\13\12\6\10\13\230\6\6\13\2\6\1\13\1\6"+
    "\54\13\1\6\2\13\3\6\1\13\2\6\27\13\12\6"+
    "\27\13\11\6\37\13\101\6\23\13\1\6\2\13\12\6"+
    "\26\13\12\6\32\13\106\6\70\13\6\6\2\13\100\6"+
    "\1\13\3\0\1\6\2\0\5\6\4\0\4\13\1\6"+
    "\3\13\1\6\35\13\2\6\3\0\4\6\1\0\40\6"+
    "\35\13\3\6\35\13\43\6\10\13\1\6\34\13\2\0"+
    "\31\6\66\13\12\6\26\13\12\6\23\13\15\6\22\13"+
    "\156\6\111\13\67\6\63\13\15\6\63\13\15\6\44\13"+
    "\4\0\10\6\12\0\u0146\6\52\13\1\6\2\0\3\6"+
    "\2\13\116\6\35\13\12\6\1\13\10\6\26\13\13\0"+
    "\137\6\25\13\33\6\27\13\11\6\3\0\65\13\17\0"+
    "\37\6\12\0\17\6\4\0\55\13\13\0\2\6\1\0"+
    "\17\6\1\0\2\6\31\13\7\6\12\0\6\6\3\0"+
    "\44\13\16\0\1\6\12\0\4\6\1\13\2\0\1\13"+
    "\10\6\43\13\1\0\2\6\1\13\11\6\3\0\60\13"+
    "\16\0\4\13\4\6\4\0\1\6\14\0\1\13\1\6"+
    "\1\13\43\6\22\13\1\6\31\13\14\0\6\6\1\0"+
    "\101\6\7\13\1\6\1\13\1\6\4\13\1\6\17\13"+
    "\1\6\12\13\7\6\57\13\14\0\5\6\12\0\6\6"+
    "\4\0\1\6\10\13\2\6\2\13\2\6\26\13\1\6"+
    "\7\13\1\6\2\13\1\6\5\13\1\6\2\0\1\13"+
    "\7\0\2\6\2\0\2\6\3\0\2\6\1\13\6\6"+
    "\1\0\5\6\5\13\2\0\2\6\7\0\3\6\5\0"+
    "\213\6\65\13\22\0\4\13\5\6\12\0\4\6\1\0"+
    "\3\13\36\6\60\13\24\0\2\13\1\6\1\13\10\6"+
    "\12\0\246\6\57\13\7\0\2\6\11\0\27\6\4\13"+
    "\2\0\42\6\60\13\21\0\3\6\1\13\13\6\12\0"+
    "\46\6\53\13\15\0\1\13\7\6\12\0\66\6\33\13"+
    "\2\6\17\0\4\6\12\0\306\6\54\13\17\0\145\6"+
    "\100\13\12\0\25\6\10\13\2\6\1\13\2\6\10\13"+
    "\1\6\2\13\1\6\30\13\6\0\1\6\2\0\2\6"+
    "\4\0\1\13\1\0\1\13\2\0\14\6\12\0\106\6"+
    "\10\13\2\6\47\13\7\0\2\6\7\0\1\13\1\6"+
    "\1\13\1\0\33\6\1\13\12\0\50\13\7\0\1\13"+
    "\4\0\10\6\1\0\10\6\1\13\13\0\56\13\20\0"+
    "\3\6\1\13\42\6\71\13\7\6\11\13\1\6\45\13"+
    "\10\0\1\6\10\0\1\13\17\6\12\0\30\6\36\13"+
    "\2\6\26\0\1\6\16\0\111\6\7\13\1\6\2\13"+
    "\1\6\46\13\6\0\3\6\1\0\1\6\2\0\1\6"+
    "\7\0\1\13\1\0\10\6\12\0\6\6\6\13\1\6"+
    "\2\13\1\6\40\13\5\0\1\6\2\0\1\6\5\0"+
    "\1\13\7\6\12\0\u0136\6\23\13\4\0\271\6\1\13"+
    "\54\6\4\13\37\6\232\13\146\6\157\13\21\6\304\13"+
    "\274\6\57\13\1\6\11\0\307\6\107\13\271\6\71\13"+
    "\7\6\37\13\1\6\12\0\146\6\36\13\2\6\5\0"+
    "\13\6\60\13\7\0\11\6\4\13\14\6\12\0\11\6"+
    "\25\13\5\6\23\13\260\6\100\13\200\6\113\13\4\6"+
    "\1\0\1\13\67\0\7\6\4\0\15\13\100\6\2\13"+
    "\1\6\1\13\1\0\13\6\2\0\16\6\370\13\10\6"+
    "\326\13\52\6\11\13\367\6\37\13\61\6\3\13\21\6"+
    "\4\13\10\6\u018c\13\4\6\153\13\5\6\15\13\3\6"+
    "\11\13\7\6\12\13\3\6\2\0\1\6\4\0\301\6"+
    "\5\0\3\6\26\0\2\6\7\0\36\6\4\0\224\6"+
    "\3\0\273\6\125\13\1\6\107\13\1\6\2\13\2\6"+
    "\1\13\2\6\2\13\2\6\4\13\1\6\14\13\1\6"+
    "\1\13\1\6\7\13\1\6\101\13\1\6\4\13\2\6"+
    "\10\13\1\6\7\13\1\6\34\13\1\6\4\13\1\6"+
    "\5\13\1\6\1\13\3\6\7\13\1\6\u0154\13\2\6"+
    "\31\13\1\6\31\13\1\6\37\13\1\6\31\13\1\6"+
    "\37\13\1\6\31\13\1\6\37\13\1\6\31\13\1\6"+
    "\37\13\1\6\31\13\1\6\10\13\2\6\151\0\4\6"+
    "\62\0\10\6\1\0\16\6\1\0\26\6\5\0\1\6"+
    "\17\0\120\6\7\0\1\6\21\0\2\6\7\0\1\6"+
    "\2\0\1\6\5\0\325\6\55\13\3\6\7\0\7\13"+
    "\2\6\12\0\4\6\1\13\u0171\6\54\13\16\0\5\6"+
    "\306\13\13\6\7\0\51\6\104\13\7\0\1\13\4\6"+
    "\12\0\u0156\6\1\13\117\6\4\13\1\6\33\13\1\6"+
    "\2\13\1\6\1\13\2\6\1\13\1\6\12\13\1\6"+
    "\4\13\1\6\1\13\1\6\1\13\6\6\1\13\4\6"+
    "\1\13\1\6\1\13\1\6\1\13\1\6\3\13\1\6"+
    "\2\13\1\6\1\13\2\6\1\13\1\6\1\13\1\6"+
    "\1\13\1\6\1\13\1\6\1\13\1\6\2\13\1\6"+
    "\1\13\2\6\4\13\1\6\7\13\1\6\4\13\1\6"+
    "\4\13\1\6\1\13\1\6\12\13\1\6\21\13\5\6"+
    "\3\13\1\6\5\13\1\6\21\13\u0134\6\12\0\6\6"+
    "\336\13\42\6\65\13\13\6\336\13\2\6\u0182\13\16\6"+
    "\u0131\13\37\6\36\13\342\6\113\13\266\6\1\0\36\6"+
    "\140\0\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\1\1\2\1\3\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\2\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\20\6"+
    "\1\35\1\36\1\37\1\40\1\41\2\42\1\41\1\42"+
    "\2\32\1\43\1\0\1\5\1\44\1\5\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\1"+
    "\1\2\1\56\4\57\1\55\1\60\1\1\1\61\1\62"+
    "\1\1\1\63\1\64\1\65\1\66\1\67\1\70\11\6"+
    "\1\71\7\6\1\72\23\6\1\73\1\74\1\0\1\41"+
    "\1\43\1\41\1\0\1\1\1\0\4\2\1\75\2\57"+
    "\1\1\1\55\2\76\1\77\1\100\1\101\20\6\1\102"+
    "\3\6\1\103\2\6\1\104\20\6\1\105\3\6\1\0"+
    "\2\2\2\57\1\106\1\76\1\107\3\6\1\110\1\111"+
    "\1\6\1\112\5\6\1\113\4\6\1\114\4\6\1\115"+
    "\1\6\1\116\13\6\1\117\2\6\1\120\1\121\2\6"+
    "\2\57\1\76\2\6\1\122\1\123\1\124\1\125\4\6"+
    "\1\126\1\127\1\130\12\6\1\131\2\6\1\132\2\6"+
    "\1\133\2\6\1\134\2\57\1\76\4\6\1\135\3\6"+
    "\1\136\2\6\1\137\3\6\1\140\1\141\1\142\1\6"+
    "\1\143\1\6\1\144\2\6\2\57\1\76\1\6\1\145"+
    "\1\6\1\146\1\147\1\150\3\6\1\151\1\152\5\6"+
    "\2\57\1\76\1\153\1\154\4\6\1\155\2\6\1\156"+
    "\2\57\1\76\2\6\1\157\1\160\1\6\1\161\2\57"+
    "\1\76\1\162\1\163\1\6\2\57\1\1\1\6\2\57"+
    "\1\1\1\164\2\57\1\1\2\57\1\1\2\57\1\1"+
    "\2\57\1\1\1\57\1\55\1\1\1\55\1\1\4\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[388];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\u0172\0\u01bc\0\u0206"+
    "\0\336\0\u0250\0\u029a\0\u02e4\0\u032e\0\336\0\336\0\336"+
    "\0\u0378\0\u03c2\0\336\0\u040c\0\u0456\0\u04a0\0\u04ea\0\u0534"+
    "\0\u057e\0\336\0\u05c8\0\u0612\0\u065c\0\336\0\336\0\u06a6"+
    "\0\336\0\u06f0\0\u073a\0\u0784\0\u07ce\0\u0818\0\u0862\0\u08ac"+
    "\0\u08f6\0\u0940\0\u098a\0\u09d4\0\u0a1e\0\u0a68\0\u0ab2\0\u0afc"+
    "\0\u0b46\0\u0b90\0\336\0\u0bda\0\336\0\336\0\u0c24\0\u0c6e"+
    "\0\u0128\0\u0cb8\0\u0d02\0\u0d4c\0\u057e\0\u0128\0\u06a6\0\u0d96"+
    "\0\u0d96\0\u0de0\0\u057e\0\336\0\u057e\0\u057e\0\336\0\u057e"+
    "\0\336\0\u057e\0\u0e2a\0\u0e74\0\u0ebe\0\u057e\0\u0f08\0\u0f52"+
    "\0\u0f9c\0\u0fe6\0\u1030\0\336\0\u107a\0\336\0\336\0\u10c4"+
    "\0\u110e\0\u057e\0\u057e\0\u057e\0\u1158\0\u057e\0\u11a2\0\u11ec"+
    "\0\u1236\0\u1280\0\u12ca\0\u1314\0\u135e\0\u13a8\0\u13f2\0\u143c"+
    "\0\u1486\0\u14d0\0\u151a\0\u1564\0\u15ae\0\u15f8\0\u1642\0\u029a"+
    "\0\u168c\0\u16d6\0\u1720\0\u176a\0\u17b4\0\u17fe\0\u1848\0\u1892"+
    "\0\u18dc\0\u1926\0\u1970\0\u19ba\0\u1a04\0\u1a4e\0\u1a98\0\u1ae2"+
    "\0\u1b2c\0\u1b76\0\u1bc0\0\u057e\0\336\0\u0d4c\0\u1c0a\0\u0cb8"+
    "\0\u1c54\0\u1c9e\0\u1ce8\0\u1d32\0\u1d7c\0\u057e\0\u1dc6\0\u1e10"+
    "\0\336\0\u1e5a\0\u1ea4\0\u1eee\0\u1f38\0\u1f82\0\u1fcc\0\u057e"+
    "\0\u057e\0\u2016\0\u2060\0\u20aa\0\u20f4\0\u213e\0\u2188\0\u21d2"+
    "\0\u221c\0\u2266\0\u22b0\0\u22fa\0\u2344\0\u238e\0\u23d8\0\u2422"+
    "\0\u246c\0\u24b6\0\u029a\0\u2500\0\u254a\0\u2594\0\u25de\0\u2628"+
    "\0\u2672\0\u029a\0\u26bc\0\u2706\0\u2750\0\u279a\0\u27e4\0\u282e"+
    "\0\u2878\0\u28c2\0\u290c\0\u2956\0\u29a0\0\u29ea\0\u2a34\0\u2a7e"+
    "\0\u2ac8\0\u2b12\0\u029a\0\u2b5c\0\u2ba6\0\u2bf0\0\u2c3a\0\336"+
    "\0\u2c84\0\u2cce\0\u2d18\0\336\0\u2d62\0\u057e\0\u2dac\0\u2df6"+
    "\0\u2e40\0\u029a\0\u029a\0\u2e8a\0\u029a\0\u2ed4\0\u2f1e\0\u2f68"+
    "\0\u2fb2\0\u2ffc\0\u029a\0\u3046\0\u3090\0\u30da\0\u3124\0\u029a"+
    "\0\u316e\0\u31b8\0\u3202\0\u324c\0\u029a\0\u3296\0\u029a\0\u32e0"+
    "\0\u332a\0\u3374\0\u33be\0\u3408\0\u3452\0\u349c\0\u34e6\0\u3530"+
    "\0\u357a\0\u35c4\0\u029a\0\u360e\0\u3658\0\u029a\0\u029a\0\u36a2"+
    "\0\u36ec\0\u3736\0\u3780\0\u37ca\0\u3814\0\u385e\0\u029a\0\u029a"+
    "\0\u029a\0\u029a\0\u38a8\0\u38f2\0\u393c\0\u3986\0\u029a\0\u39d0"+
    "\0\u029a\0\u3a1a\0\u3a64\0\u3aae\0\u3af8\0\u3b42\0\u3b8c\0\u3bd6"+
    "\0\u3c20\0\u3c6a\0\u3cb4\0\u029a\0\u3cfe\0\u3d48\0\u029a\0\u3d92"+
    "\0\u3ddc\0\u3e26\0\u3e70\0\u3eba\0\u029a\0\u3f04\0\u3f4e\0\u3f98"+
    "\0\u3fe2\0\u402c\0\u4076\0\u40c0\0\u029a\0\u410a\0\u4154\0\u419e"+
    "\0\u029a\0\u41e8\0\u4232\0\u029a\0\u427c\0\u42c6\0\u4310\0\u029a"+
    "\0\u029a\0\u029a\0\u435a\0\u029a\0\u43a4\0\u029a\0\u43ee\0\u4438"+
    "\0\u4482\0\u44cc\0\u4516\0\u4560\0\u029a\0\u45aa\0\u029a\0\u029a"+
    "\0\u029a\0\u45f4\0\u463e\0\u4688\0\u029a\0\u029a\0\u46d2\0\u471c"+
    "\0\u4766\0\u47b0\0\u47fa\0\u4844\0\u488e\0\u48d8\0\u029a\0\u029a"+
    "\0\u4922\0\u496c\0\u49b6\0\u4a00\0\u029a\0\u4a4a\0\u4a94\0\u029a"+
    "\0\u4ade\0\u4b28\0\u4b72\0\u4bbc\0\u4c06\0\u029a\0\u029a\0\u4c50"+
    "\0\u029a\0\u4c9a\0\u4ce4\0\u4d2e\0\u029a\0\u029a\0\u4d78\0\u4dc2"+
    "\0\u4e0c\0\u4e56\0\u4ea0\0\u4eea\0\u4f34\0\u4f7e\0\u029a\0\u4fc8"+
    "\0\u5012\0\u505c\0\u50a6\0\u50f0\0\u513a\0\u5184\0\u51ce\0\u5218"+
    "\0\u5262\0\u52ac\0\u52f6\0\u5340\0\u5340\0\u538a\0\u53d4\0\u541e"+
    "\0\u5468\0\u54b2\0\u54fc\0\u5546";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[388];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\5\1\7\1\4\1\5\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\4\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\6\13\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\13\1\52\1\13\1\53\1\13\1\54"+
    "\1\13\1\55\1\56\1\57\1\60\1\13\1\61\1\62"+
    "\3\13\1\63\1\64\1\65\1\66\1\6\1\4\1\67"+
    "\1\70\1\71\1\72\1\71\1\72\1\67\1\73\41\67"+
    "\1\74\36\67\1\72\1\67\1\75\5\76\1\75\1\76"+
    "\100\75\1\76\1\75\1\4\2\0\1\4\1\0\2\4"+
    "\1\0\24\4\1\0\2\4\1\0\11\4\1\77\40\4"+
    "\1\0\5\76\1\0\1\76\100\0\1\76\1\0\1\4"+
    "\2\76\1\6\1\76\1\6\1\4\1\76\24\4\1\0"+
    "\2\4\1\0\11\4\1\77\36\4\1\6\2\4\1\76"+
    "\1\5\1\6\1\76\1\6\1\4\1\76\24\4\1\0"+
    "\2\4\1\0\11\4\1\77\36\4\1\6\1\4\1\12"+
    "\1\100\1\0\1\12\1\100\1\4\1\12\1\100\24\12"+
    "\1\100\2\12\1\101\11\12\1\102\41\12\1\100\1\0"+
    "\1\12\1\100\1\4\1\12\1\100\24\12\1\100\2\12"+
    "\1\100\11\12\1\102\40\12\1\13\2\0\1\4\1\0"+
    "\2\4\1\0\3\4\1\13\13\4\5\13\1\0\2\4"+
    "\1\0\2\4\6\13\1\4\1\77\2\4\30\13\4\4"+
    "\1\13\2\4\2\0\1\4\1\0\2\4\1\0\24\4"+
    "\1\0\2\4\1\103\11\4\1\77\41\4\2\0\1\4"+
    "\1\0\2\4\1\0\5\4\1\104\16\4\1\0\2\4"+
    "\1\105\11\4\1\77\41\4\2\0\1\4\1\0\2\4"+
    "\1\0\24\4\1\0\2\4\1\106\11\4\1\77\41\4"+
    "\2\0\1\4\1\0\2\4\1\0\12\4\1\107\11\4"+
    "\1\0\2\4\1\110\11\4\1\77\41\4\2\0\1\4"+
    "\1\0\2\4\1\0\14\4\1\111\7\4\1\0\2\4"+
    "\1\112\11\4\1\77\41\4\2\0\1\4\1\0\2\4"+
    "\1\0\17\4\5\113\1\0\2\4\1\0\11\4\1\77"+
    "\41\4\2\0\1\4\1\0\2\4\1\0\11\4\1\114"+
    "\4\4\1\115\5\4\1\0\2\4\1\116\11\4\1\77"+
    "\41\4\2\0\1\4\1\0\2\4\1\0\15\4\1\113"+
    "\1\4\1\117\1\120\1\121\1\122\1\123\1\0\2\4"+
    "\1\0\3\4\1\124\1\125\1\126\1\127\1\130\1\4"+
    "\1\77\5\4\1\124\1\125\1\126\4\4\1\127\12\4"+
    "\1\130\11\4\2\0\1\4\1\0\2\4\1\0\15\4"+
    "\1\113\1\4\5\30\1\0\2\4\1\0\3\4\1\124"+
    "\1\125\1\126\1\127\2\4\1\77\5\4\1\124\1\125"+
    "\1\126\4\4\1\127\23\4\112\0\1\4\2\0\1\4"+
    "\1\0\2\4\1\0\24\4\1\0\1\4\1\131\1\132"+
    "\11\4\1\77\40\4\37\0\1\133\52\0\1\4\2\0"+
    "\1\4\1\0\2\4\1\0\24\4\1\0\2\4\1\134"+
    "\1\135\10\4\1\77\40\4\7\0\1\4\102\0\1\4"+
    "\2\0\1\4\1\0\2\4\1\0\24\4\1\0\2\4"+
    "\1\136\11\4\1\77\40\4\1\13\2\0\1\4\1\0"+
    "\2\4\1\0\3\4\1\13\13\4\5\13\1\0\2\4"+
    "\1\0\2\4\6\13\1\4\1\77\2\4\1\13\1\137"+
    "\26\13\4\4\1\13\1\4\1\13\2\0\1\4\1\0"+
    "\2\4\1\0\3\4\1\13\13\4\5\13\1\0\2\4"+
    "\1\0\2\4\6\13\1\4\1\77\2\4\15\13\1\140"+
    "\1\13\1\141\6\13\1\142\1\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\1\143\6\13\1\144\2\13\1\145\2\13"+
    "\1\146\12\13\4\4\1\13\1\4\1\13\2\0\1\4"+
    "\1\0\2\4\1\0\3\4\1\13\13\4\5\13\1\0"+
    "\2\4\1\0\2\4\6\13\1\4\1\77\2\4\4\13"+
    "\1\147\10\13\1\150\12\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\12\13\1\151\12\13\1\152\2\13\4\4\1\13"+
    "\1\4\1\13\2\0\1\4\1\0\2\4\1\0\3\4"+
    "\1\13\13\4\5\13\1\0\2\4\1\0\2\4\6\13"+
    "\1\4\1\77\2\4\1\153\7\13\1\154\1\13\1\155"+
    "\2\13\1\156\12\13\4\4\1\13\1\4\1\13\2\0"+
    "\1\4\1\0\2\4\1\0\3\4\1\13\13\4\5\13"+
    "\1\0\2\4\1\0\2\4\6\13\1\4\1\77\2\4"+
    "\15\13\1\157\12\13\4\4\1\13\1\4\1\13\2\0"+
    "\1\4\1\0\2\4\1\0\3\4\1\13\13\4\5\13"+
    "\1\0\2\4\1\0\2\4\6\13\1\4\1\77\2\4"+
    "\5\13\1\160\5\13\1\161\1\162\13\13\4\4\1\13"+
    "\1\4\1\13\2\0\1\4\1\0\2\4\1\0\3\4"+
    "\1\13\13\4\5\13\1\0\2\4\1\0\2\4\6\13"+
    "\1\4\1\77\2\4\15\13\1\163\12\13\4\4\1\13"+
    "\1\4\1\13\2\0\1\4\1\0\2\4\1\0\3\4"+
    "\1\13\13\4\5\13\1\0\2\4\1\0\2\4\6\13"+
    "\1\4\1\77\2\4\1\164\3\13\1\165\15\13\1\166"+
    "\5\13\4\4\1\13\1\4\1\13\2\0\1\4\1\0"+
    "\2\4\1\0\3\4\1\13\13\4\5\13\1\0\2\4"+
    "\1\0\2\4\6\13\1\4\1\77\2\4\1\167\16\13"+
    "\1\170\2\13\1\171\5\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\4\13\1\172\23\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\7\13\1\173\11\13\1\174\1\175\1\13\1\176"+
    "\1\13\1\177\1\13\4\4\1\13\1\4\1\13\2\0"+
    "\1\4\1\0\2\4\1\0\3\4\1\13\13\4\5\13"+
    "\1\0\2\4\1\0\2\4\6\13\1\4\1\77\2\4"+
    "\7\13\1\200\7\13\1\201\10\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\15\13\1\202\12\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\7\13\1\203\20\13\4\4\1\13\2\4"+
    "\2\0\1\4\1\0\2\4\1\0\24\4\1\0\2\4"+
    "\1\204\11\4\1\77\33\4\1\205\4\4\2\67\1\0"+
    "\1\67\1\0\44\67\1\206\41\67\1\70\1\73\1\207"+
    "\1\73\1\207\1\67\1\70\41\67\1\206\36\67\1\207"+
    "\2\67\1\210\1\76\1\210\1\76\1\210\1\67\1\210"+
    "\41\67\1\206\36\67\1\210\1\67\1\0\2\73\1\76"+
    "\1\73\1\76\1\0\1\73\100\0\1\76\1\0\5\67"+
    "\1\211\103\67\1\0\2\100\1\0\2\100\1\0\106\100"+
    "\1\0\2\100\1\0\1\100\1\12\102\100\1\4\2\0"+
    "\1\4\1\0\2\4\1\0\17\4\5\113\1\0\2\4"+
    "\1\0\3\4\1\124\1\125\1\126\3\4\1\77\5\4"+
    "\1\124\1\125\1\126\30\4\1\114\2\212\1\114\1\212"+
    "\2\114\1\212\11\114\1\213\12\114\1\212\2\114\1\212"+
    "\11\114\1\214\40\114\1\115\1\215\1\216\1\115\1\215"+
    "\1\217\1\115\1\215\24\115\1\215\2\115\1\215\11\115"+
    "\1\220\40\115\1\4\2\0\1\4\1\0\2\4\1\0"+
    "\15\4\1\113\1\4\1\117\1\120\1\121\1\122\1\123"+
    "\1\0\2\4\1\0\3\4\1\124\1\125\1\126\1\221"+
    "\2\4\1\77\5\4\1\124\1\125\1\126\4\4\1\221"+
    "\24\4\2\0\1\4\1\0\2\4\1\0\15\4\1\113"+
    "\1\4\4\122\1\123\1\0\2\4\1\0\3\4\1\124"+
    "\1\125\1\126\1\221\2\4\1\77\5\4\1\124\1\125"+
    "\1\126\4\4\1\221\24\4\2\0\1\4\1\0\2\4"+
    "\1\0\15\4\1\113\1\4\4\222\1\123\1\0\2\4"+
    "\1\0\3\4\1\124\1\125\1\126\1\221\2\4\1\77"+
    "\5\4\1\124\1\125\1\126\4\4\1\221\24\4\2\0"+
    "\1\4\1\0\2\4\1\0\15\4\1\113\1\4\4\223"+
    "\1\123\1\0\2\4\1\0\3\4\1\124\1\125\1\126"+
    "\1\221\2\4\1\77\5\4\1\124\1\125\1\126\4\4"+
    "\1\221\24\4\2\0\1\4\1\0\2\4\1\0\15\4"+
    "\1\113\1\4\5\123\1\0\2\4\1\0\3\4\1\124"+
    "\1\125\1\126\3\4\1\77\5\4\1\124\1\125\1\126"+
    "\31\4\2\0\1\4\1\0\2\4\1\0\12\4\1\224"+
    "\1\4\1\224\2\4\5\225\1\0\2\4\1\0\11\4"+
    "\1\77\41\4\2\0\1\4\1\0\2\4\1\0\17\4"+
    "\1\226\4\227\1\0\2\4\1\0\2\4\4\227\3\4"+
    "\1\77\2\4\6\227\31\4\2\0\1\4\1\0\2\4"+
    "\1\0\24\4\1\0\2\4\1\230\11\4\1\77\41\4"+
    "\2\0\1\4\1\0\2\4\1\0\24\4\1\0\2\4"+
    "\1\231\1\232\10\4\1\77\40\4\1\13\2\0\1\4"+
    "\1\0\2\4\1\0\3\4\1\13\13\4\5\13\1\0"+
    "\2\4\1\0\2\4\6\13\1\4\1\77\2\4\20\13"+
    "\1\233\7\13\4\4\1\13\1\4\1\13\2\0\1\4"+
    "\1\0\2\4\1\0\3\4\1\13\13\4\5\13\1\0"+
    "\2\4\1\0\2\4\6\13\1\4\1\77\2\4\15\13"+
    "\1\234\12\13\4\4\1\13\1\4\1\13\2\0\1\4"+
    "\1\0\2\4\1\0\3\4\1\13\13\4\5\13\1\0"+
    "\2\4\1\0\2\4\6\13\1\4\1\77\2\4\4\13"+
    "\1\235\23\13\4\4\1\13\1\4\1\13\2\0\1\4"+
    "\1\0\2\4\1\0\3\4\1\13\13\4\5\13\1\0"+
    "\2\4\1\0\2\4\6\13\1\4\1\77\2\4\21\13"+
    "\1\236\6\13\4\4\1\13\1\4\1\13\2\0\1\4"+
    "\1\0\2\4\1\0\3\4\1\13\13\4\5\13\1\0"+
    "\2\4\1\0\2\4\6\13\1\4\1\77\2\4\20\13"+
    "\1\237\1\240\6\13\4\4\1\13\1\4\1\13\2\0"+
    "\1\4\1\0\2\4\1\0\3\4\1\13\13\4\5\13"+
    "\1\0\2\4\1\0\2\4\6\13\1\4\1\77\2\4"+
    "\1\241\27\13\4\4\1\13\1\4\1\13\2\0\1\4"+
    "\1\0\2\4\1\0\3\4\1\13\13\4\5\13\1\0"+
    "\2\4\1\0\2\4\6\13\1\4\1\77\2\4\1\242"+
    "\27\13\4\4\1\13\1\4\1\13\2\0\1\4\1\0"+
    "\2\4\1\0\3\4\1\13\13\4\5\13\1\0\2\4"+
    "\1\0\2\4\6\13\1\4\1\77\2\4\14\13\1\243"+
    "\13\13\4\4\1\13\1\4\1\13\2\0\1\4\1\0"+
    "\2\4\1\0\3\4\1\13\13\4\5\13\1\0\2\4"+
    "\1\0\2\4\6\13\1\4\1\77\2\4\5\13\1\244"+
    "\22\13\4\4\1\13\1\4\1\13\2\0\1\4\1\0"+
    "\2\4\1\0\3\4\1\13\13\4\5\13\1\0\2\4"+
    "\1\0\2\4\6\13\1\4\1\77\2\4\22\13\1\245"+
    "\5\13\4\4\1\13\1\4\1\13\2\0\1\4\1\0"+
    "\2\4\1\0\3\4\1\13\13\4\5\13\1\0\2\4"+
    "\1\0\2\4\6\13\1\4\1\77\2\4\20\13\1\246"+
    "\7\13\4\4\1\13\1\4\1\13\2\0\1\4\1\0"+
    "\2\4\1\0\3\4\1\13\13\4\5\13\1\0\2\4"+
    "\1\0\2\4\6\13\1\4\1\77\2\4\21\13\1\247"+
    "\6\13\4\4\1\13\1\4\1\13\2\0\1\4\1\0"+
    "\2\4\1\0\3\4\1\13\13\4\5\13\1\0\2\4"+
    "\1\0\2\4\6\13\1\4\1\77\2\4\12\13\1\250"+
    "\15\13\4\4\1\13\1\4\1\13\2\0\1\4\1\0"+
    "\2\4\1\0\3\4\1\13\13\4\5\13\1\0\2\4"+
    "\1\0\2\4\6\13\1\4\1\77\2\4\14\13\1\251"+
    "\13\13\4\4\1\13\1\4\1\13\2\0\1\4\1\0"+
    "\2\4\1\0\3\4\1\13\13\4\5\13\1\0\2\4"+
    "\1\0\2\4\6\13\1\4\1\77\2\4\15\13\1\252"+
    "\12\13\4\4\1\13\1\4\1\13\2\0\1\4\1\0"+
    "\2\4\1\0\3\4\1\13\13\4\5\13\1\0\2\4"+
    "\1\0\2\4\6\13\1\4\1\77\2\4\17\13\1\253"+
    "\10\13\4\4\1\13\1\4\1\13\2\0\1\4\1\0"+
    "\2\4\1\0\3\4\1\13\13\4\5\13\1\0\2\4"+
    "\1\0\2\4\6\13\1\4\1\77\2\4\21\13\1\254"+
    "\6\13\4\4\1\13\1\4\1\13\2\0\1\4\1\0"+
    "\2\4\1\0\3\4\1\13\13\4\5\13\1\0\2\4"+
    "\1\0\2\4\6\13\1\4\1\77\2\4\16\13\1\255"+
    "\11\13\4\4\1\13\1\4\1\13\2\0\1\4\1\0"+
    "\2\4\1\0\3\4\1\13\13\4\5\13\1\0\2\4"+
    "\1\0\2\4\6\13\1\4\1\77\2\4\20\13\1\256"+
    "\1\257\6\13\4\4\1\13\1\4\1\13\2\0\1\4"+
    "\1\0\2\4\1\0\3\4\1\13\13\4\5\13\1\0"+
    "\2\4\1\0\2\4\6\13\1\4\1\77\2\4\14\13"+
    "\1\260\13\13\4\4\1\13\1\4\1\13\2\0\1\4"+
    "\1\0\2\4\1\0\3\4\1\13\13\4\5\13\1\0"+
    "\2\4\1\0\2\4\6\13\1\4\1\77\2\4\21\13"+
    "\1\261\6\13\4\4\1\13\1\4\1\13\2\0\1\4"+
    "\1\0\2\4\1\0\3\4\1\13\13\4\5\13\1\0"+
    "\2\4\1\0\2\4\6\13\1\4\1\77\2\4\24\13"+
    "\1\262\3\13\4\4\1\13\1\4\1\13\2\0\1\4"+
    "\1\0\2\4\1\0\3\4\1\13\13\4\5\13\1\0"+
    "\2\4\1\0\2\4\6\13\1\4\1\77\2\4\12\13"+
    "\1\263\15\13\4\4\1\13\1\4\1\13\2\0\1\4"+
    "\1\0\2\4\1\0\3\4\1\13\13\4\5\13\1\0"+
    "\2\4\1\0\2\4\6\13\1\4\1\77\2\4\2\13"+
    "\1\264\25\13\4\4\1\13\1\4\1\13\2\0\1\4"+
    "\1\0\2\4\1\0\3\4\1\13\13\4\5\13\1\0"+
    "\2\4\1\0\2\4\6\13\1\4\1\77\2\4\10\13"+
    "\1\265\4\13\1\266\12\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\1\13\1\267\26\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\21\13\1\270\6\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\15\13\1\271\12\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\1\272\16\13\1\273\10\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\16\13\1\274\11\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\10\13\1\275\17\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\14\13\1\276\13\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\10\13\1\277\6\13\1\300\10\13\4\4"+
    "\1\13\1\4\1\13\2\0\1\4\1\0\2\4\1\0"+
    "\3\4\1\13\13\4\5\13\1\0\2\4\1\0\2\4"+
    "\6\13\1\4\1\77\2\4\1\301\21\13\1\302\3\13"+
    "\1\303\1\13\4\4\1\13\1\4\1\13\2\0\1\4"+
    "\1\0\2\4\1\0\3\4\1\13\13\4\5\13\1\0"+
    "\2\4\1\0\2\4\6\13\1\4\1\77\2\4\10\13"+
    "\1\304\1\13\1\305\15\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\10\13\1\306\17\13\4\4\1\13\1\4\1\67"+
    "\1\207\1\76\1\207\1\76\1\207\1\67\1\207\41\67"+
    "\1\206\36\67\1\207\5\67\1\0\44\67\1\206\40\67"+
    "\21\212\1\307\70\212\1\114\2\212\1\114\1\212\2\114"+
    "\1\212\11\114\1\213\4\114\1\310\5\114\1\212\2\114"+
    "\1\212\11\114\1\214\40\114\7\212\1\114\11\212\1\307"+
    "\70\212\2\215\1\216\2\215\1\311\104\215\1\4\1\0"+
    "\1\216\1\4\1\0\2\4\1\0\24\4\1\0\2\4"+
    "\1\0\11\4\1\77\40\4\2\215\1\216\2\215\1\311"+
    "\1\215\1\115\102\215\1\4\2\0\1\4\1\0\2\4"+
    "\1\0\15\4\1\113\1\4\4\312\1\123\1\0\2\4"+
    "\1\0\3\4\1\124\1\125\1\126\1\221\2\4\1\77"+
    "\5\4\1\124\1\125\1\126\4\4\1\221\24\4\2\0"+
    "\1\4\1\0\2\4\1\0\15\4\1\113\1\4\4\313"+
    "\1\123\1\0\2\4\1\0\3\4\1\124\1\125\1\126"+
    "\1\221\2\4\1\77\5\4\1\124\1\125\1\126\4\4"+
    "\1\221\24\4\2\0\1\4\1\0\2\4\1\0\17\4"+
    "\5\225\1\0\2\4\1\0\11\4\1\77\41\4\2\0"+
    "\1\4\1\0\2\4\1\0\17\4\5\225\1\0\2\4"+
    "\1\0\3\4\1\124\1\4\1\126\3\4\1\77\5\4"+
    "\1\124\1\4\1\126\31\4\2\0\1\4\1\0\2\4"+
    "\1\0\17\4\1\226\4\227\1\0\2\4\1\0\2\4"+
    "\4\227\1\314\2\4\1\77\2\4\6\227\4\4\1\314"+
    "\24\4\2\0\1\4\1\0\2\4\1\0\17\4\5\315"+
    "\1\0\2\4\1\0\2\4\4\315\1\314\2\4\1\77"+
    "\2\4\6\315\4\4\1\314\24\4\2\0\1\4\1\0"+
    "\2\4\1\0\24\4\1\0\2\4\1\316\11\4\1\77"+
    "\40\4\1\13\2\0\1\4\1\0\2\4\1\0\3\4"+
    "\1\13\13\4\5\13\1\0\2\4\1\0\2\4\6\13"+
    "\1\4\1\77\2\4\21\13\1\317\6\13\4\4\1\13"+
    "\1\4\1\13\2\0\1\4\1\0\2\4\1\0\3\4"+
    "\1\13\13\4\5\13\1\0\2\4\1\0\2\4\6\13"+
    "\1\4\1\77\2\4\12\13\1\320\15\13\4\4\1\13"+
    "\1\4\1\13\2\0\1\4\1\0\2\4\1\0\3\4"+
    "\1\13\13\4\5\13\1\0\2\4\1\0\2\4\6\13"+
    "\1\4\1\77\2\4\1\321\27\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\4\13\1\322\23\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\4\13\1\323\23\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\2\13\1\324\25\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\17\13\1\325\10\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\20\13\1\326\7\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\20\13\1\327\1\330\6\13\4\4\1\13"+
    "\1\4\1\13\2\0\1\4\1\0\2\4\1\0\3\4"+
    "\1\13\13\4\5\13\1\0\2\4\1\0\2\4\6\13"+
    "\1\4\1\77\2\4\1\331\27\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\1\13\1\332\26\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\4\13\1\333\23\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\4\13\1\334\23\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\20\13\1\335\7\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\1\336\27\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\1\337\27\13\4\4\1\13\1\4\1\13\2\0"+
    "\1\4\1\0\2\4\1\0\3\4\1\13\13\4\5\13"+
    "\1\0\2\4\1\0\2\4\6\13\1\4\1\77\2\4"+
    "\15\13\1\340\12\13\4\4\1\13\1\4\1\13\2\0"+
    "\1\4\1\0\2\4\1\0\3\4\1\13\13\4\5\13"+
    "\1\0\2\4\1\0\2\4\6\13\1\4\1\77\2\4"+
    "\12\13\1\341\2\13\1\342\12\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\21\13\1\343\6\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\4\13\1\344\23\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\6\13\1\345\21\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\10\13\1\346\17\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\12\13\1\347\15\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\11\13\1\350\16\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\23\13\1\351\4\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\21\13\1\352\6\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\12\13\1\353\15\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\22\13\1\354\5\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\17\13\1\355\10\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\21\13\1\356\6\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\10\13\1\357\17\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\4\13\1\360\23\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\21\13\1\361\6\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\2\13\1\362\25\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\20\13\1\363\7\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\15\13\1\364\12\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\14\13\1\365\13\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\4\13\1\366\23\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\3\13\1\367\24\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\1\370\27\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\12\13\1\371\15\13\4\4\1\13\1\4\21\212"+
    "\1\307\4\212\1\216\63\212\2\0\1\216\107\0\1\4"+
    "\2\0\1\4\1\0\2\4\1\0\15\4\1\113\1\4"+
    "\4\372\1\123\1\0\2\4\1\0\3\4\1\124\1\125"+
    "\1\126\1\221\2\4\1\77\5\4\1\124\1\125\1\126"+
    "\4\4\1\221\24\4\2\0\1\4\1\0\2\4\1\0"+
    "\15\4\1\113\1\4\4\373\1\123\1\0\2\4\1\0"+
    "\3\4\1\124\1\125\1\126\1\221\2\4\1\77\5\4"+
    "\1\124\1\125\1\126\4\4\1\221\24\4\2\0\1\4"+
    "\1\0\2\4\1\0\17\4\5\374\1\0\2\4\1\0"+
    "\2\4\4\374\1\314\2\4\1\77\2\4\6\374\4\4"+
    "\1\314\23\4\1\13\2\0\1\4\1\0\2\4\1\0"+
    "\3\4\1\13\13\4\5\13\1\0\2\4\1\0\2\4"+
    "\6\13\1\4\1\77\2\4\17\13\1\375\10\13\4\4"+
    "\1\13\1\4\1\13\2\0\1\4\1\0\2\4\1\0"+
    "\3\4\1\13\13\4\5\13\1\0\2\4\1\0\2\4"+
    "\6\13\1\4\1\77\2\4\4\13\1\376\23\13\4\4"+
    "\1\13\1\4\1\13\2\0\1\4\1\0\2\4\1\0"+
    "\3\4\1\13\13\4\5\13\1\0\2\4\1\0\2\4"+
    "\6\13\1\4\1\77\2\4\11\13\1\377\16\13\4\4"+
    "\1\13\1\4\1\13\2\0\1\4\1\0\2\4\1\0"+
    "\3\4\1\13\13\4\5\13\1\0\2\4\1\0\2\4"+
    "\6\13\1\4\1\77\2\4\7\13\1\u0100\20\13\4\4"+
    "\1\13\1\4\1\13\2\0\1\4\1\0\2\4\1\0"+
    "\3\4\1\13\13\4\5\13\1\0\2\4\1\0\2\4"+
    "\6\13\1\4\1\77\2\4\20\13\1\u0101\7\13\4\4"+
    "\1\13\1\4\1\13\2\0\1\4\1\0\2\4\1\0"+
    "\3\4\1\13\13\4\5\13\1\0\2\4\1\0\2\4"+
    "\6\13\1\4\1\77\2\4\21\13\1\u0102\6\13\4\4"+
    "\1\13\1\4\1\13\2\0\1\4\1\0\2\4\1\0"+
    "\3\4\1\13\13\4\5\13\1\0\2\4\1\0\2\4"+
    "\6\13\1\4\1\77\2\4\10\13\1\u0103\17\13\4\4"+
    "\1\13\1\4\1\13\2\0\1\4\1\0\2\4\1\0"+
    "\3\4\1\13\13\4\5\13\1\0\2\4\1\0\2\4"+
    "\6\13\1\4\1\77\2\4\22\13\1\u0104\5\13\4\4"+
    "\1\13\1\4\1\13\2\0\1\4\1\0\2\4\1\0"+
    "\3\4\1\13\13\4\5\13\1\0\2\4\1\0\2\4"+
    "\6\13\1\4\1\77\2\4\12\13\1\u0105\15\13\4\4"+
    "\1\13\1\4\1\13\2\0\1\4\1\0\2\4\1\0"+
    "\3\4\1\13\13\4\5\13\1\0\2\4\1\0\2\4"+
    "\6\13\1\4\1\77\2\4\14\13\1\u0106\13\13\4\4"+
    "\1\13\1\4\1\13\2\0\1\4\1\0\2\4\1\0"+
    "\3\4\1\13\13\4\5\13\1\0\2\4\1\0\2\4"+
    "\6\13\1\4\1\77\2\4\4\13\1\u0107\23\13\4\4"+
    "\1\13\1\4\1\13\2\0\1\4\1\0\2\4\1\0"+
    "\3\4\1\13\13\4\5\13\1\0\2\4\1\0\2\4"+
    "\6\13\1\4\1\77\2\4\12\13\1\u0108\15\13\4\4"+
    "\1\13\1\4\1\13\2\0\1\4\1\0\2\4\1\0"+
    "\3\4\1\13\13\4\5\13\1\0\2\4\1\0\2\4"+
    "\6\13\1\4\1\77\2\4\21\13\1\u0109\6\13\4\4"+
    "\1\13\1\4\1\13\2\0\1\4\1\0\2\4\1\0"+
    "\3\4\1\13\13\4\5\13\1\0\2\4\1\0\2\4"+
    "\6\13\1\4\1\77\2\4\4\13\1\u010a\23\13\4\4"+
    "\1\13\1\4\1\13\2\0\1\4\1\0\2\4\1\0"+
    "\3\4\1\13\13\4\5\13\1\0\2\4\1\0\2\4"+
    "\6\13\1\4\1\77\2\4\17\13\1\u010b\10\13\4\4"+
    "\1\13\1\4\1\13\2\0\1\4\1\0\2\4\1\0"+
    "\3\4\1\13\13\4\5\13\1\0\2\4\1\0\2\4"+
    "\6\13\1\4\1\77\2\4\1\u010c\27\13\4\4\1\13"+
    "\1\4\1\13\2\0\1\4\1\0\2\4\1\0\3\4"+
    "\1\13\13\4\5\13\1\0\2\4\1\0\2\4\6\13"+
    "\1\4\1\77\2\4\17\13\1\u010d\10\13\4\4\1\13"+
    "\1\4\1\13\2\0\1\4\1\0\2\4\1\0\3\4"+
    "\1\13\13\4\5\13\1\0\2\4\1\0\2\4\6\13"+
    "\1\4\1\77\2\4\23\13\1\u010e\4\13\4\4\1\13"+
    "\1\4\1\13\2\0\1\4\1\0\2\4\1\0\3\4"+
    "\1\13\13\4\5\13\1\0\2\4\1\0\2\4\6\13"+
    "\1\4\1\77\2\4\1\u010f\27\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\1\u0110\27\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\4\13\1\u0111\23\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\10\13\1\u0112\17\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\17\13\1\u0113\10\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\21\13\1\u0114\6\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\10\13\1\u0115\17\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\2\13\1\u0116\25\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\17\13\1\u0117\10\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\2\13\1\u0118\25\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\7\13\1\u0119\20\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\24\13\1\u011a\3\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\20\13\1\u011b\7\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\21\13\1\u011c\6\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\4\13\1\u011d\23\13\4\4\1\13\2\4\2\0"+
    "\1\4\1\0\2\4\1\0\15\4\1\113\1\4\4\u011e"+
    "\1\123\1\0\2\4\1\0\3\4\1\124\1\125\1\126"+
    "\1\221\2\4\1\77\5\4\1\124\1\125\1\126\4\4"+
    "\1\221\24\4\2\0\1\4\1\0\2\4\1\0\15\4"+
    "\1\113\1\4\4\u011f\1\123\1\0\2\4\1\0\3\4"+
    "\1\124\1\125\1\126\1\221\2\4\1\77\5\4\1\124"+
    "\1\125\1\126\4\4\1\221\24\4\2\0\1\4\1\0"+
    "\2\4\1\0\17\4\5\u0120\1\0\2\4\1\0\2\4"+
    "\4\u0120\1\314\2\4\1\77\2\4\6\u0120\4\4\1\314"+
    "\23\4\1\13\2\0\1\4\1\0\2\4\1\0\3\4"+
    "\1\13\13\4\5\13\1\0\2\4\1\0\2\4\6\13"+
    "\1\4\1\77\2\4\1\u0121\27\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\1\u0122\27\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\14\13\1\u0123\13\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\12\13\1\u0124\15\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\4\13\1\u0125\23\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\3\13\1\u0126\24\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\12\13\1\u0127\15\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\13\13\1\u0128\14\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\21\13\1\u0129\6\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\14\13\1\u012a\13\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\5\13\1\u012b\22\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\4\13\1\u012c\23\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\6\13\1\u012d\21\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\21\13\1\u012e\6\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\2\13\1\u012f\25\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\2\13\1\u0130\25\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\14\13\1\u0131\13\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\2\13\1\u0132\25\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\21\13\1\u0133\6\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\7\13\1\u0134\20\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\17\13\1\u0135\10\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\20\13\1\u0136\7\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\10\13\1\u0137\17\13\4\4\1\13\1\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\10\13\1\u0138\17\13\4\4\1\13\2\4\2\0"+
    "\1\4\1\0\2\4\1\0\15\4\1\113\1\4\4\u0139"+
    "\1\123\1\0\2\4\1\0\3\4\1\124\1\125\1\126"+
    "\1\221\2\4\1\77\5\4\1\124\1\125\1\126\4\4"+
    "\1\221\24\4\2\0\1\4\1\0\2\4\1\0\15\4"+
    "\1\113\1\4\4\u013a\1\123\1\0\2\4\1\0\3\4"+
    "\1\124\1\125\1\126\1\221\2\4\1\77\5\4\1\124"+
    "\1\125\1\126\4\4\1\221\24\4\2\0\1\4\1\0"+
    "\2\4\1\0\17\4\5\u013b\1\0\2\4\1\0\2\4"+
    "\4\u013b\1\314\2\4\1\77\2\4\6\u013b\4\4\1\314"+
    "\23\4\1\13\2\0\1\4\1\0\2\4\1\0\3\4"+
    "\1\13\13\4\5\13\1\0\2\4\1\0\2\4\6\13"+
    "\1\4\1\77\2\4\2\13\1\u013c\25\13\4\4\1\13"+
    "\1\4\1\13\2\0\1\4\1\0\2\4\1\0\3\4"+
    "\1\13\13\4\5\13\1\0\2\4\1\0\2\4\6\13"+
    "\1\4\1\77\2\4\14\13\1\u013d\13\13\4\4\1\13"+
    "\1\4\1\13\2\0\1\4\1\0\2\4\1\0\3\4"+
    "\1\13\13\4\5\13\1\0\2\4\1\0\2\4\6\13"+
    "\1\4\1\77\2\4\22\13\1\u013e\5\13\4\4\1\13"+
    "\1\4\1\13\2\0\1\4\1\0\2\4\1\0\3\4"+
    "\1\13\13\4\5\13\1\0\2\4\1\0\2\4\6\13"+
    "\1\4\1\77\2\4\21\13\1\u013f\6\13\4\4\1\13"+
    "\1\4\1\13\2\0\1\4\1\0\2\4\1\0\3\4"+
    "\1\13\13\4\5\13\1\0\2\4\1\0\2\4\6\13"+
    "\1\4\1\77\2\4\20\13\1\u0140\7\13\4\4\1\13"+
    "\1\4\1\13\2\0\1\4\1\0\2\4\1\0\3\4"+
    "\1\13\13\4\5\13\1\0\2\4\1\0\2\4\6\13"+
    "\1\4\1\77\2\4\26\13\1\u0141\1\13\4\4\1\13"+
    "\1\4\1\13\2\0\1\4\1\0\2\4\1\0\3\4"+
    "\1\13\13\4\5\13\1\0\2\4\1\0\2\4\6\13"+
    "\1\4\1\77\2\4\4\13\1\u0142\23\13\4\4\1\13"+
    "\1\4\1\13\2\0\1\4\1\0\2\4\1\0\3\4"+
    "\1\13\13\4\5\13\1\0\2\4\1\0\2\4\6\13"+
    "\1\4\1\77\2\4\2\13\1\u0143\25\13\4\4\1\13"+
    "\1\4\1\13\2\0\1\4\1\0\2\4\1\0\3\4"+
    "\1\13\13\4\5\13\1\0\2\4\1\0\2\4\6\13"+
    "\1\4\1\77\2\4\1\u0144\27\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\4\13\1\u0145\23\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\4\13\1\u0146\23\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\21\13\1\u0147\6\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\5\13\1\u0148\22\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\15\13\1\u0149\12\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\4\13\1\u014a\23\13\4\4\1\13\1\4"+
    "\1\13\2\0\1\4\1\0\2\4\1\0\3\4\1\13"+
    "\13\4\5\13\1\0\2\4\1\0\2\4\6\13\1\4"+
    "\1\77\2\4\12\13\1\u014b\15\13\4\4\1\13\2\4"+
    "\2\0\1\4\1\0\2\4\1\0\15\4\1\113\1\4"+
    "\4\u014c\1\123\1\0\2\4\1\0\3\4\1\124\1\125"+
    "\1\126\1\221\2\4\1\77\5\4\1\124\1\125\1\126"+
    "\4\4\1\221\24\4\2\0\1\4\1\0\2\4\1\0"+
    "\15\4\1\113\1\4\4\u014d\1\123\1\0\2\4\1\0"+
    "\3\4\1\124\1\125\1\126\1\221\2\4\1\77\5\4"+
    "\1\124\1\125\1\126\4\4\1\221\24\4\2\0\1\4"+
    "\1\0\2\4\1\0\17\4\5\u014e\1\0\2\4\1\0"+
    "\2\4\4\u014e\1\314\2\4\1\77\2\4\6\u014e\4\4"+
    "\1\314\23\4\1\13\2\0\1\4\1\0\2\4\1\0"+
    "\3\4\1\13\13\4\5\13\1\0\2\4\1\0\2\4"+
    "\6\13\1\4\1\77\2\4\21\13\1\u014f\6\13\4\4"+
    "\1\13\1\4\1\13\2\0\1\4\1\0\2\4\1\0"+
    "\3\4\1\13\13\4\5\13\1\0\2\4\1\0\2\4"+
    "\6\13\1\4\1\77\2\4\4\13\1\u0150\23\13\4\4"+
    "\1\13\1\4\1\13\2\0\1\4\1\0\2\4\1\0"+
    "\3\4\1\13\13\4\5\13\1\0\2\4\1\0\2\4"+
    "\6\13\1\4\1\77\2\4\14\13\1\u0151\13\13\4\4"+
    "\1\13\1\4\1\13\2\0\1\4\1\0\2\4\1\0"+
    "\3\4\1\13\13\4\5\13\1\0\2\4\1\0\2\4"+
    "\6\13\1\4\1\77\2\4\4\13\1\u0152\23\13\4\4"+
    "\1\13\1\4\1\13\2\0\1\4\1\0\2\4\1\0"+
    "\3\4\1\13\13\4\5\13\1\0\2\4\1\0\2\4"+
    "\6\13\1\4\1\77\2\4\2\13\1\u0153\25\13\4\4"+
    "\1\13\1\4\1\13\2\0\1\4\1\0\2\4\1\0"+
    "\3\4\1\13\13\4\5\13\1\0\2\4\1\0\2\4"+
    "\6\13\1\4\1\77\2\4\4\13\1\u0154\23\13\4\4"+
    "\1\13\1\4\1\13\2\0\1\4\1\0\2\4\1\0"+
    "\3\4\1\13\13\4\5\13\1\0\2\4\1\0\2\4"+
    "\6\13\1\4\1\77\2\4\16\13\1\u0155\11\13\4\4"+
    "\1\13\1\4\1\13\2\0\1\4\1\0\2\4\1\0"+
    "\3\4\1\13\13\4\5\13\1\0\2\4\1\0\2\4"+
    "\6\13\1\4\1\77\2\4\14\13\1\u0156\13\13\4\4"+
    "\1\13\1\4\1\13\2\0\1\4\1\0\2\4\1\0"+
    "\3\4\1\13\13\4\5\13\1\0\2\4\1\0\2\4"+
    "\6\13\1\4\1\77\2\4\14\13\1\u0157\13\13\4\4"+
    "\1\13\1\4\1\13\2\0\1\4\1\0\2\4\1\0"+
    "\3\4\1\13\13\4\5\13\1\0\2\4\1\0\2\4"+
    "\6\13\1\4\1\77\2\4\4\13\1\u0158\23\13\4\4"+
    "\1\13\2\4\2\0\1\4\1\0\2\4\1\0\15\4"+
    "\1\113\1\4\4\u0159\1\123\1\0\2\4\1\0\3\4"+
    "\1\124\1\125\1\126\1\221\2\4\1\77\5\4\1\124"+
    "\1\125\1\126\4\4\1\221\24\4\2\0\1\4\1\0"+
    "\2\4\1\0\15\4\1\113\1\4\4\u015a\1\123\1\0"+
    "\2\4\1\0\3\4\1\124\1\125\1\126\1\221\2\4"+
    "\1\77\5\4\1\124\1\125\1\126\4\4\1\221\24\4"+
    "\2\0\1\4\1\0\2\4\1\0\17\4\5\u015b\1\0"+
    "\2\4\1\0\2\4\4\u015b\1\314\2\4\1\77\2\4"+
    "\6\u015b\4\4\1\314\23\4\1\13\2\0\1\4\1\0"+
    "\2\4\1\0\3\4\1\13\13\4\5\13\1\0\2\4"+
    "\1\0\2\4\6\13\1\4\1\77\2\4\21\13\1\u015c"+
    "\6\13\4\4\1\13\1\4\1\13\2\0\1\4\1\0"+
    "\2\4\1\0\3\4\1\13\13\4\5\13\1\0\2\4"+
    "\1\0\2\4\6\13\1\4\1\77\2\4\15\13\1\u015d"+
    "\12\13\4\4\1\13\1\4\1\13\2\0\1\4\1\0"+
    "\2\4\1\0\3\4\1\13\13\4\5\13\1\0\2\4"+
    "\1\0\2\4\6\13\1\4\1\77\2\4\4\13\1\u015e"+
    "\23\13\4\4\1\13\1\4\1\13\2\0\1\4\1\0"+
    "\2\4\1\0\3\4\1\13\13\4\5\13\1\0\2\4"+
    "\1\0\2\4\6\13\1\4\1\77\2\4\3\13\1\u015f"+
    "\24\13\4\4\1\13\1\4\1\13\2\0\1\4\1\0"+
    "\2\4\1\0\3\4\1\13\13\4\5\13\1\0\2\4"+
    "\1\0\2\4\6\13\1\4\1\77\2\4\10\13\1\u0160"+
    "\17\13\4\4\1\13\1\4\1\13\2\0\1\4\1\0"+
    "\2\4\1\0\3\4\1\13\13\4\5\13\1\0\2\4"+
    "\1\0\2\4\6\13\1\4\1\77\2\4\21\13\1\u0161"+
    "\6\13\4\4\1\13\2\4\2\0\1\4\1\0\2\4"+
    "\1\0\15\4\1\113\1\4\4\u0162\1\123\1\0\2\4"+
    "\1\0\3\4\1\124\1\125\1\126\1\221\2\4\1\77"+
    "\5\4\1\124\1\125\1\126\4\4\1\221\24\4\2\0"+
    "\1\4\1\0\2\4\1\0\15\4\1\113\1\4\4\u0163"+
    "\1\123\1\0\2\4\1\0\3\4\1\124\1\125\1\126"+
    "\1\221\2\4\1\77\5\4\1\124\1\125\1\126\4\4"+
    "\1\221\24\4\2\0\1\4\1\0\2\4\1\0\17\4"+
    "\5\u0164\1\0\2\4\1\0\2\4\4\u0164\1\314\2\4"+
    "\1\77\2\4\6\u0164\4\4\1\314\23\4\1\13\2\0"+
    "\1\4\1\0\2\4\1\0\3\4\1\13\13\4\5\13"+
    "\1\0\2\4\1\0\2\4\6\13\1\4\1\77\2\4"+
    "\20\13\1\u0165\7\13\4\4\1\13\1\4\1\13\2\0"+
    "\1\4\1\0\2\4\1\0\3\4\1\13\13\4\5\13"+
    "\1\0\2\4\1\0\2\4\6\13\1\4\1\77\2\4"+
    "\5\13\1\u0166\22\13\4\4\1\13\1\4\1\13\2\0"+
    "\1\4\1\0\2\4\1\0\3\4\1\13\13\4\5\13"+
    "\1\0\2\4\1\0\2\4\6\13\1\4\1\77\2\4"+
    "\27\13\1\u0167\4\4\1\13\2\4\2\0\1\4\1\0"+
    "\2\4\1\0\15\4\1\113\1\4\4\u0168\1\123\1\0"+
    "\2\4\1\0\3\4\1\124\1\125\1\126\1\221\2\4"+
    "\1\77\5\4\1\124\1\125\1\126\4\4\1\221\24\4"+
    "\2\0\1\4\1\0\2\4\1\0\15\4\1\113\1\4"+
    "\4\u0169\1\123\1\0\2\4\1\0\3\4\1\124\1\125"+
    "\1\126\1\221\2\4\1\77\5\4\1\124\1\125\1\126"+
    "\4\4\1\221\24\4\2\0\1\4\1\0\2\4\1\0"+
    "\17\4\5\u016a\1\0\2\4\1\0\2\4\4\u016a\1\314"+
    "\2\4\1\77\2\4\6\u016a\4\4\1\314\23\4\1\13"+
    "\2\0\1\4\1\0\2\4\1\0\3\4\1\13\13\4"+
    "\5\13\1\0\2\4\1\0\2\4\6\13\1\4\1\77"+
    "\2\4\4\13\1\u016b\23\13\4\4\1\13\2\4\2\0"+
    "\1\4\1\0\2\4\1\0\15\4\1\113\1\4\4\u016c"+
    "\1\123\1\0\2\4\1\0\3\4\1\124\1\125\1\126"+
    "\1\221\2\4\1\77\5\4\1\124\1\125\1\126\4\4"+
    "\1\221\24\4\2\0\1\4\1\0\2\4\1\0\15\4"+
    "\1\113\1\4\4\u016d\1\123\1\0\2\4\1\0\3\4"+
    "\1\124\1\125\1\126\1\221\2\4\1\77\5\4\1\124"+
    "\1\125\1\126\4\4\1\221\24\4\2\0\1\4\1\0"+
    "\2\4\1\0\17\4\5\u016e\1\0\2\4\1\0\2\4"+
    "\4\u016e\1\314\2\4\1\77\2\4\6\u016e\4\4\1\314"+
    "\23\4\1\13\2\0\1\4\1\0\2\4\1\0\3\4"+
    "\1\13\13\4\5\13\1\0\2\4\1\0\2\4\6\13"+
    "\1\4\1\77\2\4\3\13\1\u016f\24\13\4\4\1\13"+
    "\2\4\2\0\1\4\1\0\2\4\1\0\15\4\1\113"+
    "\1\4\4\u0170\1\123\1\0\2\4\1\0\3\4\1\124"+
    "\1\125\1\126\1\221\2\4\1\77\5\4\1\124\1\125"+
    "\1\126\4\4\1\221\24\4\2\0\1\4\1\0\2\4"+
    "\1\0\15\4\1\113\1\4\4\u0171\1\123\1\0\2\4"+
    "\1\0\3\4\1\124\1\125\1\126\1\221\2\4\1\77"+
    "\5\4\1\124\1\125\1\126\4\4\1\221\24\4\2\0"+
    "\1\4\1\0\2\4\1\0\17\4\5\u0172\1\0\2\4"+
    "\1\0\2\4\4\u0172\1\314\2\4\1\77\2\4\6\u0172"+
    "\4\4\1\314\24\4\2\0\1\4\1\0\2\4\1\0"+
    "\15\4\1\113\1\4\4\u0173\1\123\1\0\2\4\1\0"+
    "\3\4\1\124\1\125\1\126\1\221\2\4\1\77\5\4"+
    "\1\124\1\125\1\126\4\4\1\221\24\4\2\0\1\4"+
    "\1\0\2\4\1\0\15\4\1\113\1\4\4\u0174\1\123"+
    "\1\0\2\4\1\0\3\4\1\124\1\125\1\126\1\221"+
    "\2\4\1\77\5\4\1\124\1\125\1\126\4\4\1\221"+
    "\24\4\2\0\1\4\1\0\2\4\1\0\17\4\5\u0175"+
    "\1\0\2\4\1\0\2\4\4\u0175\1\314\2\4\1\77"+
    "\2\4\6\u0175\4\4\1\314\24\4\2\0\1\4\1\0"+
    "\2\4\1\0\15\4\1\113\1\4\4\u0176\1\123\1\0"+
    "\2\4\1\0\3\4\1\124\1\125\1\126\1\221\2\4"+
    "\1\77\5\4\1\124\1\125\1\126\4\4\1\221\24\4"+
    "\2\0\1\4\1\0\2\4\1\0\15\4\1\113\1\4"+
    "\4\u0177\1\123\1\0\2\4\1\0\3\4\1\124\1\125"+
    "\1\126\1\221\2\4\1\77\5\4\1\124\1\125\1\126"+
    "\4\4\1\221\24\4\2\0\1\4\1\0\2\4\1\0"+
    "\17\4\5\u0178\1\0\2\4\1\0\2\4\4\u0178\1\314"+
    "\2\4\1\77\2\4\6\u0178\4\4\1\314\24\4\2\0"+
    "\1\4\1\0\2\4\1\0\15\4\1\113\1\4\4\u0179"+
    "\1\123\1\0\2\4\1\0\3\4\1\124\1\125\1\126"+
    "\1\221\2\4\1\77\5\4\1\124\1\125\1\126\4\4"+
    "\1\221\24\4\2\0\1\4\1\0\2\4\1\0\15\4"+
    "\1\113\1\4\4\u017a\1\123\1\0\2\4\1\0\3\4"+
    "\1\124\1\125\1\126\1\221\2\4\1\77\5\4\1\124"+
    "\1\125\1\126\4\4\1\221\24\4\2\0\1\4\1\0"+
    "\2\4\1\0\17\4\5\u017b\1\0\2\4\1\0\2\4"+
    "\4\u017b\1\314\2\4\1\77\2\4\6\u017b\4\4\1\314"+
    "\24\4\2\0\1\4\1\0\2\4\1\0\15\4\1\113"+
    "\1\4\4\u017c\1\123\1\0\2\4\1\0\3\4\1\124"+
    "\1\125\1\126\1\221\2\4\1\77\5\4\1\124\1\125"+
    "\1\126\4\4\1\221\24\4\2\0\1\4\1\0\2\4"+
    "\1\0\15\4\1\113\1\4\4\u017d\1\123\1\0\2\4"+
    "\1\0\3\4\1\124\1\125\1\126\1\221\2\4\1\77"+
    "\5\4\1\124\1\125\1\126\4\4\1\221\24\4\2\0"+
    "\1\4\1\0\2\4\1\0\17\4\5\u017e\1\0\2\4"+
    "\1\0\2\4\4\u017e\1\314\2\4\1\77\2\4\6\u017e"+
    "\4\4\1\314\24\4\2\0\1\4\1\0\2\4\1\0"+
    "\15\4\1\113\1\4\4\u017f\1\123\1\0\2\4\1\0"+
    "\3\4\1\124\1\125\1\126\1\221\2\4\1\77\5\4"+
    "\1\124\1\125\1\126\4\4\1\221\24\4\2\0\1\4"+
    "\1\0\2\4\1\0\17\4\5\u0180\1\0\2\4\1\0"+
    "\2\4\4\u0180\1\314\2\4\1\77\2\4\6\u0180\4\4"+
    "\1\314\24\4\2\0\1\4\1\0\2\4\1\0\15\4"+
    "\1\113\1\4\4\u0181\1\123\1\0\2\4\1\0\3\4"+
    "\1\124\1\125\1\126\1\221\2\4\1\77\5\4\1\124"+
    "\1\125\1\126\4\4\1\221\24\4\2\0\1\4\1\0"+
    "\2\4\1\0\24\4\1\0\2\4\1\0\6\4\1\314"+
    "\2\4\1\77\14\4\1\314\24\4\2\0\1\4\1\0"+
    "\2\4\1\0\15\4\1\113\1\4\4\u0182\1\123\1\0"+
    "\2\4\1\0\3\4\1\124\1\125\1\126\1\221\2\4"+
    "\1\77\5\4\1\124\1\125\1\126\4\4\1\221\24\4"+
    "\2\0\1\4\1\0\2\4\1\0\15\4\1\113\1\4"+
    "\4\u0183\1\123\1\0\2\4\1\0\3\4\1\124\1\125"+
    "\1\126\1\221\2\4\1\77\5\4\1\124\1\125\1\126"+
    "\4\4\1\221\24\4\2\0\1\4\1\0\2\4\1\0"+
    "\15\4\1\113\1\4\4\u0184\1\123\1\0\2\4\1\0"+
    "\3\4\1\124\1\125\1\126\1\221\2\4\1\77\5\4"+
    "\1\124\1\125\1\126\4\4\1\221\24\4\2\0\1\4"+
    "\1\0\2\4\1\0\15\4\1\113\1\4\5\123\1\0"+
    "\2\4\1\0\3\4\1\124\1\125\1\126\1\221\2\4"+
    "\1\77\5\4\1\124\1\125\1\126\4\4\1\221\23\4";

  private static int [] zzUnpacktrans() {
    int [] result = new int[21904];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\25\1\1\11\43\1\1\11\1\1\1\0\3\1"+
    "\1\11\1\1\2\11\1\1\1\11\1\1\1\11\3\1"+
    "\1\11\13\1\3\11\1\1\1\11\45\1\1\11\1\1"+
    "\1\0\3\1\1\0\1\1\1\0\1\1\1\11\11\1"+
    "\2\11\55\1\1\0\6\1\1\11\266\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[388];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */


// 在自测期间，未了避免整体的项目代码报错，mock一下Lexer接口中的方法，开始////////////
//  void yybegin(int state){}
//  int yystate(){return 1;}
  public int getTokenStart(){return 1;}
  public int getTokenEnd(){return 1;}
//  IElementType advance() {return null;}
  public void reset(CharSequence buf, int start, int end, int initialState){return ;}
// 在自测期间，未了避免整体的项目代码报错，mock一下Lexer接口中的方法，开始////////////



//在这之间，可以定义一些java的中间变量，方法
  private static String zzToPrintable(CharSequence str) {
      // jflex 内置的 zzToPrintable 和 yytext 返回的结果不匹配，使用grammar-kit 的插件，会报错
      // 因此才自定义个本方法，兼容一下
      return str.toString();
  }
  // 看看能不能覆盖原来的内容。，，不能覆盖，会生成两个方法，然后就报错了
//   private static String zzToPrintable(String str) {
//      return str;
//   }

	StringBuffer string = new StringBuffer();

	private IElementType symbol(String typeNamw) {
		return ApexTypes.createElementTypeByName(typeNamw, yyline+1, yycolumn+1);
	}

	// 这个方法，以后再用
	private IElementType symbol(String typeNamw, Object value) {
        return ApexTypes.createElementTypeByName(typeNamw, yyline+1, yycolumn+1,value);
	}

	/**
	* assumes correct representation of a long value for
	* specified radix in scanner buffer from <code>start</code>
	* to <code>end</code>
	*/
	private long parseLong(int start, int end, int radix) {
		long result = 0;
		long digit;

		for (int i = start; i < end; i++) {
		  digit  = Character.digit(yycharat(i),radix);
		  result*= radix;
		  result+= digit;
		}

		return result;
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ApexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }

  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    

    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [300] { yybegin(YYINITIAL); return ApexTypes.KEY; }");
            { yybegin(YYINITIAL); return ApexTypes.KEY;
            }
          // fall through
          case 117: break;
          case 2:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [292] { /* ignore */ }");
            { /* ignore */
            }
          // fall through
          case 118: break;
          case 3:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [232] { return symbol(\"NOT\"); }");
            { return symbol("NOT");
            }
          // fall through
          case 119: break;
          case 4:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [268] { yybegin(STRING); string.setLength(0); }");
            { yybegin(STRING); string.setLength(0);
            }
          // fall through
          case 120: break;
          case 5:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [298] { yybegin(YYINITIAL); return ApexTypes.COMMENT; }");
            { yybegin(YYINITIAL); return ApexTypes.COMMENT;
            }
          // fall through
          case 121: break;
          case 6:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [295] { return symbol(\"IDENTIFIER\", yytext().toString()); }");
            { return symbol("IDENTIFIER", yytext().toString());
            }
          // fall through
          case 122: break;
          case 7:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [251] { return symbol(\"MOD\"); }");
            { return symbol("MOD");
            }
          // fall through
          case 123: break;
          case 8:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [248] { return symbol(\"AND\"); }");
            { return symbol("AND");
            }
          // fall through
          case 124: break;
          case 9:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [271] { yybegin(CHARLITERAL); }");
            { yybegin(CHARLITERAL);
            }
          // fall through
          case 125: break;
          case 10:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [218] { return symbol(\"LPAREN\"); }");
            { return symbol("LPAREN");
            }
          // fall through
          case 126: break;
          case 11:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [219] { return symbol(\"RPAREN\"); }");
            { return symbol("RPAREN");
            }
          // fall through
          case 127: break;
          case 12:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [246] { return symbol(\"MULT\"); }");
            { return symbol("MULT");
            }
          // fall through
          case 128: break;
          case 13:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [244] { return symbol(\"PLUS\"); }");
            { return symbol("PLUS");
            }
          // fall through
          case 129: break;
          case 14:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [225] { return symbol(\"COMMA\"); }");
            { return symbol("COMMA");
            }
          // fall through
          case 130: break;
          case 15:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [245] { return symbol(\"MINUS\"); }");
            { return symbol("MINUS");
            }
          // fall through
          case 131: break;
          case 16:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [226] { return symbol(\"DOT\"); }");
            { return symbol("DOT");
            }
          // fall through
          case 132: break;
          case 17:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [247] { return symbol(\"DIV\"); }");
            { return symbol("DIV");
            }
          // fall through
          case 133: break;
          case 18:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [275] { return symbol(\"INTEGER_LITERAL\", Integer.parseInt(yytext().toString())); }");
            { return symbol("INTEGER_LITERAL", Integer.parseInt(yytext().toString()));
            }
          // fall through
          case 134: break;
          case 19:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [235] { return symbol(\"COLON\"); }");
            { return symbol("COLON");
            }
          // fall through
          case 135: break;
          case 20:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [224] { return symbol(\"SEMICOLON\"); }");
            { return symbol("SEMICOLON");
            }
          // fall through
          case 136: break;
          case 21:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [231] { return symbol(\"LT\"); }");
            { return symbol("LT");
            }
          // fall through
          case 137: break;
          case 22:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [229] { return symbol(\"EQ\"); }");
            { return symbol("EQ");
            }
          // fall through
          case 138: break;
          case 23:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [230] { return symbol(\"GT\"); }");
            { return symbol("GT");
            }
          // fall through
          case 139: break;
          case 24:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [234] { return symbol(\"QUESTION\"); }");
            { return symbol("QUESTION");
            }
          // fall through
          case 140: break;
          case 25:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [222] { return symbol(\"LBRACK\"); }");
            { return symbol("LBRACK");
            }
          // fall through
          case 141: break;
          case 26:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [312] { return TokenType.BAD_CHARACTER; }");
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 142: break;
          case 27:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [223] { return symbol(\"RBRACK\"); }");
            { return symbol("RBRACK");
            }
          // fall through
          case 143: break;
          case 28:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [250] { return symbol(\"XOR\"); }");
            { return symbol("XOR");
            }
          // fall through
          case 144: break;
          case 29:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [220] { return symbol(\"LBRACE\"); }");
            { return symbol("LBRACE");
            }
          // fall through
          case 145: break;
          case 30:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [249] { return symbol(\"OR\"); }");
            { return symbol("OR");
            }
          // fall through
          case 146: break;
          case 31:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [221] { return symbol(\"RBRACE\"); }");
            { return symbol("RBRACE");
            }
          // fall through
          case 147: break;
          case 32:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [233] { return symbol(\"COMP\"); }");
            { return symbol("COMP");
            }
          // fall through
          case 148: break;
          case 33:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [308] { yybegin(YYINITIAL); return ApexTypes.VALUE; }");
            { yybegin(YYINITIAL); return ApexTypes.VALUE;
            }
          // fall through
          case 149: break;
          case 34:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [306] { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE; }");
            { yybegin(WAITING_VALUE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 150: break;
          case 35:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [310] { yybegin(YYINITIAL); return TokenType.WHITE_SPACE; }");
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 151: break;
          case 36:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [239] { return symbol(\"NOTEQ\"); }");
            { return symbol("NOTEQ");
            }
          // fall through
          case 152: break;
          case 37:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [262] { return symbol(\"MODEQ\"); }");
            { return symbol("MODEQ");
            }
          // fall through
          case 153: break;
          case 38:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [240] { return symbol(\"ANDAND\"); }");
            { return symbol("ANDAND");
            }
          // fall through
          case 154: break;
          case 39:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [259] { return symbol(\"ANDEQ\"); }");
            { return symbol("ANDEQ");
            }
          // fall through
          case 155: break;
          case 40:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [257] { return symbol(\"MULTEQ\"); }");
            { return symbol("MULTEQ");
            }
          // fall through
          case 156: break;
          case 41:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [242] { return symbol(\"PLUSPLUS\"); }");
            { return symbol("PLUSPLUS");
            }
          // fall through
          case 157: break;
          case 42:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [255] { return symbol(\"PLUSEQ\"); }");
            { return symbol("PLUSEQ");
            }
          // fall through
          case 158: break;
          case 43:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [243] { return symbol(\"MINUSMINUS\"); }");
            { return symbol("MINUSMINUS");
            }
          // fall through
          case 159: break;
          case 44:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [256] { return symbol(\"MINUSEQ\"); }");
            { return symbol("MINUSEQ");
            }
          // fall through
          case 160: break;
          case 45:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [285] { return symbol(\"FLOATING_POINT_LITERAL\", Double.parseDouble(yytext().toString())); }");
            { return symbol("FLOATING_POINT_LITERAL", Double.parseDouble(yytext().toString()));
            }
          // fall through
          case 161: break;
          case 46:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [258] { return symbol(\"DIVEQ\"); }");
            { return symbol("DIVEQ");
            }
          // fall through
          case 162: break;
          case 47:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [281] { return symbol(\"INTEGER_LITERAL\", Integer.valueOf((int) parseLong(0, yylength(), 8))); }");
            { return symbol("INTEGER_LITERAL", Integer.valueOf((int) parseLong(0, yylength(), 8)));
            }
          // fall through
          case 163: break;
          case 48:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [286] { return symbol(\"FLOATING_POINT_LITERAL\", Double.parseDouble((yytext().toString().substring(0,yylength()-1)))); }");
            { return symbol("FLOATING_POINT_LITERAL", Double.parseDouble((yytext().toString().substring(0,yylength()-1))));
            }
          // fall through
          case 164: break;
          case 49:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [284] { return symbol(\"FLOATING_POINT_LITERAL\", Float.parseFloat(yytext().toString().substring(0,yylength()-1))); }");
            { return symbol("FLOATING_POINT_LITERAL", Float.parseFloat(yytext().toString().substring(0,yylength()-1)));
            }
          // fall through
          case 165: break;
          case 50:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [276] { return symbol(\"INTEGER_LITERAL\", Long.parseLong(yytext().toString().substring(0,yylength()-1))); }");
            { return symbol("INTEGER_LITERAL", Long.parseLong(yytext().toString().substring(0,yylength()-1)));
            }
          // fall through
          case 166: break;
          case 51:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [252] { return symbol(\"LSHIFT\"); }");
            { return symbol("LSHIFT");
            }
          // fall through
          case 167: break;
          case 52:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [237] { return symbol(\"LTEQ\"); }");
            { return symbol("LTEQ");
            }
          // fall through
          case 168: break;
          case 53:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [236] { return symbol(\"EQEQ\"); }");
            { return symbol("EQEQ");
            }
          // fall through
          case 169: break;
          case 54:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [238] { return symbol(\"GTEQ\"); }");
            { return symbol("GTEQ");
            }
          // fall through
          case 170: break;
          case 55:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [253] { return symbol(\"RSHIFT\"); }");
            { return symbol("RSHIFT");
            }
          // fall through
          case 171: break;
          case 56:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [261] { return symbol(\"XOREQ\"); }");
            { return symbol("XOREQ");
            }
          // fall through
          case 172: break;
          case 57:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [170] { return symbol(\"DO\"); }");
            { return symbol("DO");
            }
          // fall through
          case 173: break;
          case 58:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [188] { return symbol(\"IF\"); }");
            { return symbol("IF");
            }
          // fall through
          case 174: break;
          case 59:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [260] { return symbol(\"OREQ\"); }");
            { return symbol("OREQ");
            }
          // fall through
          case 175: break;
          case 60:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [241] { return symbol(\"OROR\"); }");
            { return symbol("OROR");
            }
          // fall through
          case 176: break;
          case 61:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [282] { return symbol(\"INTEGER_LITERAL\", Long.valueOf((parseLong(0, yylength()-1, 8)))); }");
            { return symbol("INTEGER_LITERAL", Long.valueOf((parseLong(0, yylength()-1, 8))));
            }
          // fall through
          case 177: break;
          case 62:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [278] { return symbol(\"INTEGER_LITERAL\", Integer.valueOf((int) parseLong(2, yylength(), 16))); }");
            { return symbol("INTEGER_LITERAL", Integer.valueOf((int) parseLong(2, yylength(), 16)));
            }
          // fall through
          case 178: break;
          case 63:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [263] { return symbol(\"LSHIFTEQ\"); }");
            { return symbol("LSHIFTEQ");
            }
          // fall through
          case 179: break;
          case 64:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [264] { return symbol(\"RSHIFTEQ\"); }");
            { return symbol("RSHIFTEQ");
            }
          // fall through
          case 180: break;
          case 65:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [254] { return symbol(\"URSHIFT\"); }");
            { return symbol("URSHIFT");
            }
          // fall through
          case 181: break;
          case 66:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [177] { return symbol(\"FOR\"); }");
            { return symbol("FOR");
            }
          // fall through
          case 182: break;
          case 67:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [182] { return symbol(\"INT\"); }");
            { return symbol("INT");
            }
          // fall through
          case 183: break;
          case 68:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [186] { return symbol(\"NEW\"); }");
            { return symbol("NEW");
            }
          // fall through
          case 184: break;
          case 69:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [205] { return symbol(\"TRY\"); }");
            { return symbol("TRY");
            }
          // fall through
          case 185: break;
          case 70:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [279] { return symbol(\"INTEGER_LITERAL\", Long.valueOf(parseLong(2, yylength()-1, 16))); }");
            { return symbol("INTEGER_LITERAL", Long.valueOf(parseLong(2, yylength()-1, 16)));
            }
          // fall through
          case 186: break;
          case 71:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [265] { return symbol(\"URSHIFTEQ\"); }");
            { return symbol("URSHIFTEQ");
            }
          // fall through
          case 187: break;
          case 72:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [163] { return symbol(\"BYTE\"); }");
            { return symbol("BYTE");
            }
          // fall through
          case 188: break;
          case 73:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [164] { return symbol(\"CASE\"); }");
            { return symbol("CASE");
            }
          // fall through
          case 189: break;
          case 74:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [166] { return symbol(\"CHAR\"); }");
            { return symbol("CHAR");
            }
          // fall through
          case 190: break;
          case 75:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [172] { return symbol(\"ELSE\"); }");
            { return symbol("ELSE");
            }
          // fall through
          case 191: break;
          case 76:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [187] { return symbol(\"GOTO\"); }");
            { return symbol("GOTO");
            }
          // fall through
          case 192: break;
          case 77:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [184] { return symbol(\"LONG\"); }");
            { return symbol("LONG");
            }
          // fall through
          case 193: break;
          case 78:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [214] { return symbol(\"NULL_LITERAL\"); }");
            { return symbol("NULL_LITERAL");
            }
          // fall through
          case 194: break;
          case 79:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [202] { return symbol(\"THIS\"); }");
            { return symbol("THIS");
            }
          // fall through
          case 195: break;
          case 80:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [210] { return symbol(\"BOOLEAN_LITERAL\", Boolean.valueOf(true)); }");
            { return symbol("BOOLEAN_LITERAL", Boolean.valueOf(true));
            }
          // fall through
          case 196: break;
          case 81:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [199] { return symbol(\"VOID\"); }");
            { return symbol("VOID");
            }
          // fall through
          case 197: break;
          case 82:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [162] { return symbol(\"BREAK\"); }");
            { return symbol("BREAK");
            }
          // fall through
          case 198: break;
          case 83:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [165] { return symbol(\"CATCH\"); }");
            { return symbol("CATCH");
            }
          // fall through
          case 199: break;
          case 84:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [167] { return symbol(\"CLASS\"); }");
            { return symbol("CLASS");
            }
          // fall through
          case 200: break;
          case 85:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [168] { return symbol(\"CONST\"); }");
            { return symbol("CONST");
            }
          // fall through
          case 201: break;
          case 86:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [211] { return symbol(\"BOOLEAN_LITERAL\", Boolean.valueOf(false)); }");
            { return symbol("BOOLEAN_LITERAL", Boolean.valueOf(false));
            }
          // fall through
          case 202: break;
          case 87:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [174] { return symbol(\"FINAL\"); }");
            { return symbol("FINAL");
            }
          // fall through
          case 203: break;
          case 88:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [176] { return symbol(\"FLOAT\"); }");
            { return symbol("FLOAT");
            }
          // fall through
          case 204: break;
          case 89:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [190] { return symbol(\"SHORT\"); }");
            { return symbol("SHORT");
            }
          // fall through
          case 205: break;
          case 90:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [191] { return symbol(\"SUPER\"); }");
            { return symbol("SUPER");
            }
          // fall through
          case 206: break;
          case 91:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [203] { return symbol(\"THROW\"); }");
            { return symbol("THROW");
            }
          // fall through
          case 207: break;
          case 92:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [201] { return symbol(\"WHILE\"); }");
            { return symbol("WHILE");
            }
          // fall through
          case 208: break;
          case 93:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [171] { return symbol(\"DOUBLE\"); }");
            { return symbol("DOUBLE");
            }
          // fall through
          case 209: break;
          case 94:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [180] { return symbol(\"IMPORT\"); }");
            { return symbol("IMPORT");
            }
          // fall through
          case 210: break;
          case 95:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [185] { return symbol(\"NATIVE\"); }");
            { return symbol("NATIVE");
            }
          // fall through
          case 211: break;
          case 96:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [189] { return symbol(\"PUBLIC\"); }");
            { return symbol("PUBLIC");
            }
          // fall through
          case 212: break;
          case 97:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [198] { return symbol(\"RETURN\"); }");
            { return symbol("RETURN");
            }
          // fall through
          case 213: break;
          case 98:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [200] { return symbol(\"STATIC\"); }");
            { return symbol("STATIC");
            }
          // fall through
          case 214: break;
          case 99:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [192] { return symbol(\"SWITCH\"); }");
            { return symbol("SWITCH");
            }
          // fall through
          case 215: break;
          case 100:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [204] { return symbol(\"THROWS\"); }");
            { return symbol("THROWS");
            }
          // fall through
          case 216: break;
          case 101:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [161] { return symbol(\"BOOLEAN\"); }");
            { return symbol("BOOLEAN");
            }
          // fall through
          case 217: break;
          case 102:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [178] { return symbol(\"DEFAULT\"); }");
            { return symbol("DEFAULT");
            }
          // fall through
          case 218: break;
          case 103:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [173] { return symbol(\"EXTENDS\"); }");
            { return symbol("EXTENDS");
            }
          // fall through
          case 219: break;
          case 104:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [175] { return symbol(\"FINALLY\"); }");
            { return symbol("FINALLY");
            }
          // fall through
          case 220: break;
          case 105:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [194] { return symbol(\"PACKAGE\"); }");
            { return symbol("PACKAGE");
            }
          // fall through
          case 221: break;
          case 106:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [195] { return symbol(\"PRIVATE\"); }");
            { return symbol("PRIVATE");
            }
          // fall through
          case 222: break;
          case 107:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [160] { return symbol(\"ABSTRACT\"); }");
            { return symbol("ABSTRACT");
            }
          // fall through
          case 223: break;
          case 108:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [169] { return symbol(\"CONTINUE\"); }");
            { return symbol("CONTINUE");
            }
          // fall through
          case 224: break;
          case 109:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [207] { return symbol(\"STRICTFP\"); }");
            { return symbol("STRICTFP");
            }
          // fall through
          case 225: break;
          case 110:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [206] { return symbol(\"VOLATILE\"); }");
            { return symbol("VOLATILE");
            }
          // fall through
          case 226: break;
          case 111:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [183] { return symbol(\"INTERFACE\"); }");
            { return symbol("INTERFACE");
            }
          // fall through
          case 227: break;
          case 112:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [196] { return symbol(\"PROTECTED\"); }");
            { return symbol("PROTECTED");
            }
          // fall through
          case 228: break;
          case 113:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [197] { return symbol(\"TRANSIENT\"); }");
            { return symbol("TRANSIENT");
            }
          // fall through
          case 229: break;
          case 114:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [179] { return symbol(\"IMPLEMENTS\"); }");
            { return symbol("IMPLEMENTS");
            }
          // fall through
          case 230: break;
          case 115:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [181] { return symbol(\"INSTANCEOF\"); }");
            { return symbol("INSTANCEOF");
            }
          // fall through
          case 231: break;
          case 116:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [193] { return symbol(\"SYNCHRONIZED\"); }");
            { return symbol("SYNCHRONIZED");
            }
          // fall through
          case 232: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java ApexLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        ApexLexer scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new ApexLexer(reader);
          do {
            System.out.println(scanner.advance());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
