// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _ApexLexer.flex

package com.wlk.ideaplugin.apexsupport.language.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.io.BufferedReader;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.wlk.ideaplugin.apexsupport.language.gen.psi.ApexTypes.*;


public class _ApexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_BLOCK_COMMENT = 2;
  public static final int STRING = 4;
  public static final int SOQL_START_STATUS = 6;
  public static final int SOQL_STATUS = 8;
  public static final int ARRAY_INDEX_STATUS = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  3,  3,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\4\u0200\1\u0300\1\u0400\1\u0200\5\u0500\1\u0600"+
    "\1\u0700\1\u0800\5\u0200\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\1\u0e00\1\u0f00\3\u0200\1\u1000\1\u1100\16\u0200\1\u1200\165\u0200"+
    "\1\u0700\1\u0200\1\u1300\1\u1400\1\u1500\1\u1600\54\u0200\10\u1700"+
    "\37\u0200\1\u0b00\4\u0200\1\u1800\10\u0200\1\u1900\2\u0200\1\u1a00"+
    "\1\u1b00\1\u1600\1\u0200\1\u0600\1\u0200\1\u1c00\1\u1900\1\u0a00"+
    "\3\u0200\1\u1500\1\u1d00\114\u0200\1\u1e00\1\u1500\153\u0200\1\u1f00"+
    "\11\u0200\1\u2000\1\u1600\6\u0200\1\u1500\u0f16\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\3\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\12\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\42\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\42\1\61\1\62"+
    "\1\63\1\64\1\42\1\0\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\42\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\65\1\66\1\67"+
    "\1\70\1\71\6\0\1\3\32\0\1\1\217\0\2\72"+
    "\115\0\1\73\u01e0\0\12\74\206\0\12\74\306\0\12\74"+
    "\234\0\12\74\166\0\12\74\140\0\12\74\166\0\12\74"+
    "\106\0\12\74\u0116\0\12\74\106\0\12\74\346\0\1\1"+
    "\u015f\0\12\74\46\0\12\74\u012c\0\12\74\200\0\12\74"+
    "\246\0\12\74\6\0\12\74\266\0\12\74\126\0\12\74"+
    "\206\0\12\74\6\0\12\74\246\0\13\1\35\0\2\3"+
    "\5\0\1\1\57\0\1\1\312\0\1\75\325\0\1\1"+
    "\u01cf\0\12\74\46\0\12\74\306\0\12\74\26\0\12\74"+
    "\126\0\12\74\u0196\0\12\74\6\0\u0100\76\240\0\12\74"+
    "\206\0\12\74\u012c\0\12\74\200\0\12\74\74\0\12\74"+
    "\220\0\12\74\166\0\12\74\146\0\12\74\206\0\12\74"+
    "\106\0\12\74\266\0\12\74\u0164\0\62\74\100\0\12\74"+
    "\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[8448];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\23\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\2\1\3\36"+
    "\1\37\2\40\1\41\1\1\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\0\1\52\1\53\1\54"+
    "\1\0\1\16\1\55\1\0\1\56\1\57\1\60\1\0"+
    "\1\61\1\62\10\26\1\63\6\26\1\0\1\26\1\64"+
    "\5\26\1\65\20\26\1\0\3\26\1\0\1\66\1\67"+
    "\1\70\1\64\7\0\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\2\53\1\16\1\0\1\106\1\107\1\110\1\0\1\26"+
    "\1\0\10\26\1\0\4\26\1\111\1\0\5\26\1\0"+
    "\1\26\1\112\4\26\1\0\6\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\1\113\1\0\3\26\1\0\2\26"+
    "\2\0\3\26\1\0\1\26\7\0\1\16\1\0\1\114"+
    "\1\26\1\0\5\26\1\0\2\26\2\115\1\116\2\26"+
    "\1\0\6\26\2\0\1\26\1\117\3\26\1\0\6\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\1\120\1\0"+
    "\3\26\1\0\1\26\2\121\1\0\1\26\1\0\1\122"+
    "\1\26\1\0\2\123\7\0\1\16\1\0\1\26\1\0"+
    "\1\124\1\26\2\125\1\126\2\127\1\26\1\0\2\26"+
    "\2\130\6\26\2\0\1\131\3\26\1\0\1\26\1\0"+
    "\3\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\132\1\26\1\0\1\26\1\0\3\26"+
    "\1\0\1\26\1\0\1\26\1\0\2\133\1\26\7\0"+
    "\1\26\1\0\1\134\1\26\1\0\1\135\2\26\1\0"+
    "\1\136\2\26\1\0\1\137\2\26\1\137\1\0\1\26"+
    "\1\0\2\26\1\0\2\140\1\141\1\142\1\26\1\0"+
    "\2\143\2\144\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\145\2\146\1\26\1\0\1\26"+
    "\1\0\1\26\3\0\1\142\2\0\1\26\1\0\1\26"+
    "\1\0\2\147\2\150\2\26\1\0\2\26\1\0\1\26"+
    "\1\0\1\151\1\26\1\151\2\152\1\0\1\26\1\0"+
    "\1\26\1\0\2\153\1\26\2\154\1\26\1\0\2\155"+
    "\4\0\2\156\2\157\2\26\1\0\2\26\1\0\2\160"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\1\161\1\26"+
    "\4\0\2\162\1\0\1\26\2\163\1\26\1\164\1\0"+
    "\1\165\1\0\1\26\1\0\2\166\1\26\2\0\1\164"+
    "\1\167\2\170\2\171\1\0\2\172\2\173\3\0\1\174"+
    "\7\0\2\175\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[527];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\374\0\374\0\374\0\u01f8\0\u0237\0\374\0\u0276\0\u02b5"+
    "\0\u02f4\0\u0333\0\374\0\374\0\u0372\0\u03b1\0\u03f0\0\u042f"+
    "\0\374\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9\0\u05e8"+
    "\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0"+
    "\0\u081f\0\u085e\0\u089d\0\u08dc\0\374\0\374\0\u091b\0\374"+
    "\0\u095a\0\374\0\374\0\u0999\0\u09d8\0\374\0\u0a17\0\u0a56"+
    "\0\u0a95\0\374\0\u0ad4\0\374\0\u0b13\0\u0b52\0\374\0\374"+
    "\0\374\0\374\0\374\0\374\0\374\0\u0b91\0\374\0\u0bd0"+
    "\0\374\0\u02b5\0\u0c0f\0\374\0\u0c4e\0\374\0\u0c8d\0\374"+
    "\0\u0ccc\0\374\0\374\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07"+
    "\0\u0e46\0\u0e85\0\u0ec4\0\u0627\0\u0f03\0\u0f42\0\u0f81\0\u0fc0"+
    "\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u0627\0\u10fb\0\u113a\0\u1179"+
    "\0\u11b8\0\u11f7\0\u0627\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u1332"+
    "\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a"+
    "\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722"+
    "\0\374\0\374\0\374\0\374\0\u1761\0\u17a0\0\u17df\0\u181e"+
    "\0\u185d\0\u189c\0\u18db\0\374\0\374\0\374\0\374\0\374"+
    "\0\374\0\374\0\374\0\374\0\374\0\374\0\374\0\374"+
    "\0\374\0\u191a\0\u1959\0\u1998\0\374\0\374\0\374\0\u19d7"+
    "\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf"+
    "\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u0627"+
    "\0\u1dc7\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80"+
    "\0\u0627\0\u1fbf\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139"+
    "\0\u2178\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331"+
    "\0\u2370\0\u23af\0\u23ee\0\u242d\0\u246c\0\u0627\0\u24ab\0\u24ea"+
    "\0\u2529\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u26e2"+
    "\0\u2721\0\u2760\0\u279f\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da"+
    "\0\u2919\0\u2958\0\u2997\0\u29d6\0\u2a15\0\374\0\u2a54\0\u2a93"+
    "\0\u2ad2\0\u2b11\0\u2b50\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b"+
    "\0\u0627\0\374\0\u0627\0\u2cca\0\u2d09\0\u2d48\0\u2d87\0\u2dc6"+
    "\0\u2e05\0\u2e44\0\u2e83\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f\0\u0627"+
    "\0\u2fbe\0\u2ffd\0\u303c\0\u307b\0\u30ba\0\u30f9\0\u3138\0\u3177"+
    "\0\u31b6\0\u31f5\0\u3234\0\u3273\0\u32b2\0\u32f1\0\u3330\0\u336f"+
    "\0\u33ae\0\u33ed\0\u0627\0\u342c\0\u346b\0\u34aa\0\u34e9\0\u3528"+
    "\0\u3567\0\u0627\0\374\0\u35a6\0\u35e5\0\u3624\0\u0627\0\u3663"+
    "\0\u36a2\0\u36e1\0\u3720\0\u375f\0\u379e\0\u37dd\0\u381c\0\u385b"+
    "\0\u389a\0\u38d9\0\u3918\0\u3957\0\u3996\0\u39d5\0\u0627\0\u3a14"+
    "\0\u0627\0\374\0\u0627\0\u0627\0\374\0\u3a53\0\u3a92\0\u3ad1"+
    "\0\u3b10\0\u3b4f\0\u3b8e\0\u3bcd\0\u3c0c\0\u3c4b\0\u3c8a\0\u3cc9"+
    "\0\u3d08\0\u3d47\0\u3d86\0\u0627\0\u3dc5\0\u3e04\0\u3e43\0\u3e82"+
    "\0\u3ec1\0\u3f00\0\u3f3f\0\u3f7e\0\u3fbd\0\u3ffc\0\u403b\0\u407a"+
    "\0\u40b9\0\u40f8\0\u4137\0\u4176\0\u41b5\0\u41f4\0\u0627\0\u4233"+
    "\0\u4272\0\u42b1\0\u42f0\0\u432f\0\u436e\0\u43ad\0\u43ec\0\u442b"+
    "\0\u446a\0\u44a9\0\u44e8\0\u0627\0\374\0\u4527\0\u4566\0\u45a5"+
    "\0\u45e4\0\u4623\0\u4662\0\u46a1\0\u46e0\0\u471f\0\u475e\0\u0627"+
    "\0\u479d\0\u47dc\0\u0627\0\u481b\0\u485a\0\u4899\0\u0627\0\u48d8"+
    "\0\u4917\0\u4956\0\u0627\0\u4995\0\u49d4\0\374\0\u4a13\0\u4a52"+
    "\0\u4a91\0\u4ad0\0\u4b0f\0\u4b4e\0\u0627\0\374\0\u0627\0\u0627"+
    "\0\u4b8d\0\u4bcc\0\u0627\0\374\0\u0627\0\374\0\u4c0b\0\u4c4a"+
    "\0\u4c89\0\u4cc8\0\u4d07\0\u4d46\0\u4d85\0\u4dc4\0\u4e03\0\u0627"+
    "\0\u0627\0\374\0\u4e42\0\u4e81\0\u4ec0\0\u4eff\0\u4f3e\0\u4f7d"+
    "\0\u4fbc\0\u4ffb\0\374\0\u503a\0\u5079\0\u50b8\0\u50f7\0\u5136"+
    "\0\u5175\0\u0627\0\374\0\u0627\0\374\0\u51b4\0\u51f3\0\u5232"+
    "\0\u5271\0\u52b0\0\u52ef\0\u532e\0\u536d\0\u0627\0\u53ac\0\374"+
    "\0\u0627\0\374\0\u53eb\0\u542a\0\u5469\0\u54a8\0\u54e7\0\u0627"+
    "\0\374\0\u5526\0\u0627\0\374\0\u5565\0\u55a4\0\u0627\0\374"+
    "\0\u55e3\0\u5622\0\u5661\0\u56a0\0\u0627\0\374\0\u0627\0\374"+
    "\0\u56df\0\u571e\0\u575d\0\u579c\0\u57db\0\u581a\0\u0627\0\374"+
    "\0\u5859\0\u5898\0\u58d7\0\u5916\0\u5955\0\u5994\0\u0627\0\u59d3"+
    "\0\u5a12\0\u5a51\0\u5a90\0\u5acf\0\u5b0e\0\374\0\u5b0e\0\u5b4d"+
    "\0\u0627\0\374\0\u5b8c\0\u0627\0\u5bcb\0\u0627\0\u5c0a\0\u5c49"+
    "\0\u5c88\0\u0627\0\374\0\u5cc7\0\u5d06\0\u5d45\0\374\0\u5d84"+
    "\0\u0627\0\374\0\u0627\0\374\0\u5dc3\0\u0627\0\374\0\u0627"+
    "\0\374\0\u5e02\0\u5e41\0\u5e80\0\374\0\u5ebf\0\u5efe\0\u5f3d"+
    "\0\u5f7c\0\u5fbb\0\u5ffa\0\u6039\0\u6078\0\374\0\u6078";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[527];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\4\6\1\7\1\5\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\3\41"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\2\41\1\55\1\5\1\56\1\57\1\41"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\3\5\13\66"+
    "\1\67\4\66\1\70\56\66\2\71\1\72\1\71\1\73"+
    "\1\71\1\5\1\71\1\74\51\71\1\75\14\71\77\5"+
    "\100\0\4\6\117\0\1\76\60\0\1\77\15\0\1\100"+
    "\76\0\1\101\65\0\1\102\10\0\1\103\67\0\1\104"+
    "\6\0\1\105\72\0\1\106\70\0\1\107\4\0\1\110"+
    "\4\0\1\111\70\0\1\112\1\0\1\113\22\0\1\114"+
    "\56\0\1\115\1\0\1\116\75\0\1\117\1\120\76\0"+
    "\1\121\67\0\1\122\7\0\1\123\70\0\1\41\7\0"+
    "\1\41\1\124\3\41\1\125\22\41\4\0\1\41\32\0"+
    "\1\41\7\0\4\41\1\126\13\41\1\127\7\41\4\0"+
    "\1\41\32\0\1\41\7\0\1\130\12\41\1\131\2\41"+
    "\1\132\11\41\4\0\1\41\32\0\1\41\7\0\4\41"+
    "\1\133\11\41\1\134\11\41\4\0\1\41\32\0\1\41"+
    "\7\0\13\41\1\135\1\41\1\136\10\41\1\137\1\41"+
    "\4\0\1\41\32\0\1\41\7\0\1\140\7\41\1\141"+
    "\5\41\1\142\11\41\4\0\1\41\4\0\1\143\25\0"+
    "\1\41\7\0\13\41\1\144\14\41\4\0\1\41\32\0"+
    "\1\41\7\0\30\41\4\0\1\41\32\0\1\41\7\0"+
    "\5\41\1\145\6\41\1\146\1\147\12\41\4\0\1\41"+
    "\32\0\1\41\7\0\4\41\1\150\23\41\4\0\1\41"+
    "\32\0\1\41\7\0\4\41\1\151\16\41\1\152\4\41"+
    "\4\0\1\41\32\0\1\41\7\0\15\41\1\153\6\41"+
    "\1\154\3\41\4\0\1\41\32\0\1\41\7\0\20\41"+
    "\1\155\2\41\1\156\4\41\4\0\1\41\32\0\1\41"+
    "\7\0\4\41\1\157\23\41\4\0\1\41\32\0\1\41"+
    "\7\0\4\41\1\160\2\41\1\161\12\41\1\162\2\41"+
    "\1\163\1\41\1\164\4\0\1\41\32\0\1\41\7\0"+
    "\4\41\1\165\2\41\1\166\10\41\1\167\7\41\4\0"+
    "\1\41\32\0\1\41\7\0\15\41\1\170\1\41\1\171"+
    "\10\41\4\0\1\41\32\0\1\41\7\0\10\41\1\172"+
    "\5\41\1\173\11\41\4\0\1\41\4\0\1\174\25\0"+
    "\1\41\7\0\4\41\1\175\2\41\1\176\1\177\17\41"+
    "\4\0\1\41\4\0\1\200\31\0\1\201\76\0\1\202"+
    "\41\0\1\203\45\0\1\204\6\0\1\205\1\206\65\0"+
    "\1\207\2\0\1\210\12\0\1\211\2\0\1\212\1\0"+
    "\1\213\36\0\1\214\71\0\1\215\63\0\2\71\1\0"+
    "\1\71\1\0\1\71\1\0\1\71\1\0\51\71\1\0"+
    "\14\71\2\0\1\72\74\0\2\216\3\0\1\216\1\217"+
    "\1\216\1\220\21\216\1\221\3\216\1\222\7\216\1\223"+
    "\2\216\1\224\1\216\1\225\6\216\1\226\13\216\26\0"+
    "\1\227\72\0\1\106\12\0\1\230\42\0\2\110\1\231"+
    "\1\110\1\232\72\110\17\0\1\112\1\0\1\233\1\234"+
    "\21\0\1\114\57\0\1\235\76\0\1\236\76\0\1\237"+
    "\1\240\71\0\1\41\7\0\21\41\1\241\6\41\4\0"+
    "\1\41\5\0\1\242\24\0\1\41\7\0\22\41\1\243"+
    "\5\41\4\0\1\41\32\0\1\41\7\0\5\41\1\244"+
    "\22\41\4\0\1\41\32\0\1\41\7\0\4\41\1\245"+
    "\23\41\4\0\1\41\32\0\1\41\7\0\22\41\1\246"+
    "\5\41\4\0\1\41\32\0\1\41\7\0\1\247\27\41"+
    "\4\0\1\41\32\0\1\41\7\0\15\41\1\250\12\41"+
    "\4\0\1\41\32\0\1\41\7\0\13\41\1\251\14\41"+
    "\4\0\1\41\32\0\1\41\7\0\21\41\1\252\6\41"+
    "\4\0\1\41\5\0\1\253\24\0\1\41\7\0\23\41"+
    "\1\254\4\41\4\0\1\41\32\0\1\41\7\0\22\41"+
    "\1\255\5\41\4\0\1\41\32\0\1\41\7\0\13\41"+
    "\1\256\14\41\4\0\1\41\32\0\1\41\7\0\15\41"+
    "\1\257\12\41\4\0\1\41\32\0\1\41\7\0\20\41"+
    "\1\260\7\41\4\0\1\41\57\0\1\261\51\0\1\41"+
    "\7\0\16\41\1\262\11\41\4\0\1\41\32\0\1\41"+
    "\7\0\17\41\1\263\10\41\4\0\1\41\32\0\1\41"+
    "\7\0\7\41\1\264\11\41\1\265\1\266\5\41\4\0"+
    "\1\41\5\0\1\267\24\0\1\41\7\0\20\41\1\270"+
    "\7\41\4\0\1\41\32\0\1\41\7\0\25\41\1\271"+
    "\2\41\4\0\1\41\32\0\1\41\7\0\13\41\1\272"+
    "\14\41\4\0\1\41\32\0\1\41\7\0\4\41\1\273"+
    "\23\41\4\0\1\41\32\0\1\41\7\0\10\41\1\274"+
    "\5\41\1\275\11\41\4\0\1\41\4\0\1\276\25\0"+
    "\1\41\7\0\1\41\1\277\26\41\4\0\1\41\32\0"+
    "\1\41\7\0\22\41\1\300\5\41\4\0\1\41\32\0"+
    "\1\41\7\0\13\41\1\301\14\41\4\0\1\41\32\0"+
    "\1\41\7\0\1\302\27\41\4\0\1\41\32\0\1\41"+
    "\7\0\1\303\27\41\4\0\1\41\32\0\1\41\7\0"+
    "\10\41\1\304\17\41\4\0\1\41\4\0\1\305\25\0"+
    "\1\41\7\0\21\41\1\306\6\41\4\0\1\41\5\0"+
    "\1\307\24\0\1\41\7\0\21\41\1\310\6\41\4\0"+
    "\1\41\5\0\1\311\24\0\1\41\7\0\20\41\1\312"+
    "\7\41\4\0\1\41\32\0\1\41\7\0\1\313\7\41"+
    "\1\314\12\41\1\315\3\41\1\316\4\0\1\41\4\0"+
    "\1\317\25\0\1\41\7\0\3\41\1\320\24\41\4\0"+
    "\1\41\32\0\1\41\7\0\3\41\1\321\15\41\1\322"+
    "\6\41\4\0\1\41\5\0\1\323\24\0\1\41\7\0"+
    "\20\41\1\324\7\41\4\0\1\41\32\0\1\41\7\0"+
    "\10\41\1\325\17\41\4\0\1\41\4\0\1\326\55\0"+
    "\1\327\46\0\1\41\7\0\1\41\1\330\26\41\4\0"+
    "\1\41\32\0\1\41\7\0\4\41\1\331\3\41\1\332"+
    "\17\41\4\0\1\41\4\0\1\333\25\0\1\41\7\0"+
    "\22\41\1\334\5\41\4\0\1\41\64\0\1\335\73\0"+
    "\1\336\66\0\1\337\11\0\1\267\1\340\17\0\1\267"+
    "\47\0\1\341\63\0\1\342\76\0\1\343\106\0\1\305"+
    "\30\0\1\305\56\0\1\307\20\0\1\307\5\0\1\231"+
    "\113\0\1\112\1\0\1\344\22\0\1\114\53\0\1\345"+
    "\102\0\1\346\72\0\1\41\7\0\22\41\1\347\5\41"+
    "\4\0\1\41\64\0\1\350\44\0\1\41\7\0\4\41"+
    "\1\351\23\41\4\0\1\41\32\0\1\41\7\0\16\41"+
    "\1\352\11\41\4\0\1\41\32\0\1\41\7\0\1\353"+
    "\27\41\4\0\1\41\32\0\1\41\7\0\2\41\1\354"+
    "\25\41\4\0\1\41\32\0\1\41\7\0\21\41\1\355"+
    "\6\41\4\0\1\41\5\0\1\356\24\0\1\41\7\0"+
    "\22\41\1\357\5\41\4\0\1\41\32\0\1\41\7\0"+
    "\4\41\1\360\23\41\4\0\1\41\32\0\1\41\7\0"+
    "\4\41\1\361\23\41\4\0\1\41\46\0\1\362\62\0"+
    "\1\41\7\0\14\41\1\363\13\41\4\0\1\41\32\0"+
    "\1\41\7\0\4\41\1\364\23\41\4\0\1\41\32\0"+
    "\1\41\7\0\21\41\1\315\6\41\4\0\1\41\32\0"+
    "\1\41\7\0\1\365\27\41\4\0\1\41\42\0\1\366"+
    "\66\0\1\41\7\0\1\41\1\367\26\41\4\0\1\41"+
    "\32\0\1\41\7\0\13\41\1\370\14\41\4\0\1\41"+
    "\32\0\1\41\7\0\4\41\1\371\23\41\4\0\1\41"+
    "\32\0\1\41\7\0\4\41\1\372\15\41\1\373\5\41"+
    "\4\0\1\41\32\0\1\41\7\0\4\41\1\374\23\41"+
    "\4\0\1\41\46\0\1\375\15\0\1\376\44\0\1\41"+
    "\7\0\6\41\1\377\21\41\4\0\1\41\32\0\1\41"+
    "\7\0\13\41\1\u0100\14\41\4\0\1\41\32\0\1\41"+
    "\7\0\20\41\1\u0101\7\41\4\0\1\41\32\0\1\41"+
    "\7\0\24\41\1\u0102\3\41\4\0\1\41\32\0\1\41"+
    "\7\0\22\41\1\u0103\5\41\4\0\1\41\66\0\1\u0104"+
    "\42\0\1\41\7\0\13\41\1\u0105\14\41\4\0\1\41"+
    "\32\0\1\41\7\0\23\41\1\u0106\4\41\4\0\1\41"+
    "\32\0\1\41\7\0\4\41\1\u0107\23\41\4\0\1\41"+
    "\32\0\1\41\7\0\20\41\1\u0108\7\41\4\0\1\41"+
    "\32\0\1\41\7\0\22\41\1\u0109\5\41\4\0\1\41"+
    "\32\0\1\41\7\0\22\41\1\u010a\5\41\4\0\1\41"+
    "\64\0\1\u010b\44\0\1\41\7\0\22\41\1\u010c\5\41"+
    "\4\0\1\41\64\0\1\u010d\44\0\1\41\7\0\22\41"+
    "\1\u010e\5\41\4\0\1\41\64\0\1\u010f\44\0\1\41"+
    "\7\0\16\41\1\u0110\11\41\4\0\1\41\32\0\1\41"+
    "\7\0\15\41\1\u0111\12\41\4\0\1\41\32\0\1\41"+
    "\7\0\6\41\1\u0112\21\41\4\0\1\41\32\0\1\41"+
    "\7\0\4\41\1\u0113\23\41\4\0\1\41\50\0\1\u0114"+
    "\60\0\1\41\7\0\4\41\1\u0115\23\41\4\0\1\41"+
    "\32\0\1\41\7\0\1\u0116\27\41\4\0\1\41\32\0"+
    "\1\41\7\0\4\41\1\u0117\23\41\4\0\1\41\46\0"+
    "\1\u0118\62\0\1\41\7\0\22\41\1\u0119\5\41\4\0"+
    "\1\41\32\0\1\41\7\0\3\41\1\u011a\24\41\4\0"+
    "\1\41\45\0\1\u011b\115\0\1\u011c\44\0\1\41\7\0"+
    "\21\41\1\u011d\6\41\4\0\1\41\5\0\1\u011e\24\0"+
    "\1\41\7\0\15\41\1\u011f\12\41\4\0\1\41\32\0"+
    "\1\41\7\0\13\41\1\u0120\14\41\4\0\1\41\55\0"+
    "\1\u0121\53\0\1\41\7\0\7\41\1\u0122\20\41\4\0"+
    "\1\41\51\0\1\u0123\102\0\1\u0124\67\0\1\u0125\76\0"+
    "\1\u0126\76\0\1\u0127\112\0\1\u0128\100\0\1\u0129\41\0"+
    "\1\u012a\1\112\1\0\1\u012b\22\0\1\114\53\0\1\u012c"+
    "\76\0\1\41\7\0\20\41\1\u012d\7\41\4\0\1\41"+
    "\62\0\1\u012e\46\0\1\41\7\0\20\41\1\u012f\7\41"+
    "\4\0\1\41\32\0\1\41\7\0\20\41\1\u0130\7\41"+
    "\4\0\1\41\32\0\1\41\7\0\12\41\1\u0131\15\41"+
    "\4\0\1\41\7\0\1\u0132\22\0\1\41\7\0\7\41"+
    "\1\u0133\20\41\4\0\1\41\32\0\1\41\7\0\21\41"+
    "\1\u0134\6\41\4\0\1\41\5\0\1\u0135\55\0\1\u0135"+
    "\20\0\1\u0135\24\0\1\41\7\0\10\41\1\u0136\17\41"+
    "\4\0\1\41\4\0\1\u0137\25\0\1\41\7\0\22\41"+
    "\1\u0138\5\41\4\0\1\41\32\0\1\41\7\0\15\41"+
    "\1\u0139\12\41\4\0\1\41\32\0\1\41\7\0\13\41"+
    "\1\u013a\14\41\4\0\1\41\55\0\1\u013b\53\0\1\41"+
    "\7\0\1\u013c\27\41\4\0\1\41\32\0\1\41\7\0"+
    "\4\41\1\u013d\23\41\4\0\1\41\32\0\1\41\7\0"+
    "\20\41\1\u013e\7\41\4\0\1\41\32\0\1\41\7\0"+
    "\20\41\1\u013f\7\41\4\0\1\41\32\0\1\41\7\0"+
    "\1\u0140\27\41\4\0\1\41\32\0\1\41\7\0\20\41"+
    "\1\u0141\7\41\4\0\1\41\62\0\1\u0142\56\0\1\u0143"+
    "\66\0\1\41\7\0\4\41\1\u0144\23\41\4\0\1\41"+
    "\32\0\1\41\7\0\20\41\1\u0145\7\41\4\0\1\41"+
    "\32\0\1\41\7\0\1\u0146\27\41\4\0\1\41\32\0"+
    "\1\41\7\0\4\41\1\u0147\23\41\4\0\1\41\42\0"+
    "\1\u0148\66\0\1\41\7\0\10\41\1\u0149\17\41\4\0"+
    "\1\41\4\0\1\u014a\25\0\1\41\7\0\20\41\1\u014b"+
    "\7\41\4\0\1\41\32\0\1\41\7\0\2\41\1\u014c"+
    "\25\41\4\0\1\41\32\0\1\41\7\0\10\41\1\u014d"+
    "\17\41\4\0\1\41\4\0\1\u014e\25\0\1\41\7\0"+
    "\10\41\1\u014f\17\41\4\0\1\41\4\0\1\u0150\25\0"+
    "\1\41\7\0\2\41\1\u0151\25\41\4\0\1\41\44\0"+
    "\1\u0152\64\0\1\41\7\0\4\41\1\u0153\23\41\4\0"+
    "\1\41\46\0\1\u0154\62\0\1\41\7\0\14\41\1\u0155"+
    "\13\41\4\0\1\41\56\0\1\u0156\52\0\1\41\7\0"+
    "\25\41\1\u0157\2\41\4\0\1\41\32\0\1\41\7\0"+
    "\21\41\1\u0158\6\41\4\0\1\41\5\0\1\u0159\24\0"+
    "\1\41\7\0\6\41\1\u015a\21\41\4\0\1\41\50\0"+
    "\1\u015b\60\0\1\41\7\0\13\41\1\u015c\14\41\4\0"+
    "\1\41\32\0\1\41\7\0\22\41\1\u015d\5\41\4\0"+
    "\1\41\32\0\1\41\7\0\20\41\1\u015e\7\41\4\0"+
    "\1\41\62\0\1\u015f\46\0\1\41\7\0\23\41\1\u0160"+
    "\4\41\4\0\1\41\65\0\1\u0161\43\0\1\41\7\0"+
    "\4\41\1\u0162\23\41\4\0\1\41\46\0\1\u0163\62\0"+
    "\1\41\7\0\4\41\1\u0164\23\41\4\0\1\41\46\0"+
    "\1\u0165\62\0\1\41\7\0\16\41\1\u0166\11\41\4\0"+
    "\1\41\60\0\1\u0167\64\0\1\u0168\112\0\1\u0169\76\0"+
    "\1\u016a\60\0\1\u016b\104\0\1\u014e\30\0\1\u014e\45\0"+
    "\1\u0150\30\0\1\u0150\25\0\1\u016c\74\0\1\112\1\0"+
    "\1\u012b\22\0\1\114\54\0\1\u016d\75\0\1\41\7\0"+
    "\1\u016e\27\41\4\0\1\41\42\0\1\u016f\66\0\1\41"+
    "\7\0\4\41\1\u0170\23\41\4\0\1\41\32\0\1\41"+
    "\7\0\15\41\1\u0171\12\41\4\0\1\41\57\0\1\u0172"+
    "\51\0\1\41\7\0\4\41\1\u0173\23\41\4\0\1\41"+
    "\32\0\1\41\7\0\3\41\1\u0174\24\41\4\0\1\41"+
    "\32\0\1\41\7\0\13\41\1\u0175\14\41\4\0\1\41"+
    "\55\0\1\u0176\53\0\1\41\7\0\13\41\1\u0177\14\41"+
    "\4\0\1\41\32\0\1\41\7\0\14\41\1\u0178\13\41"+
    "\4\0\1\41\32\0\1\41\7\0\10\41\1\u0179\17\41"+
    "\4\0\1\41\4\0\1\u017a\25\0\1\41\7\0\22\41"+
    "\1\u017b\5\41\4\0\1\41\32\0\1\41\7\0\15\41"+
    "\1\u017c\12\41\4\0\1\41\32\0\1\41\7\0\5\41"+
    "\1\u017d\22\41\4\0\1\41\64\0\1\u017e\71\0\1\u017f"+
    "\51\0\1\41\7\0\10\41\1\u0180\17\41\4\0\1\41"+
    "\4\0\1\u0181\25\0\1\41\7\0\22\41\1\u0182\5\41"+
    "\4\0\1\41\32\0\1\41\7\0\2\41\1\u0183\25\41"+
    "\4\0\1\41\64\0\1\u0184\44\0\1\41\7\0\2\41"+
    "\1\u0185\25\41\4\0\1\41\44\0\1\u0186\64\0\1\41"+
    "\7\0\15\41\1\u0187\12\41\4\0\1\41\32\0\1\41"+
    "\7\0\22\41\1\u0188\5\41\4\0\1\41\32\0\1\41"+
    "\7\0\15\41\1\u0189\12\41\4\0\1\41\57\0\1\u018a"+
    "\51\0\1\41\7\0\2\41\1\u018b\25\41\4\0\1\41"+
    "\44\0\1\u018c\64\0\1\41\7\0\7\41\1\u018d\20\41"+
    "\4\0\1\41\51\0\1\u018e\57\0\1\41\7\0\14\41"+
    "\1\u018f\13\41\4\0\1\41\56\0\1\u0190\52\0\1\41"+
    "\7\0\4\41\1\u0191\23\41\4\0\1\41\46\0\1\u0192"+
    "\62\0\1\41\7\0\10\41\1\u0193\17\41\4\0\1\41"+
    "\4\0\1\u0194\45\0\1\u0194\30\0\1\u0194\25\0\1\41"+
    "\7\0\4\41\1\u0195\23\41\4\0\1\41\46\0\1\u0196"+
    "\62\0\1\41\7\0\4\41\1\u0197\23\41\4\0\1\41"+
    "\32\0\1\41\7\0\4\41\1\u0198\23\41\4\0\1\41"+
    "\32\0\1\41\7\0\22\41\1\u0199\5\41\4\0\1\41"+
    "\64\0\1\u019a\44\0\1\41\7\0\1\u019b\27\41\4\0"+
    "\1\41\42\0\1\u019c\66\0\1\41\7\0\20\41\1\u019d"+
    "\7\41\4\0\1\41\62\0\1\u019e\46\0\1\41\7\0"+
    "\23\41\1\u019f\4\41\4\0\1\41\65\0\1\u01a0\67\0"+
    "\1\u01a1\72\0\1\u017a\30\0\1\u017a\42\0\1\u01a2\113\0"+
    "\1\u01a3\44\0\1\u01a4\76\0\1\u01a5\76\0\1\41\7\0"+
    "\2\41\1\u01a6\25\41\4\0\1\41\44\0\1\u01a7\64\0"+
    "\1\41\7\0\23\41\1\u01a8\4\41\4\0\1\41\65\0"+
    "\1\u01a9\43\0\1\41\7\0\21\41\1\u01aa\6\41\4\0"+
    "\1\41\5\0\1\u01ab\24\0\1\41\7\0\27\41\1\u01ac"+
    "\4\0\1\41\71\0\1\u01ad\37\0\1\41\7\0\4\41"+
    "\1\u01ae\23\41\4\0\1\41\32\0\1\41\7\0\22\41"+
    "\1\u01af\5\41\4\0\1\41\64\0\1\u01b0\44\0\1\41"+
    "\7\0\2\41\1\u01b1\25\41\4\0\1\41\32\0\1\41"+
    "\7\0\1\u01b2\27\41\4\0\1\41\44\0\1\u01b3\64\0"+
    "\1\41\7\0\3\41\1\u01b4\24\41\4\0\1\41\45\0"+
    "\1\u01b5\63\0\1\41\7\0\4\41\1\u01b6\23\41\4\0"+
    "\1\41\32\0\1\41\7\0\22\41\1\u01b7\5\41\4\0"+
    "\1\41\46\0\1\u01b8\62\0\1\41\7\0\6\41\1\u01b9"+
    "\21\41\4\0\1\41\50\0\1\u01ba\56\0\1\u01bb\1\0"+
    "\1\41\7\0\30\41\4\0\1\41\30\0\1\u01bb\100\0"+
    "\1\41\7\0\22\41\1\u01bc\5\41\4\0\1\41\64\0"+
    "\1\u01bd\44\0\1\41\7\0\4\41\1\u01be\23\41\4\0"+
    "\1\41\46\0\1\u01bf\62\0\1\41\7\0\20\41\1\u01c0"+
    "\7\41\4\0\1\41\62\0\1\u01c1\46\0\1\41\7\0"+
    "\22\41\1\u01c2\5\41\4\0\1\41\32\0\1\41\7\0"+
    "\13\41\1\u01c3\14\41\4\0\1\41\55\0\1\u01c4\53\0"+
    "\1\41\7\0\24\41\1\u01c5\3\41\4\0\1\41\66\0"+
    "\1\u01c6\42\0\1\41\7\0\22\41\1\u01c7\5\41\4\0"+
    "\1\41\64\0\1\u01c8\60\0\1\u01c9\72\0\1\u01ca\63\0"+
    "\1\u01cb\101\0\1\u01cc\76\0\1\41\7\0\22\41\1\u01cd"+
    "\5\41\4\0\1\41\64\0\1\u01ce\44\0\1\41\7\0"+
    "\4\41\1\u01cf\23\41\4\0\1\41\46\0\1\u01d0\62\0"+
    "\1\41\7\0\15\41\1\u01d1\12\41\4\0\1\41\32\0"+
    "\1\41\7\0\4\41\1\u01d2\23\41\4\0\1\41\46\0"+
    "\1\u01d3\62\0\1\41\7\0\4\41\1\u01d4\23\41\4\0"+
    "\1\41\32\0\1\41\7\0\2\41\1\u01d5\25\41\4\0"+
    "\1\41\46\0\1\u01d6\62\0\1\41\7\0\4\41\1\u01d7"+
    "\23\41\4\0\1\41\46\0\1\u01d8\62\0\1\41\7\0"+
    "\4\41\1\u01d9\23\41\4\0\1\41\62\0\1\u01da\46\0"+
    "\1\41\7\0\7\41\1\u01db\20\41\4\0\1\41\51\0"+
    "\1\u01dc\57\0\1\41\7\0\15\41\1\u01dd\12\41\4\0"+
    "\1\41\57\0\1\u01de\51\0\1\41\7\0\4\41\1\u01df"+
    "\23\41\4\0\1\41\32\0\1\41\7\0\10\41\1\u01e0"+
    "\17\41\4\0\1\41\4\0\1\u01e1\45\0\1\u01e1\30\0"+
    "\1\u01e1\52\0\1\u01e2\63\0\1\u01e3\64\0\1\u01e4\71\0"+
    "\1\u01e5\1\0\1\u01e6\1\u01e7\1\0\1\u01e5\1\u01e6\4\0"+
    "\1\u01e6\35\0\1\u01e6\1\0\1\u01e6\4\0\1\u01e5\23\0"+
    "\1\41\7\0\22\41\1\u01e8\5\41\4\0\1\41\32\0"+
    "\1\41\7\0\3\41\1\u01e9\24\41\4\0\1\41\45\0"+
    "\1\u01ea\63\0\1\41\7\0\16\41\1\u01eb\11\41\4\0"+
    "\1\41\32\0\1\41\7\0\4\41\1\u01ec\23\41\4\0"+
    "\1\41\60\0\1\u01ed\50\0\1\41\7\0\3\41\1\u01ee"+
    "\24\41\4\0\1\41\65\0\1\u01ef\43\0\1\41\7\0"+
    "\16\41\1\u01f0\11\41\4\0\1\41\60\0\1\u01f1\50\0"+
    "\1\41\7\0\22\41\1\u01f2\5\41\4\0\1\41\64\0"+
    "\1\u01f3\44\0\1\41\7\0\2\41\1\u01f4\25\41\4\0"+
    "\1\41\44\0\1\u01f5\116\0\1\u01f6\60\0\1\u01f7\62\0"+
    "\1\u01f8\71\0\1\u01e6\1\0\1\u01e6\2\0\2\u01e6\4\0"+
    "\1\u01e6\35\0\1\u01e6\1\0\1\u01e6\4\0\1\u01e6\23\0"+
    "\1\41\7\0\21\41\1\u01f9\6\41\4\0\1\41\5\0"+
    "\1\u01fa\24\0\1\41\7\0\5\41\1\u01fb\22\41\4\0"+
    "\1\41\47\0\1\u01fc\106\0\1\u01fd\51\0\1\41\7\0"+
    "\3\41\1\u01fe\24\41\4\0\1\41\45\0\1\u01ff\63\0"+
    "\1\41\7\0\4\41\1\u0200\23\41\4\0\1\41\46\0"+
    "\1\u0201\113\0\1\u01fa\20\0\1\u01fa\56\0\1\u0202\54\0"+
    "\1\u0203\66\0\1\u0204\127\0\1\u0205\20\0\1\u0205\24\0"+
    "\1\u0206\77\0\1\u0207\75\0\1\u0208\76\0\1\u0209\77\0"+
    "\1\u020a\75\0\1\u020b\76\0\1\u020c\71\0\1\u020d\1\0"+
    "\1\u020e\1\u020f\1\0\1\u020d\1\u020e\4\0\1\u020e\35\0"+
    "\1\u020e\1\0\1\u020e\4\0\1\u020d\16\0\1\u020e\1\0"+
    "\1\u020e\2\0\2\u020e\4\0\1\u020e\35\0\1\u020e\1\0"+
    "\1\u020e\4\0\1\u020e\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[24759];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\3\1\3\11\2\1\1\11\4\1\2\11"+
    "\4\1\1\11\23\1\2\11\1\1\1\11\1\1\2\11"+
    "\2\1\1\11\3\1\1\11\1\1\1\11\2\1\7\11"+
    "\1\0\1\11\1\1\1\11\1\0\1\1\1\11\1\0"+
    "\1\11\1\1\1\11\1\0\2\11\17\1\1\0\30\1"+
    "\1\0\3\1\1\0\4\11\7\0\16\11\2\1\1\0"+
    "\3\11\1\0\1\1\1\0\10\1\1\0\5\1\1\0"+
    "\5\1\1\0\6\1\1\0\6\1\1\0\1\1\1\0"+
    "\1\1\1\0\5\1\1\0\3\1\1\0\2\1\2\0"+
    "\3\1\1\0\1\1\7\0\1\1\1\0\1\11\1\1"+
    "\1\0\5\1\1\0\3\1\1\11\3\1\1\0\6\1"+
    "\2\0\5\1\1\0\6\1\1\0\1\1\1\0\1\1"+
    "\1\0\4\1\1\0\3\1\1\0\2\1\1\11\1\0"+
    "\1\1\1\0\2\1\1\0\2\1\7\0\1\1\1\0"+
    "\1\1\1\0\3\1\1\11\2\1\1\11\1\1\1\0"+
    "\12\1\2\0\4\1\1\0\1\1\1\0\3\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\3\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1\7\0\1\1\1\0"+
    "\2\1\1\0\3\1\1\0\3\1\1\0\3\1\1\11"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\11\3\1"+
    "\1\0\1\1\1\11\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\3\1\1\11\1\1"+
    "\1\0\1\1\1\0\1\1\3\0\1\11\2\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\11\2\1"+
    "\1\0\2\1\1\0\1\1\1\0\2\1\1\11\1\1"+
    "\1\11\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\2\1\1\11\1\1\1\0\1\1\1\11\4\0\1\1"+
    "\1\11\1\1\1\11\2\1\1\0\2\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\0\2\1"+
    "\4\0\1\1\1\11\1\0\2\1\1\11\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\1\2\0"+
    "\1\11\2\1\1\11\1\1\1\11\1\0\1\1\1\11"+
    "\1\1\1\11\3\0\1\11\7\0\1\1\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[527];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _ApexLexer() {
    this((java.io.Reader)null);
  }
  	StringBuilder string = new StringBuilder();
    StringBuilder SOQL_SB = new StringBuilder();

	/**
	* '#+' stride demarking start/end of raw string/byte literal
	*/
	private int zzShaStride = -1;

	/**
	* Dedicated storage for starting position of some previously successful
	* match
	*/
	private int zzPostponedMarkedPos = -1;

	/**
	* Dedicated nested-comment level counter
	*/
	private int zzNestedCommentLevel = 0;

	IElementType imbueBlockComment() {
	    assert(zzNestedCommentLevel == 0);
	    yybegin(YYINITIAL);

	    zzStartRead = zzPostponedMarkedPos;
	    zzPostponedMarkedPos = -1;

	    if (yylength() >= 3) {
	        if (yycharat(2) == '!') {
	            return INNER_BLOCK_DOC_COMMENT;
	        } else if (yycharat(2) == '*' && (yylength() == 3 || yycharat(3) != '*' && yycharat(3) != '/')) {
	            return OUTER_BLOCK_DOC_COMMENT;
	        }
	    }

	    return BLOCK_COMMENT;
	}

      //在这之间，可以定义一些java的中间变量，方法
      private static String zzToPrintable(CharSequence str) {
          // jflex 内置的 zzToPrintable 和 yytext 返回的结果不匹配，使用grammar-kit 的插件，会报错
          // 因此才自定义个本方法，兼容一下
          return str.toString();
      }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ApexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }

  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case IN_BLOCK_COMMENT: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [284] { zzNestedCommentLevel = 0; return imbueBlockComment(); }");
              zzNestedCommentLevel = 0; return imbueBlockComment();
            }  // fall though
            case 528: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [303] { return BAD_CHARACTER; }");
            { return BAD_CHARACTER;
            }
          // fall through
          case 126: break;
          case 2:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [117] { return WHITE_SPACE; }");
            { return WHITE_SPACE;
            }
          // fall through
          case 127: break;
          case 3:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [190] { return BANG; }");
            { return BANG;
            }
          // fall through
          case 128: break;
          case 4:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [209] { return BITAND; }");
            { return BITAND;
            }
          // fall through
          case 129: break;
          case 5:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [240] { yybegin(STRING); string.setLength(0); }");
            { yybegin(STRING); string.setLength(0);
            }
          // fall through
          case 130: break;
          case 6:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [177] { return LPAREN; }");
            { return LPAREN;
            }
          // fall through
          case 131: break;
          case 7:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [178] { return RPAREN; }");
            { return RPAREN;
            }
          // fall through
          case 132: break;
          case 8:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [207] { return MUL; }");
            { return MUL;
            }
          // fall through
          case 133: break;
          case 9:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [205] { return ADD; }");
            { return ADD;
            }
          // fall through
          case 134: break;
          case 10:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [185] { return COMMA; }");
            { return COMMA;
            }
          // fall through
          case 135: break;
          case 11:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [206] { return SUB; }");
            { return SUB;
            }
          // fall through
          case 136: break;
          case 12:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [186] { return DOT; }");
            { return DOT;
            }
          // fall through
          case 137: break;
          case 13:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [208] { return DIV; }");
            { return DIV;
            }
          // fall through
          case 138: break;
          case 14:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [230] { return INTEGERLITERALPATTERN; }");
            { return INTEGERLITERALPATTERN;
            }
          // fall through
          case 139: break;
          case 15:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [194] { return COLON; }");
            { return COLON;
            }
          // fall through
          case 140: break;
          case 16:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [184] { return SEMI; }");
            { return SEMI;
            }
          // fall through
          case 141: break;
          case 17:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [189] { return LT; }");
            { return LT;
            }
          // fall through
          case 142: break;
          case 18:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [187] { return ASSIGN; }");
            { return ASSIGN;
            }
          // fall through
          case 143: break;
          case 19:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [188] { return GT; }");
            { return GT;
            }
          // fall through
          case 144: break;
          case 20:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [193] { return QUESTION; }");
            { return QUESTION;
            }
          // fall through
          case 145: break;
          case 21:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [223] { return ATSIGN; }");
            { return ATSIGN;
            }
          // fall through
          case 146: break;
          case 22:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [235] { return IDENTIFIER; }");
            { return IDENTIFIER;
            }
          // fall through
          case 147: break;
          case 23:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [181] { return LBRACK; }");
            { return LBRACK;
            }
          // fall through
          case 148: break;
          case 24:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [183] { return RBRACK; }");
            { return RBRACK;
            }
          // fall through
          case 149: break;
          case 25:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [211] { return CARET; }");
            { return CARET;
            }
          // fall through
          case 150: break;
          case 26:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [179] { return LBRACE; }");
            { return LBRACE;
            }
          // fall through
          case 151: break;
          case 27:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [210] { return BITOR; }");
            { return BITOR;
            }
          // fall through
          case 152: break;
          case 28:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [180] { return RBRACE; }");
            { return RBRACE;
            }
          // fall through
          case 153: break;
          case 29:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [191] { return TILDE; }");
            { return TILDE;
            }
          // fall through
          case 154: break;
          case 30:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [286] {  }");
            { 
            }
          // fall through
          case 155: break;
          case 31:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [253] { string.append( yytext() ); }");
            { string.append( yytext() );
            }
          // fall through
          case 156: break;
          case 32:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [268] { System.out.println(\"字符串匹配到了行终结符，error\");throw new RuntimeException(\"Unterminated string at end of line\"); }");
            { System.out.println("字符串匹配到了行终结符，error");throw new RuntimeException("Unterminated string at end of line");
            }
          // fall through
          case 157: break;
          case 33:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [251] { yybegin(YYINITIAL);return SINGLEQUOTESTRINGLITERAL; }");
            { yybegin(YYINITIAL);return SINGLEQUOTESTRINGLITERAL;
            }
          // fall through
          case 158: break;
          case 34:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [197] { return NOTEQUAL; }");
            { return NOTEQUAL;
            }
          // fall through
          case 159: break;
          case 35:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [200] { return AND; }");
            { return AND;
            }
          // fall through
          case 160: break;
          case 36:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [217] { return AND_ASSIGN; }");
            { return AND_ASSIGN;
            }
          // fall through
          case 161: break;
          case 37:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [215] { return MUL_ASSIGN; }");
            { return MUL_ASSIGN;
            }
          // fall through
          case 162: break;
          case 38:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [203] { return INC; }");
            { return INC;
            }
          // fall through
          case 163: break;
          case 39:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [213] { return ADD_ASSIGN; }");
            { return ADD_ASSIGN;
            }
          // fall through
          case 164: break;
          case 40:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [204] { return DEC; }");
            { return DEC;
            }
          // fall through
          case 165: break;
          case 41:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [214] { return SUB_ASSIGN; }");
            { return SUB_ASSIGN;
            }
          // fall through
          case 166: break;
          case 42:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [237] { yybegin(IN_BLOCK_COMMENT); yypushback(2); }");
            { yybegin(IN_BLOCK_COMMENT); yypushback(2);
            }
          // fall through
          case 167: break;
          case 43:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [233] { return LINE_COMMENT; }");
            { return LINE_COMMENT;
            }
          // fall through
          case 168: break;
          case 44:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [216] { return DIV_ASSIGN; }");
            { return DIV_ASSIGN;
            }
          // fall through
          case 169: break;
          case 45:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [231] { return LONGLITERALPATTERN; }");
            { return LONGLITERALPATTERN;
            }
          // fall through
          case 170: break;
          case 46:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [198] { return LESSANDGREATER; }");
            { return LESSANDGREATER;
            }
          // fall through
          case 171: break;
          case 47:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [195] { return EQUAL; }");
            { return EQUAL;
            }
          // fall through
          case 172: break;
          case 48:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [212] { return MAPTO; }");
            { return MAPTO;
            }
          // fall through
          case 173: break;
          case 49:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [192] { return QUESTIONDOT; }");
            { return QUESTIONDOT;
            }
          // fall through
          case 174: break;
          case 50:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [202] { return COAL; }");
            { return COAL;
            }
          // fall through
          case 175: break;
          case 51:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [128] { return DO; }");
            { return DO;
            }
          // fall through
          case 176: break;
          case 52:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [137] { return IF; }");
            { return IF;
            }
          // fall through
          case 177: break;
          case 53:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [146] { return ON; }");
            { return ON;
            }
          // fall through
          case 178: break;
          case 54:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [219] { return XOR_ASSIGN; }");
            { return XOR_ASSIGN;
            }
          // fall through
          case 179: break;
          case 55:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [218] { return OR_ASSIGN; }");
            { return OR_ASSIGN;
            }
          // fall through
          case 180: break;
          case 56:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [201] { return OR; }");
            { return OR;
            }
          // fall through
          case 181: break;
          case 57:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [280] { if (--zzNestedCommentLevel == 0)"+ZZ_NL+"              return imbueBlockComment(); }");
            { if (--zzNestedCommentLevel == 0)
              return imbueBlockComment();
            }
          // fall through
          case 182: break;
          case 58:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [276] { if (zzNestedCommentLevel++ == 0)"+ZZ_NL+"              zzPostponedMarkedPos = zzStartRead; }");
            { if (zzNestedCommentLevel++ == 0)
              zzPostponedMarkedPos = zzStartRead;
            }
          // fall through
          case 183: break;
          case 59:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [267] { System.out.println(\"字符串匹配到了特殊字符:\\\\. error\");throw new RuntimeException(\"Illegal escape sequence \\\"\"+yytext()+\"\\\"\"); }");
            { System.out.println("字符串匹配到了特殊字符:\\. error");throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            }
          // fall through
          case 184: break;
          case 60:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [261] { string.append( \'\\\"\' ); }");
            { string.append( '\"' );
            }
          // fall through
          case 185: break;
          case 61:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [262] { string.append( \'\\\'\' ); }");
            { string.append( '\'' );
            }
          // fall through
          case 186: break;
          case 62:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [256] { string.append( \'\\b\' ); }");
            { string.append( '\b' );
            }
          // fall through
          case 187: break;
          case 63:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [259] { string.append( \'\\f\' ); }");
            { string.append( '\f' );
            }
          // fall through
          case 188: break;
          case 64:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [258] { string.append( \'\\n\' ); }");
            { string.append( '\n' );
            }
          // fall through
          case 189: break;
          case 65:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [260] { string.append( \'\\r\' ); }");
            { string.append( '\r' );
            }
          // fall through
          case 190: break;
          case 66:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [257] { string.append( \'\\t\' ); }");
            { string.append( '\t' );
            }
          // fall through
          case 191: break;
          case 67:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [263] { string.append( \'\\\\\' ); }");
            { string.append( '\\' );
            }
          // fall through
          case 192: break;
          case 68:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [199] { return TRIPLENOTEQUAL; }");
            { return TRIPLENOTEQUAL;
            }
          // fall through
          case 193: break;
          case 69:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [232] { return NUMBERLITERALPATTERN; }");
            { return NUMBERLITERALPATTERN;
            }
          // fall through
          case 194: break;
          case 70:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [220] { return LSHIFT_ASSIGN; }");
            { return LSHIFT_ASSIGN;
            }
          // fall through
          case 195: break;
          case 71:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [196] { return TRIPLEEQUAL; }");
            { return TRIPLEEQUAL;
            }
          // fall through
          case 196: break;
          case 72:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [221] { return RSHIFT_ASSIGN; }");
            { return RSHIFT_ASSIGN;
            }
          // fall through
          case 197: break;
          case 73:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [134] { return FOR; }");
            { return FOR;
            }
          // fall through
          case 198: break;
          case 74:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [144] { return NEW; }");
            { return NEW;
            }
          // fall through
          case 199: break;
          case 75:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [163] { return TRY; }");
            { return TRY;
            }
          // fall through
          case 200: break;
          case 76:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [222] { return URSHIFT_ASSIGN; }");
            { return URSHIFT_ASSIGN;
            }
          // fall through
          case 201: break;
          case 77:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [129] { return ELSE; }");
            { return ELSE;
            }
          // fall through
          case 202: break;
          case 78:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [130] { return ENUM; }");
            { return ENUM;
            }
          // fall through
          case 203: break;
          case 79:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [145] { return NULL; }");
            { return NULL;
            }
          // fall through
          case 204: break;
          case 80:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [227] { return BOOLEAN_LITERAL; }");
            { return BOOLEAN_LITERAL;
            }
          // fall through
          case 205: break;
          case 81:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [168] { return VOID; }");
            { return VOID;
            }
          // fall through
          case 206: break;
          case 82:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [170] { return WHEN; }");
            { return WHEN;
            }
          // fall through
          case 207: break;
          case 83:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [172] { return WITH; }");
            { return WITH;
            }
          // fall through
          case 208: break;
          case 84:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [121] { return AFTER; }");
            { return AFTER;
            }
          // fall through
          case 209: break;
          case 85:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [123] { return BREAK; }");
            { return BREAK;
            }
          // fall through
          case 210: break;
          case 86:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [124] { return CATCH; }");
            { return CATCH;
            }
          // fall through
          case 211: break;
          case 87:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [125] { return CLASS; }");
            { return CLASS;
            }
          // fall through
          case 212: break;
          case 88:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [132] { return FINAL; }");
            { return FINAL;
            }
          // fall through
          case 213: break;
          case 89:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [143] { return MERGE; }");
            { return MERGE;
            }
          // fall through
          case 214: break;
          case 90:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [160] { return THROW; }");
            { return THROW;
            }
          // fall through
          case 215: break;
          case 91:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [171] { return WHILE; }");
            { return WHILE;
            }
          // fall through
          case 216: break;
          case 92:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [122] { return BEFORE; }");
            { return BEFORE;
            }
          // fall through
          case 217: break;
          case 93:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [127] { return DELETE; }");
            { return DELETE;
            }
          // fall through
          case 218: break;
          case 94:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [136] { return GLOBAL; }");
            { return GLOBAL;
            }
          // fall through
          case 219: break;
          case 95:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [140] { return INSERT; }");
            { return INSERT;
            }
          // fall through
          case 220: break;
          case 96:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [150] { return PUBLIC; }");
            { return PUBLIC;
            }
          // fall through
          case 221: break;
          case 97:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [151] { return RETURN; }");
            { return RETURN;
            }
          // fall through
          case 222: break;
          case 98:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [119] { return SELECT; }");
            { return SELECT;
            }
          // fall through
          case 223: break;
          case 99:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [155] { return STATIC; }");
            { return STATIC;
            }
          // fall through
          case 224: break;
          case 100:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [157] { return SWITCH; }");
            { return SWITCH;
            }
          // fall through
          case 225: break;
          case 101:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [165] { return UPDATE; }");
            { return UPDATE;
            }
          // fall through
          case 226: break;
          case 102:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [166] { return UPSERT; }");
            { return UPSERT;
            }
          // fall through
          case 227: break;
          case 103:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [131] { return EXTENDS; }");
            { return EXTENDS;
            }
          // fall through
          case 228: break;
          case 104:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [133] { return FINALLY; }");
            { return FINALLY;
            }
          // fall through
          case 229: break;
          case 105:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [148] { return PRIVATE; }");
            { return PRIVATE;
            }
          // fall through
          case 230: break;
          case 106:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [154] { return SHARING; }");
            { return SHARING;
            }
          // fall through
          case 231: break;
          case 107:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [162] { return TRIGGER; }");
            { return TRIGGER;
            }
          // fall through
          case 232: break;
          case 108:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [167] { return VIRTUAL; }");
            { return VIRTUAL;
            }
          // fall through
          case 233: break;
          case 109:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [173] { return WITHOUT; }");
            { return WITHOUT;
            }
          // fall through
          case 234: break;
          case 110:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [120] { return ABSTRACT; }");
            { return ABSTRACT;
            }
          // fall through
          case 235: break;
          case 111:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [126] { return CONTINUE; }");
            { return CONTINUE;
            }
          // fall through
          case 236: break;
          case 112:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [147] { return OVERRIDE; }");
            { return OVERRIDE;
            }
          // fall through
          case 237: break;
          case 113:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [164] { return UNDELETE; }");
            { return UNDELETE;
            }
          // fall through
          case 238: break;
          case 114:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [228] { return TIMELITERAL; }");
            { return TIMELITERAL;
            }
          // fall through
          case 239: break;
          case 115:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [139] { return INHERITED; }");
            { return INHERITED;
            }
          // fall through
          case 240: break;
          case 116:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [142] { return INTERFACE; }");
            { return INTERFACE;
            }
          // fall through
          case 241: break;
          case 117:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [149] { return PROTECTED; }");
            { return PROTECTED;
            }
          // fall through
          case 242: break;
          case 118:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [161] { return TRANSIENT; }");
            { return TRANSIENT;
            }
          // fall through
          case 243: break;
          case 119:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [226] { return DATELITERAL; }");
            { return DATELITERAL;
            }
          // fall through
          case 244: break;
          case 120:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [138] { return IMPLEMENTS; }");
            { return IMPLEMENTS;
            }
          // fall through
          case 245: break;
          case 121:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [141] { return INSTANCEOF; }");
            { return INSTANCEOF;
            }
          // fall through
          case 246: break;
          case 122:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [158] { return TESTMETHOD; }");
            { return TESTMETHOD;
            }
          // fall through
          case 247: break;
          case 123:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [169] { return WEBSERVICE; }");
            { return WEBSERVICE;
            }
          // fall through
          case 248: break;
          case 124:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [152] { return SYSTEMRUNAS; }");
            { return SYSTEMRUNAS;
            }
          // fall through
          case 249: break;
          case 125:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [229] { return DATETIMELITERAL; }");
            { return DATETIMELITERAL;
            }
          // fall through
          case 250: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java _ApexLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        _ApexLexer scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new _ApexLexer(reader);
          do {
            System.out.println(scanner.advance());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
