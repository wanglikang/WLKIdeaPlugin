package com.wlk.ideaplugin.apexsupport.language.antlr4;

import com.intellij.psi.tree.IElementType;
import com.wlk.ideaplugin.apexsupport.language.psi.ApexElementType;
import com.wlk.ideaplugin.apexsupport.language.psi.ApexTokenType;

import java.util.HashMap;
import java.util.Map;

@Deprecated
public class ApexPsiType {

	Map<Integer,String> tokenMap = new HashMap<>();
	Map<Integer,String> ruleMap = new HashMap<>();
	public static IElementType apexFile 	= new ApexElementType("apexFile");
	public static IElementType triggerUnit 	= new ApexElementType("triggerUnit");
	public static IElementType triggerCase 	= new ApexElementType("triggerCase");
	public static IElementType triggerBlock 	= new ApexElementType("triggerBlock");
	public static IElementType triggerBlockMember 	= new ApexElementType("triggerBlockMember");
	public static IElementType classUnit 	= new ApexElementType("classUnit");
	public static IElementType typeDeclaration 	= new ApexElementType("typeDeclaration");
	public static IElementType classDeclaration 	= new ApexElementType("classDeclaration");
	public static IElementType enumDeclaration 	= new ApexElementType("enumDeclaration");
	public static IElementType enumConstants 	= new ApexElementType("enumConstants");
	public static IElementType interfaceDeclaration 	= new ApexElementType("interfaceDeclaration");
	public static IElementType typeList 	= new ApexElementType("typeList");
	public static IElementType classBody 	= new ApexElementType("classBody");
	public static IElementType interfaceBody 	= new ApexElementType("interfaceBody");
	public static IElementType classBodyDeclaration 	= new ApexElementType("classBodyDeclaration");
	public static IElementType modifier 	= new ApexElementType("modifier");
	public static IElementType memberDeclaration 	= new ApexElementType("memberDeclaration");
	public static IElementType triggerMemberDeclaration 	= new ApexElementType("triggerMemberDeclaration");
	public static IElementType methodDeclaration 	= new ApexElementType("methodDeclaration");
	public static IElementType constructorDeclaration 	= new ApexElementType("constructorDeclaration");
	public static IElementType fieldDeclaration 	= new ApexElementType("fieldDeclaration");
	public static IElementType propertyDeclaration 	= new ApexElementType("propertyDeclaration");
	public static IElementType interfaceMethodDeclaration 	= new ApexElementType("interfaceMethodDeclaration");
	public static IElementType variableDeclarators 	= new ApexElementType("variableDeclarators");
	public static IElementType variableDeclarator 	= new ApexElementType("variableDeclarator");
	public static IElementType arrayInitializer 	= new ApexElementType("arrayInitializer");
	public static IElementType typeRef 	= new ApexElementType("typeRef");
	public static IElementType arraySubscripts 	= new ApexElementType("arraySubscripts");
	public static IElementType typeName 	= new ApexElementType("typeName");
	public static IElementType typeArguments 	= new ApexElementType("typeArguments");
	public static IElementType formalParameters 	= new ApexElementType("formalParameters");
	public static IElementType formalParameterList 	= new ApexElementType("formalParameterList");
	public static IElementType formalParameter 	= new ApexElementType("formalParameter");
	public static IElementType qualifiedName 	= new ApexElementType("qualifiedName");
	public static IElementType literal 	= new ApexElementType("literal");
	public static IElementType annotation 	= new ApexElementType("annotation");
	public static IElementType elementValuePairs 	= new ApexElementType("elementValuePairs");
	public static IElementType elementValuePair 	= new ApexElementType("elementValuePair");
	public static IElementType elementValue 	= new ApexElementType("elementValue");
	public static IElementType elementValueArrayInitializer 	= new ApexElementType("elementValueArrayInitializer");
	public static IElementType block 	= new ApexElementType("block");
	public static IElementType localVariableDeclarationStatement 	= new ApexElementType("localVariableDeclarationStatement");
	public static IElementType localVariableDeclaration 	= new ApexElementType("localVariableDeclaration");
	public static IElementType statement 	= new ApexElementType("statement");
	public static IElementType ifStatement 	= new ApexElementType("ifStatement");
	public static IElementType switchStatement 	= new ApexElementType("switchStatement");
	public static IElementType whenControl 	= new ApexElementType("whenControl");
	public static IElementType whenValue 	= new ApexElementType("whenValue");
	public static IElementType whenLiteral 	= new ApexElementType("whenLiteral");
	public static IElementType forStatement 	= new ApexElementType("forStatement");
	public static IElementType whileStatement 	= new ApexElementType("whileStatement");
	public static IElementType doWhileStatement 	= new ApexElementType("doWhileStatement");
	public static IElementType tryStatement 	= new ApexElementType("tryStatement");
	public static IElementType returnStatement 	= new ApexElementType("returnStatement");
	public static IElementType throwStatement 	= new ApexElementType("throwStatement");
	public static IElementType breakStatement 	= new ApexElementType("breakStatement");
	public static IElementType continueStatement 	= new ApexElementType("continueStatement");
	public static IElementType accessLevel 	= new ApexElementType("accessLevel");
	public static IElementType insertStatement 	= new ApexElementType("insertStatement");
	public static IElementType updateStatement 	= new ApexElementType("updateStatement");
	public static IElementType deleteStatement 	= new ApexElementType("deleteStatement");
	public static IElementType undeleteStatement 	= new ApexElementType("undeleteStatement");
	public static IElementType upsertStatement 	= new ApexElementType("upsertStatement");
	public static IElementType mergeStatement 	= new ApexElementType("mergeStatement");
	public static IElementType runAsStatement 	= new ApexElementType("runAsStatement");
	public static IElementType expressionStatement 	= new ApexElementType("expressionStatement");
	public static IElementType propertyBlock 	= new ApexElementType("propertyBlock");
	public static IElementType getter 	= new ApexElementType("getter");
	public static IElementType setter 	= new ApexElementType("setter");
	public static IElementType catchClause 	= new ApexElementType("catchClause");
	public static IElementType finallyBlock 	= new ApexElementType("finallyBlock");
	public static IElementType forControl 	= new ApexElementType("forControl");
	public static IElementType forInit 	= new ApexElementType("forInit");
	public static IElementType enhancedForControl 	= new ApexElementType("enhancedForControl");
	public static IElementType forUpdate 	= new ApexElementType("forUpdate");
	public static IElementType parExpression 	= new ApexElementType("parExpression");
	public static IElementType expressionList 	= new ApexElementType("expressionList");
	public static IElementType expression 	= new ApexElementType("expression");
	public static IElementType primary 	= new ApexElementType("primary");
	public static IElementType methodCall 	= new ApexElementType("methodCall");
	public static IElementType dotMethodCall 	= new ApexElementType("dotMethodCall");
	public static IElementType creator 	= new ApexElementType("creator");
	public static IElementType createdName 	= new ApexElementType("createdName");
	public static IElementType idCreatedNamePair 	= new ApexElementType("idCreatedNamePair");
	public static IElementType noRest 	= new ApexElementType("noRest");
	public static IElementType classCreatorRest 	= new ApexElementType("classCreatorRest");
	public static IElementType arrayCreatorRest 	= new ApexElementType("arrayCreatorRest");
	public static IElementType mapCreatorRest 	= new ApexElementType("mapCreatorRest");
	public static IElementType mapCreatorRestPair 	= new ApexElementType("mapCreatorRestPair");
	public static IElementType setCreatorRest 	= new ApexElementType("setCreatorRest");
	public static IElementType arguments 	= new ApexElementType("arguments");
	public static IElementType soqlLiteral 	= new ApexElementType("soqlLiteral");
	public static IElementType query 	= new ApexElementType("query");
	public static IElementType subQuery 	= new ApexElementType("subQuery");
	public static IElementType selectList 	= new ApexElementType("selectList");
	public static IElementType selectEntry 	= new ApexElementType("selectEntry");
	public static IElementType fieldName 	= new ApexElementType("fieldName");
	public static IElementType fromNameList 	= new ApexElementType("fromNameList");
	public static IElementType subFieldList 	= new ApexElementType("subFieldList");
	public static IElementType subFieldEntry 	= new ApexElementType("subFieldEntry");
	public static IElementType soqlFieldsParameter 	= new ApexElementType("soqlFieldsParameter");
	public static IElementType soqlFunction 	= new ApexElementType("soqlFunction");
	public static IElementType dateFieldName 	= new ApexElementType("dateFieldName");
	public static IElementType locationValue 	= new ApexElementType("locationValue");
	public static IElementType coordinateValue 	= new ApexElementType("coordinateValue");
	public static IElementType typeOf 	= new ApexElementType("typeOf");
	public static IElementType whenClause 	= new ApexElementType("whenClause");
	public static IElementType elseClause 	= new ApexElementType("elseClause");
	public static IElementType fieldNameList 	= new ApexElementType("fieldNameList");
	public static IElementType usingScope 	= new ApexElementType("usingScope");
	public static IElementType whereClause 	= new ApexElementType("whereClause");
	public static IElementType logicalExpression 	= new ApexElementType("logicalExpression");
	public static IElementType conditionalExpression 	= new ApexElementType("conditionalExpression");
	public static IElementType fieldExpression 	= new ApexElementType("fieldExpression");
	public static IElementType comparisonOperator 	= new ApexElementType("comparisonOperator");
	public static IElementType value 	= new ApexElementType("value");
	public static IElementType valueList 	= new ApexElementType("valueList");
	public static IElementType signedNumber 	= new ApexElementType("signedNumber");
	public static IElementType withClause 	= new ApexElementType("withClause");
	public static IElementType filteringExpression 	= new ApexElementType("filteringExpression");
	public static IElementType dataCategorySelection 	= new ApexElementType("dataCategorySelection");
	public static IElementType dataCategoryName 	= new ApexElementType("dataCategoryName");
	public static IElementType filteringSelector 	= new ApexElementType("filteringSelector");
	public static IElementType groupByClause 	= new ApexElementType("groupByClause");
	public static IElementType orderByClause 	= new ApexElementType("orderByClause");
	public static IElementType fieldOrderList 	= new ApexElementType("fieldOrderList");
	public static IElementType fieldOrder 	= new ApexElementType("fieldOrder");
	public static IElementType limitClause 	= new ApexElementType("limitClause");
	public static IElementType offsetClause 	= new ApexElementType("offsetClause");
	public static IElementType allRowsClause 	= new ApexElementType("allRowsClause");
	public static IElementType forClauses 	= new ApexElementType("forClauses");
	public static IElementType boundExpression 	= new ApexElementType("boundExpression");
	public static IElementType dateFormula 	= new ApexElementType("dateFormula");
	public static IElementType signedInteger 	= new ApexElementType("signedInteger");
	public static IElementType soqlId 	= new ApexElementType("soqlId");
	public static IElementType soslLiteral 	= new ApexElementType("soslLiteral");
	public static IElementType soslLiteralAlt 	= new ApexElementType("soslLiteralAlt");
	public static IElementType soslClauses 	= new ApexElementType("soslClauses");
	public static IElementType soslWithClause 	= new ApexElementType("soslWithClause");
	public static IElementType searchGroup 	= new ApexElementType("searchGroup");
	public static IElementType fieldSpecList 	= new ApexElementType("fieldSpecList");
	public static IElementType fieldSpec 	= new ApexElementType("fieldSpec");
	public static IElementType fieldList 	= new ApexElementType("fieldList");
	public static IElementType updateList 	= new ApexElementType("updateList");
	public static IElementType updateType 	= new ApexElementType("updateType");
	public static IElementType networkList 	= new ApexElementType("networkList");
	public static IElementType soslId 	= new ApexElementType("soslId");
	public static IElementType id 	= new ApexElementType("id");
	public static IElementType anyId 	= new ApexElementType("anyId");

	public static IElementType TOKEN_null	= ApexTokenType.createTokenType("0");
	public static IElementType TOKEN_ABSTRACT	= ApexTokenType.createTokenType("'abstract'");
	public static IElementType TOKEN_AFTER	= ApexTokenType.createTokenType("'after'");
	public static IElementType TOKEN_BEFORE	= ApexTokenType.createTokenType("'before'");
	public static IElementType TOKEN_BREAK	= ApexTokenType.createTokenType("'break'");
	public static IElementType TOKEN_CATCH	= ApexTokenType.createTokenType("'catch'");
	public static IElementType TOKEN_CLASS	= ApexTokenType.createTokenType("'class'");
	public static IElementType TOKEN_CONTINUE	= ApexTokenType.createTokenType("'continue'");
	public static IElementType TOKEN_DELETE	= ApexTokenType.createTokenType("'delete'");
	public static IElementType TOKEN_DO	= ApexTokenType.createTokenType("'do'");
	public static IElementType TOKEN_ELSE	= ApexTokenType.createTokenType("'else'");
	public static IElementType TOKEN_ENUM	= ApexTokenType.createTokenType("'enum'");
	public static IElementType TOKEN_EXTENDS	= ApexTokenType.createTokenType("'extends'");
	public static IElementType TOKEN_FINAL	= ApexTokenType.createTokenType("'final'");
	public static IElementType TOKEN_FINALLY	= ApexTokenType.createTokenType("'finally'");
	public static IElementType TOKEN_FOR	= ApexTokenType.createTokenType("'for'");
	public static IElementType TOKEN_GET	= ApexTokenType.createTokenType("'get'");
	public static IElementType TOKEN_GLOBAL	= ApexTokenType.createTokenType("'global'");
	public static IElementType TOKEN_IF	= ApexTokenType.createTokenType("'if'");
	public static IElementType TOKEN_IMPLEMENTS	= ApexTokenType.createTokenType("'implements'");
	public static IElementType TOKEN_INHERITED	= ApexTokenType.createTokenType("'inherited'");
	public static IElementType TOKEN_INSERT	= ApexTokenType.createTokenType("'insert'");
	public static IElementType TOKEN_INSTANCEOF	= ApexTokenType.createTokenType("'instanceof'");
	public static IElementType TOKEN_INTERFACE	= ApexTokenType.createTokenType("'interface'");
	public static IElementType TOKEN_MERGE	= ApexTokenType.createTokenType("'merge'");
	public static IElementType TOKEN_NEW	= ApexTokenType.createTokenType("'new'");
	public static IElementType TOKEN_NULL	= ApexTokenType.createTokenType("'null'");
	public static IElementType TOKEN_ON	= ApexTokenType.createTokenType("'on'");
	public static IElementType TOKEN_OVERRIDE	= ApexTokenType.createTokenType("'override'");
	public static IElementType TOKEN_PRIVATE	= ApexTokenType.createTokenType("'private'");
	public static IElementType TOKEN_PROTECTED	= ApexTokenType.createTokenType("'protected'");
	public static IElementType TOKEN_PUBLIC	= ApexTokenType.createTokenType("'public'");
	public static IElementType TOKEN_RETURN	= ApexTokenType.createTokenType("'return'");
	public static IElementType TOKEN_SYSTEMRUNAS	= ApexTokenType.createTokenType("'system.runas'");
	public static IElementType TOKEN_SET	= ApexTokenType.createTokenType("'set'");
	public static IElementType TOKEN_SHARING	= ApexTokenType.createTokenType("'sharing'");
	public static IElementType TOKEN_STATIC	= ApexTokenType.createTokenType("'static'");
	public static IElementType TOKEN_SUPER	= ApexTokenType.createTokenType("'super'");
	public static IElementType TOKEN_SWITCH	= ApexTokenType.createTokenType("'switch'");
	public static IElementType TOKEN_TESTMETHOD	= ApexTokenType.createTokenType("'testmethod'");
	public static IElementType TOKEN_THIS	= ApexTokenType.createTokenType("'this'");
	public static IElementType TOKEN_THROW	= ApexTokenType.createTokenType("'throw'");
	public static IElementType TOKEN_TRANSIENT	= ApexTokenType.createTokenType("'transient'");
	public static IElementType TOKEN_TRIGGER	= ApexTokenType.createTokenType("'trigger'");
	public static IElementType TOKEN_TRY	= ApexTokenType.createTokenType("'try'");
	public static IElementType TOKEN_UNDELETE	= ApexTokenType.createTokenType("'undelete'");
	public static IElementType TOKEN_UPDATE	= ApexTokenType.createTokenType("'update'");
	public static IElementType TOKEN_UPSERT	= ApexTokenType.createTokenType("'upsert'");
	public static IElementType TOKEN_VIRTUAL	= ApexTokenType.createTokenType("'virtual'");
	public static IElementType TOKEN_VOID	= ApexTokenType.createTokenType("'void'");
	public static IElementType TOKEN_WEBSERVICE	= ApexTokenType.createTokenType("'webservice'");
	public static IElementType TOKEN_WHEN	= ApexTokenType.createTokenType("'when'");
	public static IElementType TOKEN_WHILE	= ApexTokenType.createTokenType("'while'");
	public static IElementType TOKEN_WITH	= ApexTokenType.createTokenType("'with'");
	public static IElementType TOKEN_WITHOUT	= ApexTokenType.createTokenType("'without'");
	public static IElementType TOKEN_LIST	= ApexTokenType.createTokenType("'list'");
	public static IElementType TOKEN_MAP	= ApexTokenType.createTokenType("'map'");
	public static IElementType TOKEN_SYSTEM	= ApexTokenType.createTokenType("'system'");
	public static IElementType TOKEN_USER	= ApexTokenType.createTokenType("'user'");
	public static IElementType TOKEN_SELECT	= ApexTokenType.createTokenType("'select'");
	public static IElementType TOKEN_COUNT	= ApexTokenType.createTokenType("'count'");
	public static IElementType TOKEN_FROM	= ApexTokenType.createTokenType("'from'");
	public static IElementType TOKEN_AS	= ApexTokenType.createTokenType("'as'");
	public static IElementType TOKEN_USING	= ApexTokenType.createTokenType("'using'");
	public static IElementType TOKEN_SCOPE	= ApexTokenType.createTokenType("'scope'");
	public static IElementType TOKEN_WHERE	= ApexTokenType.createTokenType("'where'");
	public static IElementType TOKEN_ORDER	= ApexTokenType.createTokenType("'order'");
	public static IElementType TOKEN_BY	= ApexTokenType.createTokenType("'by'");
	public static IElementType TOKEN_LIMIT	= ApexTokenType.createTokenType("'limit'");
	public static IElementType TOKEN_SOQLAND	= ApexTokenType.createTokenType("'and'");
	public static IElementType TOKEN_SOQLOR	= ApexTokenType.createTokenType("'or'");
	public static IElementType TOKEN_NOT	= ApexTokenType.createTokenType("'not'");
	public static IElementType TOKEN_AVG	= ApexTokenType.createTokenType("'avg'");
	public static IElementType TOKEN_COUNT_DISTINCT	= ApexTokenType.createTokenType("'count_distinct'");
	public static IElementType TOKEN_MIN	= ApexTokenType.createTokenType("'min'");
	public static IElementType TOKEN_MAX	= ApexTokenType.createTokenType("'max'");
	public static IElementType TOKEN_SUM	= ApexTokenType.createTokenType("'sum'");
	public static IElementType TOKEN_TYPEOF	= ApexTokenType.createTokenType("'typeof'");
	public static IElementType TOKEN_END	= ApexTokenType.createTokenType("'end'");
	public static IElementType TOKEN_THEN	= ApexTokenType.createTokenType("'then'");
	public static IElementType TOKEN_LIKE	= ApexTokenType.createTokenType("'like'");
	public static IElementType TOKEN_IN	= ApexTokenType.createTokenType("'in'");
	public static IElementType TOKEN_INCLUDES	= ApexTokenType.createTokenType("'includes'");
	public static IElementType TOKEN_EXCLUDES	= ApexTokenType.createTokenType("'excludes'");
	public static IElementType TOKEN_ASC	= ApexTokenType.createTokenType("'asc'");
	public static IElementType TOKEN_DESC	= ApexTokenType.createTokenType("'desc'");
	public static IElementType TOKEN_NULLS	= ApexTokenType.createTokenType("'nulls'");
	public static IElementType TOKEN_FIRST	= ApexTokenType.createTokenType("'first'");
	public static IElementType TOKEN_LAST	= ApexTokenType.createTokenType("'last'");
	public static IElementType TOKEN_GROUP	= ApexTokenType.createTokenType("'group'");
	public static IElementType TOKEN_ALL	= ApexTokenType.createTokenType("'all'");
	public static IElementType TOKEN_ROWS	= ApexTokenType.createTokenType("'rows'");
	public static IElementType TOKEN_VIEW	= ApexTokenType.createTokenType("'view'");
	public static IElementType TOKEN_HAVING	= ApexTokenType.createTokenType("'having'");
	public static IElementType TOKEN_ROLLUP	= ApexTokenType.createTokenType("'rollup'");
	public static IElementType TOKEN_TOLABEL	= ApexTokenType.createTokenType("'tolabel'");
	public static IElementType TOKEN_OFFSET	= ApexTokenType.createTokenType("'offset'");
	public static IElementType TOKEN_DATA	= ApexTokenType.createTokenType("'data'");
	public static IElementType TOKEN_CATEGORY	= ApexTokenType.createTokenType("'category'");
	public static IElementType TOKEN_AT	= ApexTokenType.createTokenType("'at'");
	public static IElementType TOKEN_ABOVE	= ApexTokenType.createTokenType("'above'");
	public static IElementType TOKEN_BELOW	= ApexTokenType.createTokenType("'below'");
	public static IElementType TOKEN_ABOVE_OR_BELOW	= ApexTokenType.createTokenType("'above_or_below'");
	public static IElementType TOKEN_SECURITY_ENFORCED	= ApexTokenType.createTokenType("'security_enforced'");
	public static IElementType TOKEN_SYSTEM_MODE	= ApexTokenType.createTokenType("'system_mode'");
	public static IElementType TOKEN_USER_MODE	= ApexTokenType.createTokenType("'user_mode'");
	public static IElementType TOKEN_REFERENCE	= ApexTokenType.createTokenType("'reference'");
	public static IElementType TOKEN_CUBE	= ApexTokenType.createTokenType("'cube'");
	public static IElementType TOKEN_FORMAT	= ApexTokenType.createTokenType("'format'");
	public static IElementType TOKEN_TRACKING	= ApexTokenType.createTokenType("'tracking'");
	public static IElementType TOKEN_VIEWSTAT	= ApexTokenType.createTokenType("'viewstat'");
	public static IElementType TOKEN_CUSTOM	= ApexTokenType.createTokenType("'custom'");
	public static IElementType TOKEN_STANDARD	= ApexTokenType.createTokenType("'standard'");
	public static IElementType TOKEN_DISTANCE	= ApexTokenType.createTokenType("'distance'");
	public static IElementType TOKEN_GEOLOCATION	= ApexTokenType.createTokenType("'geolocation'");
	public static IElementType TOKEN_GROUPING	= ApexTokenType.createTokenType("'grouping'");
	public static IElementType TOKEN_CONVERT_CURRENCY	= ApexTokenType.createTokenType("'convertcurrency'");
	public static IElementType TOKEN_CALENDAR_MONTH	= ApexTokenType.createTokenType("'calendar_month'");
	public static IElementType TOKEN_CALENDAR_QUARTER	= ApexTokenType.createTokenType("'calendar_quarter'");
	public static IElementType TOKEN_CALENDAR_YEAR	= ApexTokenType.createTokenType("'calendar_year'");
	public static IElementType TOKEN_DAY_IN_MONTH	= ApexTokenType.createTokenType("'day_in_month'");
	public static IElementType TOKEN_DAY_IN_WEEK	= ApexTokenType.createTokenType("'day_in_week'");
	public static IElementType TOKEN_DAY_IN_YEAR	= ApexTokenType.createTokenType("'day_in_year'");
	public static IElementType TOKEN_DAY_ONLY	= ApexTokenType.createTokenType("'day_only'");
	public static IElementType TOKEN_FISCAL_MONTH	= ApexTokenType.createTokenType("'fiscal_month'");
	public static IElementType TOKEN_FISCAL_QUARTER	= ApexTokenType.createTokenType("'fiscal_quarter'");
	public static IElementType TOKEN_FISCAL_YEAR	= ApexTokenType.createTokenType("'fiscal_year'");
	public static IElementType TOKEN_HOUR_IN_DAY	= ApexTokenType.createTokenType("'hour_in_day'");
	public static IElementType TOKEN_WEEK_IN_MONTH	= ApexTokenType.createTokenType("'week_in_month'");
	public static IElementType TOKEN_WEEK_IN_YEAR	= ApexTokenType.createTokenType("'week_in_year'");
	public static IElementType TOKEN_CONVERT_TIMEZONE	= ApexTokenType.createTokenType("'converttimezone'");
	public static IElementType TOKEN_YESTERDAY	= ApexTokenType.createTokenType("'yesterday'");
	public static IElementType TOKEN_TODAY	= ApexTokenType.createTokenType("'today'");
	public static IElementType TOKEN_TOMORROW	= ApexTokenType.createTokenType("'tomorrow'");
	public static IElementType TOKEN_LAST_WEEK	= ApexTokenType.createTokenType("'last_week'");
	public static IElementType TOKEN_THIS_WEEK	= ApexTokenType.createTokenType("'this_week'");
	public static IElementType TOKEN_NEXT_WEEK	= ApexTokenType.createTokenType("'next_week'");
	public static IElementType TOKEN_LAST_MONTH	= ApexTokenType.createTokenType("'last_month'");
	public static IElementType TOKEN_THIS_MONTH	= ApexTokenType.createTokenType("'this_month'");
	public static IElementType TOKEN_NEXT_MONTH	= ApexTokenType.createTokenType("'next_month'");
	public static IElementType TOKEN_LAST_90_DAYS	= ApexTokenType.createTokenType("'last_90_days'");
	public static IElementType TOKEN_NEXT_90_DAYS	= ApexTokenType.createTokenType("'next_90_days'");
	public static IElementType TOKEN_LAST_N_DAYS_N	= ApexTokenType.createTokenType("'last_n_days'");
	public static IElementType TOKEN_NEXT_N_DAYS_N	= ApexTokenType.createTokenType("'next_n_days'");
	public static IElementType TOKEN_N_DAYS_AGO_N	= ApexTokenType.createTokenType("'n_days_ago'");
	public static IElementType TOKEN_NEXT_N_WEEKS_N	= ApexTokenType.createTokenType("'next_n_weeks'");
	public static IElementType TOKEN_LAST_N_WEEKS_N	= ApexTokenType.createTokenType("'last_n_weeks'");
	public static IElementType TOKEN_N_WEEKS_AGO_N	= ApexTokenType.createTokenType("'n_weeks_ago'");
	public static IElementType TOKEN_NEXT_N_MONTHS_N	= ApexTokenType.createTokenType("'next_n_months'");
	public static IElementType TOKEN_LAST_N_MONTHS_N	= ApexTokenType.createTokenType("'last_n_months'");
	public static IElementType TOKEN_N_MONTHS_AGO_N	= ApexTokenType.createTokenType("'n_months_ago'");
	public static IElementType TOKEN_THIS_QUARTER	= ApexTokenType.createTokenType("'this_quarter'");
	public static IElementType TOKEN_LAST_QUARTER	= ApexTokenType.createTokenType("'last_quarter'");
	public static IElementType TOKEN_NEXT_QUARTER	= ApexTokenType.createTokenType("'next_quarter'");
	public static IElementType TOKEN_NEXT_N_QUARTERS_N	= ApexTokenType.createTokenType("'next_n_quarters'");
	public static IElementType TOKEN_LAST_N_QUARTERS_N	= ApexTokenType.createTokenType("'last_n_quarters'");
	public static IElementType TOKEN_N_QUARTERS_AGO_N	= ApexTokenType.createTokenType("'n_quarters_ago'");
	public static IElementType TOKEN_THIS_YEAR	= ApexTokenType.createTokenType("'this_year'");
	public static IElementType TOKEN_LAST_YEAR	= ApexTokenType.createTokenType("'last_year'");
	public static IElementType TOKEN_NEXT_YEAR	= ApexTokenType.createTokenType("'next_year'");
	public static IElementType TOKEN_NEXT_N_YEARS_N	= ApexTokenType.createTokenType("'next_n_years'");
	public static IElementType TOKEN_LAST_N_YEARS_N	= ApexTokenType.createTokenType("'last_n_years'");
	public static IElementType TOKEN_N_YEARS_AGO_N	= ApexTokenType.createTokenType("'n_years_ago'");
	public static IElementType TOKEN_THIS_FISCAL_QUARTER	= ApexTokenType.createTokenType("'this_fiscal_quarter'");
	public static IElementType TOKEN_LAST_FISCAL_QUARTER	= ApexTokenType.createTokenType("'last_fiscal_quarter'");
	public static IElementType TOKEN_NEXT_FISCAL_QUARTER	= ApexTokenType.createTokenType("'next_fiscal_quarter'");
	public static IElementType TOKEN_NEXT_N_FISCAL_QUARTERS_N	= ApexTokenType.createTokenType("'next_n_fiscal_quarters'");
	public static IElementType TOKEN_LAST_N_FISCAL_QUARTERS_N	= ApexTokenType.createTokenType("'last_n_fiscal_quarters'");
	public static IElementType TOKEN_N_FISCAL_QUARTERS_AGO_N	= ApexTokenType.createTokenType("'n_fiscal_quarters_ago'");
	public static IElementType TOKEN_THIS_FISCAL_YEAR	= ApexTokenType.createTokenType("'this_fiscal_year'");
	public static IElementType TOKEN_LAST_FISCAL_YEAR	= ApexTokenType.createTokenType("'last_fiscal_year'");
	public static IElementType TOKEN_NEXT_FISCAL_YEAR	= ApexTokenType.createTokenType("'next_fiscal_year'");
	public static IElementType TOKEN_NEXT_N_FISCAL_YEARS_N	= ApexTokenType.createTokenType("'next_n_fiscal_years'");
	public static IElementType TOKEN_LAST_N_FISCAL_YEARS_N	= ApexTokenType.createTokenType("'last_n_fiscal_years'");
	public static IElementType TOKEN_N_FISCAL_YEARS_AGO_N	= ApexTokenType.createTokenType("'n_fiscal_years_ago'");
	public static IElementType TOKEN_DateLiteral	= ApexTokenType.createTokenType("DateLiteral");
	public static IElementType TOKEN_TimeLiteral	= ApexTokenType.createTokenType("TimeLiteral");
	public static IElementType TOKEN_DateTimeLiteral	= ApexTokenType.createTokenType("DateTimeLiteral");
	public static IElementType TOKEN_IntegralCurrencyLiteral	= ApexTokenType.createTokenType("IntegralCurrencyLiteral");
	public static IElementType TOKEN_FIND	= ApexTokenType.createTokenType("'find'");
	public static IElementType TOKEN_EMAIL	= ApexTokenType.createTokenType("'email'");
	public static IElementType TOKEN_NAME	= ApexTokenType.createTokenType("'name'");
	public static IElementType TOKEN_PHONE	= ApexTokenType.createTokenType("'phone'");
	public static IElementType TOKEN_SIDEBAR	= ApexTokenType.createTokenType("'sidebar'");
	public static IElementType TOKEN_FIELDS	= ApexTokenType.createTokenType("'fields'");
	public static IElementType TOKEN_METADATA	= ApexTokenType.createTokenType("'metadata'");
	public static IElementType TOKEN_PRICEBOOKID	= ApexTokenType.createTokenType("'pricebookid'");
	public static IElementType TOKEN_NETWORK	= ApexTokenType.createTokenType("'network'");
	public static IElementType TOKEN_SNIPPET	= ApexTokenType.createTokenType("'snippet'");
	public static IElementType TOKEN_TARGET_LENGTH	= ApexTokenType.createTokenType("'target_length'");
	public static IElementType TOKEN_DIVISION	= ApexTokenType.createTokenType("'division'");
	public static IElementType TOKEN_RETURNING	= ApexTokenType.createTokenType("'returning'");
	public static IElementType TOKEN_LISTVIEW	= ApexTokenType.createTokenType("'listview'");
	public static IElementType TOKEN_FindLiteral	= ApexTokenType.createTokenType("FindLiteral");
	public static IElementType TOKEN_FindLiteralAlt	= ApexTokenType.createTokenType("FindLiteralAlt");
	public static IElementType TOKEN_IntegerLiteral	= ApexTokenType.createTokenType("IntegerLiteral");
	public static IElementType TOKEN_LongLiteral	= ApexTokenType.createTokenType("LongLiteral");
	public static IElementType TOKEN_NumberLiteral	= ApexTokenType.createTokenType("NumberLiteral");
	public static IElementType TOKEN_BooleanLiteral	= ApexTokenType.createTokenType("BooleanLiteral");
	public static IElementType TOKEN_StringLiteral	= ApexTokenType.createTokenType("StringLiteral");
	public static IElementType TOKEN_NullLiteral	= ApexTokenType.createTokenType("NullLiteral");
	public static IElementType TOKEN_LPAREN	= ApexTokenType.createTokenType("'('");
	public static IElementType TOKEN_RPAREN	= ApexTokenType.createTokenType("')'");
	public static IElementType TOKEN_LBRACE	= ApexTokenType.createTokenType("'{'");
	public static IElementType TOKEN_RBRACE	= ApexTokenType.createTokenType("'}'");
	public static IElementType TOKEN_LBRACK	= ApexTokenType.createTokenType("'['");
	public static IElementType TOKEN_RBRACK	= ApexTokenType.createTokenType("']'");
	public static IElementType TOKEN_SEMI	= ApexTokenType.createTokenType("';'");
	public static IElementType TOKEN_COMMA	= ApexTokenType.createTokenType("','");
	public static IElementType TOKEN_DOT	= ApexTokenType.createTokenType("'.'");
	public static IElementType TOKEN_ASSIGN	= ApexTokenType.createTokenType("'='");
	public static IElementType TOKEN_GT	= ApexTokenType.createTokenType("'>'");
	public static IElementType TOKEN_LT	= ApexTokenType.createTokenType("'<'");
	public static IElementType TOKEN_BANG	= ApexTokenType.createTokenType("'!'");
	public static IElementType TOKEN_TILDE	= ApexTokenType.createTokenType("'~'");
	public static IElementType TOKEN_QUESTIONDOT	= ApexTokenType.createTokenType("'?.'");
	public static IElementType TOKEN_QUESTION	= ApexTokenType.createTokenType("'?'");
	public static IElementType TOKEN_COLON	= ApexTokenType.createTokenType("':'");
	public static IElementType TOKEN_EQUAL	= ApexTokenType.createTokenType("'=='");
	public static IElementType TOKEN_TRIPLEEQUAL	= ApexTokenType.createTokenType("'==='");
	public static IElementType TOKEN_NOTEQUAL	= ApexTokenType.createTokenType("'!='");
	public static IElementType TOKEN_LESSANDGREATER	= ApexTokenType.createTokenType("'<>'");
	public static IElementType TOKEN_TRIPLENOTEQUAL	= ApexTokenType.createTokenType("'!=='");
	public static IElementType TOKEN_AND	= ApexTokenType.createTokenType("'&&'");
	public static IElementType TOKEN_OR	= ApexTokenType.createTokenType("'||'");
	public static IElementType TOKEN_COAL	= ApexTokenType.createTokenType("'??'");
	public static IElementType TOKEN_INC	= ApexTokenType.createTokenType("'++'");
	public static IElementType TOKEN_DEC	= ApexTokenType.createTokenType("'--'");
	public static IElementType TOKEN_ADD	= ApexTokenType.createTokenType("'+'");
	public static IElementType TOKEN_SUB	= ApexTokenType.createTokenType("'-'");
	public static IElementType TOKEN_MUL	= ApexTokenType.createTokenType("'*'");
	public static IElementType TOKEN_DIV	= ApexTokenType.createTokenType("'/'");
	public static IElementType TOKEN_BITAND	= ApexTokenType.createTokenType("'&'");
	public static IElementType TOKEN_BITOR	= ApexTokenType.createTokenType("'|'");
	public static IElementType TOKEN_CARET	= ApexTokenType.createTokenType("'^'");
	public static IElementType TOKEN_MAPTO	= ApexTokenType.createTokenType("'=>'");
	public static IElementType TOKEN_ADD_ASSIGN	= ApexTokenType.createTokenType("'+='");
	public static IElementType TOKEN_SUB_ASSIGN	= ApexTokenType.createTokenType("'-='");
	public static IElementType TOKEN_MUL_ASSIGN	= ApexTokenType.createTokenType("'*='");
	public static IElementType TOKEN_DIV_ASSIGN	= ApexTokenType.createTokenType("'/='");
	public static IElementType TOKEN_AND_ASSIGN	= ApexTokenType.createTokenType("'&='");
	public static IElementType TOKEN_OR_ASSIGN	= ApexTokenType.createTokenType("'|='");
	public static IElementType TOKEN_XOR_ASSIGN	= ApexTokenType.createTokenType("'^='");
	public static IElementType TOKEN_LSHIFT_ASSIGN	= ApexTokenType.createTokenType("'<<='");
	public static IElementType TOKEN_RSHIFT_ASSIGN	= ApexTokenType.createTokenType("'>>='");
	public static IElementType TOKEN_URSHIFT_ASSIGN	= ApexTokenType.createTokenType("'>>>='");
	public static IElementType TOKEN_ATSIGN	= ApexTokenType.createTokenType("'@'");
	public static IElementType TOKEN_Identifier	= ApexTokenType.createTokenType("Identifier");
	public static IElementType TOKEN_WS	= ApexTokenType.createTokenType("WS");
	public static IElementType TOKEN_DOC_COMMENT	= ApexTokenType.createTokenType("DOC_COMMENT");
	public static IElementType TOKEN_COMMENT	= ApexTokenType.createTokenType("COMMENT");


	public static IElementType getElementValueByIndex(int type,int index){
		if(type == 1){
			switch (index){
				case 0:return TOKEN_null;
				case 1:return TOKEN_ABSTRACT;
				case 2:return TOKEN_AFTER;
				case 3:return TOKEN_BEFORE;
				case 4:return TOKEN_BREAK;
				case 5:return TOKEN_CATCH;
				case 6:return TOKEN_CLASS;
				case 7:return TOKEN_CONTINUE;
				case 8:return TOKEN_DELETE;
				case 9:return TOKEN_DO;
				case 10:return TOKEN_ELSE;
				case 11:return TOKEN_ENUM;
				case 12:return TOKEN_EXTENDS;
				case 13:return TOKEN_FINAL;
				case 14:return TOKEN_FINALLY;
				case 15:return TOKEN_FOR;
				case 16:return TOKEN_GET;
				case 17:return TOKEN_GLOBAL;
				case 18:return TOKEN_IF;
				case 19:return TOKEN_IMPLEMENTS;
				case 20:return TOKEN_INHERITED;
				case 21:return TOKEN_INSERT;
				case 22:return TOKEN_INSTANCEOF;
				case 23:return TOKEN_INTERFACE;
				case 24:return TOKEN_MERGE;
				case 25:return TOKEN_NEW;
				case 26:return TOKEN_NULL;
				case 27:return TOKEN_ON;
				case 28:return TOKEN_OVERRIDE;
				case 29:return TOKEN_PRIVATE;
				case 30:return TOKEN_PROTECTED;
				case 31:return TOKEN_PUBLIC;
				case 32:return TOKEN_RETURN;
				case 33:return TOKEN_SYSTEMRUNAS;
				case 34:return TOKEN_SET;
				case 35:return TOKEN_SHARING;
				case 36:return TOKEN_STATIC;
				case 37:return TOKEN_SUPER;
				case 38:return TOKEN_SWITCH;
				case 39:return TOKEN_TESTMETHOD;
				case 40:return TOKEN_THIS;
				case 41:return TOKEN_THROW;
				case 42:return TOKEN_TRANSIENT;
				case 43:return TOKEN_TRIGGER;
				case 44:return TOKEN_TRY;
				case 45:return TOKEN_UNDELETE;
				case 46:return TOKEN_UPDATE;
				case 47:return TOKEN_UPSERT;
				case 48:return TOKEN_VIRTUAL;
				case 49:return TOKEN_VOID;
				case 50:return TOKEN_WEBSERVICE;
				case 51:return TOKEN_WHEN;
				case 52:return TOKEN_WHILE;
				case 53:return TOKEN_WITH;
				case 54:return TOKEN_WITHOUT;
				case 55:return TOKEN_LIST;
				case 56:return TOKEN_MAP;
				case 57:return TOKEN_SYSTEM;
				case 58:return TOKEN_USER;
				case 59:return TOKEN_SELECT;
				case 60:return TOKEN_COUNT;
				case 61:return TOKEN_FROM;
				case 62:return TOKEN_AS;
				case 63:return TOKEN_USING;
				case 64:return TOKEN_SCOPE;
				case 65:return TOKEN_WHERE;
				case 66:return TOKEN_ORDER;
				case 67:return TOKEN_BY;
				case 68:return TOKEN_LIMIT;
				case 69:return TOKEN_SOQLAND;
				case 70:return TOKEN_SOQLOR;
				case 71:return TOKEN_NOT;
				case 72:return TOKEN_AVG;
				case 73:return TOKEN_COUNT_DISTINCT;
				case 74:return TOKEN_MIN;
				case 75:return TOKEN_MAX;
				case 76:return TOKEN_SUM;
				case 77:return TOKEN_TYPEOF;
				case 78:return TOKEN_END;
				case 79:return TOKEN_THEN;
				case 80:return TOKEN_LIKE;
				case 81:return TOKEN_IN;
				case 82:return TOKEN_INCLUDES;
				case 83:return TOKEN_EXCLUDES;
				case 84:return TOKEN_ASC;
				case 85:return TOKEN_DESC;
				case 86:return TOKEN_NULLS;
				case 87:return TOKEN_FIRST;
				case 88:return TOKEN_LAST;
				case 89:return TOKEN_GROUP;
				case 90:return TOKEN_ALL;
				case 91:return TOKEN_ROWS;
				case 92:return TOKEN_VIEW;
				case 93:return TOKEN_HAVING;
				case 94:return TOKEN_ROLLUP;
				case 95:return TOKEN_TOLABEL;
				case 96:return TOKEN_OFFSET;
				case 97:return TOKEN_DATA;
				case 98:return TOKEN_CATEGORY;
				case 99:return TOKEN_AT;
				case 100:return TOKEN_ABOVE;
				case 101:return TOKEN_BELOW;
				case 102:return TOKEN_ABOVE_OR_BELOW;
				case 103:return TOKEN_SECURITY_ENFORCED;
				case 104:return TOKEN_SYSTEM_MODE;
				case 105:return TOKEN_USER_MODE;
				case 106:return TOKEN_REFERENCE;
				case 107:return TOKEN_CUBE;
				case 108:return TOKEN_FORMAT;
				case 109:return TOKEN_TRACKING;
				case 110:return TOKEN_VIEWSTAT;
				case 111:return TOKEN_CUSTOM;
				case 112:return TOKEN_STANDARD;
				case 113:return TOKEN_DISTANCE;
				case 114:return TOKEN_GEOLOCATION;
				case 115:return TOKEN_GROUPING;
				case 116:return TOKEN_CONVERT_CURRENCY;
				case 117:return TOKEN_CALENDAR_MONTH;
				case 118:return TOKEN_CALENDAR_QUARTER;
				case 119:return TOKEN_CALENDAR_YEAR;
				case 120:return TOKEN_DAY_IN_MONTH;
				case 121:return TOKEN_DAY_IN_WEEK;
				case 122:return TOKEN_DAY_IN_YEAR;
				case 123:return TOKEN_DAY_ONLY;
				case 124:return TOKEN_FISCAL_MONTH;
				case 125:return TOKEN_FISCAL_QUARTER;
				case 126:return TOKEN_FISCAL_YEAR;
				case 127:return TOKEN_HOUR_IN_DAY;
				case 128:return TOKEN_WEEK_IN_MONTH;
				case 129:return TOKEN_WEEK_IN_YEAR;
				case 130:return TOKEN_CONVERT_TIMEZONE;
				case 131:return TOKEN_YESTERDAY;
				case 132:return TOKEN_TODAY;
				case 133:return TOKEN_TOMORROW;
				case 134:return TOKEN_LAST_WEEK;
				case 135:return TOKEN_THIS_WEEK;
				case 136:return TOKEN_NEXT_WEEK;
				case 137:return TOKEN_LAST_MONTH;
				case 138:return TOKEN_THIS_MONTH;
				case 139:return TOKEN_NEXT_MONTH;
				case 140:return TOKEN_LAST_90_DAYS;
				case 141:return TOKEN_NEXT_90_DAYS;
				case 142:return TOKEN_LAST_N_DAYS_N;
				case 143:return TOKEN_NEXT_N_DAYS_N;
				case 144:return TOKEN_N_DAYS_AGO_N;
				case 145:return TOKEN_NEXT_N_WEEKS_N;
				case 146:return TOKEN_LAST_N_WEEKS_N;
				case 147:return TOKEN_N_WEEKS_AGO_N;
				case 148:return TOKEN_NEXT_N_MONTHS_N;
				case 149:return TOKEN_LAST_N_MONTHS_N;
				case 150:return TOKEN_N_MONTHS_AGO_N;
				case 151:return TOKEN_THIS_QUARTER;
				case 152:return TOKEN_LAST_QUARTER;
				case 153:return TOKEN_NEXT_QUARTER;
				case 154:return TOKEN_NEXT_N_QUARTERS_N;
				case 155:return TOKEN_LAST_N_QUARTERS_N;
				case 156:return TOKEN_N_QUARTERS_AGO_N;
				case 157:return TOKEN_THIS_YEAR;
				case 158:return TOKEN_LAST_YEAR;
				case 159:return TOKEN_NEXT_YEAR;
				case 160:return TOKEN_NEXT_N_YEARS_N;
				case 161:return TOKEN_LAST_N_YEARS_N;
				case 162:return TOKEN_N_YEARS_AGO_N;
				case 163:return TOKEN_THIS_FISCAL_QUARTER;
				case 164:return TOKEN_LAST_FISCAL_QUARTER;
				case 165:return TOKEN_NEXT_FISCAL_QUARTER;
				case 166:return TOKEN_NEXT_N_FISCAL_QUARTERS_N;
				case 167:return TOKEN_LAST_N_FISCAL_QUARTERS_N;
				case 168:return TOKEN_N_FISCAL_QUARTERS_AGO_N;
				case 169:return TOKEN_THIS_FISCAL_YEAR;
				case 170:return TOKEN_LAST_FISCAL_YEAR;
				case 171:return TOKEN_NEXT_FISCAL_YEAR;
				case 172:return TOKEN_NEXT_N_FISCAL_YEARS_N;
				case 173:return TOKEN_LAST_N_FISCAL_YEARS_N;
				case 174:return TOKEN_N_FISCAL_YEARS_AGO_N;
				case 175:return TOKEN_DateLiteral;
				case 176:return TOKEN_TimeLiteral;
				case 177:return TOKEN_DateTimeLiteral;
				case 178:return TOKEN_IntegralCurrencyLiteral;
				case 179:return TOKEN_FIND;
				case 180:return TOKEN_EMAIL;
				case 181:return TOKEN_NAME;
				case 182:return TOKEN_PHONE;
				case 183:return TOKEN_SIDEBAR;
				case 184:return TOKEN_FIELDS;
				case 185:return TOKEN_METADATA;
				case 186:return TOKEN_PRICEBOOKID;
				case 187:return TOKEN_NETWORK;
				case 188:return TOKEN_SNIPPET;
				case 189:return TOKEN_TARGET_LENGTH;
				case 190:return TOKEN_DIVISION;
				case 191:return TOKEN_RETURNING;
				case 192:return TOKEN_LISTVIEW;
				case 193:return TOKEN_FindLiteral;
				case 194:return TOKEN_FindLiteralAlt;
				case 195:return TOKEN_IntegerLiteral;
				case 196:return TOKEN_LongLiteral;
				case 197:return TOKEN_NumberLiteral;
				case 198:return TOKEN_BooleanLiteral;
				case 199:return TOKEN_StringLiteral;
				case 200:return TOKEN_NullLiteral;
				case 201:return TOKEN_LPAREN;
				case 202:return TOKEN_RPAREN;
				case 203:return TOKEN_LBRACE;
				case 204:return TOKEN_RBRACE;
				case 205:return TOKEN_LBRACK;
				case 206:return TOKEN_RBRACK;
				case 207:return TOKEN_SEMI;
				case 208:return TOKEN_COMMA;
				case 209:return TOKEN_DOT;
				case 210:return TOKEN_ASSIGN;
				case 211:return TOKEN_GT;
				case 212:return TOKEN_LT;
				case 213:return TOKEN_BANG;
				case 214:return TOKEN_TILDE;
				case 215:return TOKEN_QUESTIONDOT;
				case 216:return TOKEN_QUESTION;
				case 217:return TOKEN_COLON;
				case 218:return TOKEN_EQUAL;
				case 219:return TOKEN_TRIPLEEQUAL;
				case 220:return TOKEN_NOTEQUAL;
				case 221:return TOKEN_LESSANDGREATER;
				case 222:return TOKEN_TRIPLENOTEQUAL;
				case 223:return TOKEN_AND;
				case 224:return TOKEN_OR;
				case 225:return TOKEN_COAL;
				case 226:return TOKEN_INC;
				case 227:return TOKEN_DEC;
				case 228:return TOKEN_ADD;
				case 229:return TOKEN_SUB;
				case 230:return TOKEN_MUL;
				case 231:return TOKEN_DIV;
				case 232:return TOKEN_BITAND;
				case 233:return TOKEN_BITOR;
				case 234:return TOKEN_CARET;
				case 235:return TOKEN_MAPTO;
				case 236:return TOKEN_ADD_ASSIGN;
				case 237:return TOKEN_SUB_ASSIGN;
				case 238:return TOKEN_MUL_ASSIGN;
				case 239:return TOKEN_DIV_ASSIGN;
				case 240:return TOKEN_AND_ASSIGN;
				case 241:return TOKEN_OR_ASSIGN;
				case 242:return TOKEN_XOR_ASSIGN;
				case 243:return TOKEN_LSHIFT_ASSIGN;
				case 244:return TOKEN_RSHIFT_ASSIGN;
				case 245:return TOKEN_URSHIFT_ASSIGN;
				case 246:return TOKEN_ATSIGN;
				case 247:return TOKEN_Identifier;
				case 248:return TOKEN_WS;
				case 249:return TOKEN_DOC_COMMENT;
				case 250:return TOKEN_COMMENT;
				default:return null;
			}
		} else {
			switch (index){
				case 0:return apexFile;
				case 1:return triggerUnit;
				case 2:return triggerCase;
				case 3:return triggerBlock;
				case 4:return triggerBlockMember;
				case 5:return classUnit;
				case 6:return typeDeclaration;
				case 7:return classDeclaration;
				case 8:return enumDeclaration;
				case 9:return enumConstants;
				case 10:return interfaceDeclaration;
				case 11:return typeList;
				case 12:return classBody;
				case 13:return interfaceBody;
				case 14:return classBodyDeclaration;
				case 15:return modifier;
				case 16:return memberDeclaration;
				case 17:return triggerMemberDeclaration;
				case 18:return methodDeclaration;
				case 19:return constructorDeclaration;
				case 20:return fieldDeclaration;
				case 21:return propertyDeclaration;
				case 22:return interfaceMethodDeclaration;
				case 23:return variableDeclarators;
				case 24:return variableDeclarator;
				case 25:return arrayInitializer;
				case 26:return typeRef;
				case 27:return arraySubscripts;
				case 28:return typeName;
				case 29:return typeArguments;
				case 30:return formalParameters;
				case 31:return formalParameterList;
				case 32:return formalParameter;
				case 33:return qualifiedName;
				case 34:return literal;
				case 35:return annotation;
				case 36:return elementValuePairs;
				case 37:return elementValuePair;
				case 38:return elementValue;
				case 39:return elementValueArrayInitializer;
				case 40:return block;
				case 41:return localVariableDeclarationStatement;
				case 42:return localVariableDeclaration;
				case 43:return statement;
				case 44:return ifStatement;
				case 45:return switchStatement;
				case 46:return whenControl;
				case 47:return whenValue;
				case 48:return whenLiteral;
				case 49:return forStatement;
				case 50:return whileStatement;
				case 51:return doWhileStatement;
				case 52:return tryStatement;
				case 53:return returnStatement;
				case 54:return throwStatement;
				case 55:return breakStatement;
				case 56:return continueStatement;
				case 57:return accessLevel;
				case 58:return insertStatement;
				case 59:return updateStatement;
				case 60:return deleteStatement;
				case 61:return undeleteStatement;
				case 62:return upsertStatement;
				case 63:return mergeStatement;
				case 64:return runAsStatement;
				case 65:return expressionStatement;
				case 66:return propertyBlock;
				case 67:return getter;
				case 68:return setter;
				case 69:return catchClause;
				case 70:return finallyBlock;
				case 71:return forControl;
				case 72:return forInit;
				case 73:return enhancedForControl;
				case 74:return forUpdate;
				case 75:return parExpression;
				case 76:return expressionList;
				case 77:return expression;
				case 78:return primary;
				case 79:return methodCall;
				case 80:return dotMethodCall;
				case 81:return creator;
				case 82:return createdName;
				case 83:return idCreatedNamePair;
				case 84:return noRest;
				case 85:return classCreatorRest;
				case 86:return arrayCreatorRest;
				case 87:return mapCreatorRest;
				case 88:return mapCreatorRestPair;
				case 89:return setCreatorRest;
				case 90:return arguments;
				case 91:return soqlLiteral;
				case 92:return query;
				case 93:return subQuery;
				case 94:return selectList;
				case 95:return selectEntry;
				case 96:return fieldName;
				case 97:return fromNameList;
				case 98:return subFieldList;
				case 99:return subFieldEntry;
				case 100:return soqlFieldsParameter;
				case 101:return soqlFunction;
				case 102:return dateFieldName;
				case 103:return locationValue;
				case 104:return coordinateValue;
				case 105:return typeOf;
				case 106:return whenClause;
				case 107:return elseClause;
				case 108:return fieldNameList;
				case 109:return usingScope;
				case 110:return whereClause;
				case 111:return logicalExpression;
				case 112:return conditionalExpression;
				case 113:return fieldExpression;
				case 114:return comparisonOperator;
				case 115:return value;
				case 116:return valueList;
				case 117:return signedNumber;
				case 118:return withClause;
				case 119:return filteringExpression;
				case 120:return dataCategorySelection;
				case 121:return dataCategoryName;
				case 122:return filteringSelector;
				case 123:return groupByClause;
				case 124:return orderByClause;
				case 125:return fieldOrderList;
				case 126:return fieldOrder;
				case 127:return limitClause;
				case 128:return offsetClause;
				case 129:return allRowsClause;
				case 130:return forClauses;
				case 131:return boundExpression;
				case 132:return dateFormula;
				case 133:return signedInteger;
				case 134:return soqlId;
				case 135:return soslLiteral;
				case 136:return soslLiteralAlt;
				case 137:return soslClauses;
				case 138:return soslWithClause;
				case 139:return searchGroup;
				case 140:return fieldSpecList;
				case 141:return fieldSpec;
				case 142:return fieldList;
				case 143:return updateList;
				case 144:return updateType;
				case 145:return networkList;
				case 146:return soslId;
				case 147:return id;
				case 148:return anyId;
			default:return null;
		}
	}
}
}