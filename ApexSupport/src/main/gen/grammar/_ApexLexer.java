// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _ApexLexer.flex

package grammar;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import java.io.BufferedReader;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.wlk.ideaplugin.apexsupport.language.gen.psi.ApexTypes.*;


public class _ApexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_BLOCK_COMMENT = 2;
  public static final int STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\126\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00"+
    "\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00\4\u0100"+
    "\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600\1\u5700"+
    "\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00\45\u1f00"+
    "\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00\1\u6000"+
    "\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500\5\u1f00"+
    "\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00\1\u6b00"+
    "\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00\1\u6f00"+
    "\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200\u0b06\u1f00"+
    "\1\u7300\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\3\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\10\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\3\33\1\34"+
    "\7\33\1\35\16\33\1\36\1\37\1\40\1\41\1\42"+
    "\1\0\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\33\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\6\0"+
    "\1\3\32\0\1\1\11\0\1\100\12\0\1\100\4\0"+
    "\1\100\5\0\27\100\1\0\37\100\1\0\u01ca\100\4\0"+
    "\14\100\16\0\5\100\7\0\1\100\1\0\1\100\21\0"+
    "\165\100\1\0\2\100\2\0\4\100\1\0\1\100\6\0"+
    "\1\100\1\0\3\100\1\0\1\100\1\0\24\100\1\0"+
    "\123\100\1\0\213\100\1\0\255\100\1\0\46\100\2\0"+
    "\1\100\6\0\51\100\10\0\55\100\1\0\1\100\1\0"+
    "\2\100\1\0\2\100\1\0\1\100\10\0\33\100\4\0"+
    "\4\100\35\0\13\100\5\0\100\100\12\101\4\0\146\100"+
    "\1\0\10\100\2\0\12\100\1\0\6\100\12\101\3\100"+
    "\2\0\1\100\20\0\73\100\2\0\145\100\16\0\12\101"+
    "\54\100\4\0\1\100\2\0\1\100\2\0\56\100\22\0"+
    "\34\100\4\0\13\100\65\0\25\100\1\0\10\100\25\0"+
    "\17\100\1\0\201\100\2\0\12\101\1\0\23\100\1\0"+
    "\10\100\2\0\2\100\2\0\26\100\1\0\7\100\1\0"+
    "\1\100\3\0\4\100\2\0\11\100\2\0\2\100\2\0"+
    "\4\100\10\0\1\100\4\0\2\100\1\0\5\100\2\0"+
    "\12\101\2\100\12\0\1\100\1\0\1\100\2\0\3\100"+
    "\1\0\6\100\4\0\2\100\2\0\26\100\1\0\7\100"+
    "\1\0\2\100\1\0\2\100\1\0\2\100\2\0\1\100"+
    "\1\0\5\100\4\0\2\100\2\0\3\100\3\0\1\100"+
    "\7\0\4\100\1\0\1\100\7\0\12\101\6\100\13\0"+
    "\3\100\1\0\11\100\1\0\3\100\1\0\26\100\1\0"+
    "\7\100\1\0\2\100\1\0\5\100\2\0\12\100\1\0"+
    "\3\100\1\0\3\100\2\0\1\100\17\0\4\100\2\0"+
    "\12\101\11\0\7\100\1\0\3\100\1\0\10\100\2\0"+
    "\2\100\2\0\26\100\1\0\7\100\1\0\2\100\1\0"+
    "\5\100\2\0\11\100\2\0\2\100\2\0\3\100\10\0"+
    "\2\100\4\0\2\100\1\0\5\100\2\0\12\101\1\0"+
    "\1\100\20\0\2\100\1\0\6\100\3\0\3\100\1\0"+
    "\4\100\3\0\2\100\1\0\1\100\1\0\2\100\3\0"+
    "\2\100\3\0\3\100\3\0\14\100\4\0\5\100\3\0"+
    "\3\100\1\0\4\100\2\0\1\100\6\0\1\100\16\0"+
    "\12\101\20\0\15\100\1\0\3\100\1\0\27\100\1\0"+
    "\20\100\3\0\10\100\1\0\3\100\1\0\4\100\7\0"+
    "\2\100\1\0\3\100\5\0\4\100\2\0\12\101\20\0"+
    "\4\100\1\0\10\100\1\0\3\100\1\0\27\100\1\0"+
    "\12\100\1\0\5\100\2\0\11\100\1\0\3\100\1\0"+
    "\4\100\7\0\2\100\7\0\1\100\1\0\4\100\2\0"+
    "\12\101\1\0\2\100\15\0\4\100\1\0\10\100\1\0"+
    "\3\100\1\0\63\100\1\0\3\100\1\0\5\100\5\0"+
    "\4\100\7\0\5\100\2\0\12\101\12\0\6\100\2\0"+
    "\2\100\1\0\22\100\3\0\30\100\1\0\11\100\1\0"+
    "\1\100\2\0\7\100\3\0\1\100\4\0\6\100\1\0"+
    "\1\100\1\0\10\100\6\0\12\101\2\0\2\100\15\0"+
    "\72\100\5\0\17\100\1\0\12\101\47\0\2\100\1\0"+
    "\1\100\1\0\5\100\1\0\30\100\1\0\1\100\1\0"+
    "\27\100\2\0\5\100\1\0\1\100\1\0\6\100\2\0"+
    "\12\101\2\0\4\100\40\0\1\100\27\0\2\100\6\0"+
    "\12\101\13\0\1\100\1\0\1\100\1\0\1\100\4\0"+
    "\12\100\1\0\44\100\4\0\24\100\1\0\22\100\1\0"+
    "\44\100\11\0\1\100\71\0\100\100\12\101\6\0\100\100"+
    "\12\101\4\100\2\0\46\100\1\0\1\100\5\0\1\100"+
    "\2\0\53\100\1\0\115\100\1\0\4\100\2\0\7\100"+
    "\1\0\1\100\1\0\4\100\2\0\51\100\1\0\4\100"+
    "\2\0\41\100\1\0\4\100\2\0\7\100\1\0\1\100"+
    "\1\0\4\100\2\0\17\100\1\0\71\100\1\0\4\100"+
    "\2\0\103\100\2\0\3\100\40\0\20\100\20\0\126\100"+
    "\2\0\6\100\3\0\u016c\100\2\0\21\100\1\1\32\100"+
    "\5\0\113\100\3\0\13\100\7\0\15\100\1\0\7\100"+
    "\13\0\25\100\13\0\24\100\14\0\15\100\1\0\3\100"+
    "\1\0\2\100\14\0\124\100\3\0\1\100\4\0\2\100"+
    "\2\0\12\101\41\0\3\100\2\0\12\101\6\0\131\100"+
    "\7\0\53\100\5\0\106\100\12\0\37\100\1\0\14\100"+
    "\4\0\14\100\12\0\12\101\36\100\2\0\5\100\13\0"+
    "\54\100\4\0\32\100\6\0\12\101\46\0\34\100\4\0"+
    "\77\100\1\0\35\100\2\0\1\100\12\101\6\0\12\101"+
    "\15\0\1\100\10\0\17\100\101\0\114\100\4\0\12\101"+
    "\21\0\11\100\14\0\60\100\12\101\72\100\14\0\70\100"+
    "\10\0\12\101\3\0\3\100\12\101\44\100\2\0\11\100"+
    "\7\0\53\100\2\0\3\100\20\0\3\100\1\0\47\100"+
    "\5\0\372\100\1\0\33\100\2\0\6\100\2\0\46\100"+
    "\2\0\6\100\2\0\10\100\1\0\1\100\1\0\1\100"+
    "\1\0\1\100\1\0\37\100\2\0\65\100\1\0\7\100"+
    "\1\0\1\100\3\0\3\100\1\0\7\100\3\0\4\100"+
    "\2\0\6\100\4\0\15\100\5\0\3\100\1\0\7\100"+
    "\3\0\13\1\35\0\2\3\5\0\1\1\17\0\2\100"+
    "\23\0\1\100\12\0\1\1\21\0\1\100\15\0\1\100"+
    "\20\0\15\100\63\0\41\100\21\0\1\100\4\0\1\100"+
    "\2\0\12\100\1\0\1\100\3\0\5\100\6\0\1\100"+
    "\1\0\1\100\1\0\1\100\1\0\4\100\1\0\13\100"+
    "\2\0\4\100\5\0\5\100\4\0\1\100\21\0\51\100"+
    "\u022d\0\64\100\26\0\57\100\1\0\57\100\1\0\205\100"+
    "\6\0\11\100\14\0\46\100\1\0\1\100\5\0\1\100"+
    "\2\0\70\100\7\0\1\100\17\0\30\100\11\0\7\100"+
    "\1\0\7\100\1\0\7\100\1\0\7\100\1\0\7\100"+
    "\1\0\7\100\1\0\7\100\1\0\7\100\1\0\40\100"+
    "\57\0\1\100\320\0\1\1\4\0\3\100\31\0\17\100"+
    "\1\0\5\100\2\0\5\100\4\0\126\100\2\0\2\100"+
    "\2\0\3\100\1\0\132\100\1\0\4\100\5\0\53\100"+
    "\1\0\136\100\21\0\33\100\65\0\306\100\112\0\215\100"+
    "\103\0\56\100\2\0\15\100\3\0\20\100\12\101\2\100"+
    "\24\0\63\100\1\0\12\100\1\0\163\100\45\0\11\100"+
    "\2\0\147\100\2\0\65\100\2\0\5\100\60\0\61\100"+
    "\30\0\64\100\14\0\106\100\12\0\12\101\6\0\30\100"+
    "\3\0\1\100\1\0\3\100\12\101\44\100\2\0\44\100"+
    "\14\0\35\100\3\0\101\100\16\0\1\100\12\101\6\0"+
    "\20\100\12\101\5\100\1\0\67\100\11\0\16\100\2\0"+
    "\12\101\6\0\27\100\3\0\111\100\30\0\3\100\2\0"+
    "\20\100\2\0\5\100\12\0\6\100\2\0\6\100\2\0"+
    "\6\100\11\0\7\100\1\0\7\100\1\0\53\100\1\0"+
    "\14\100\10\0\173\100\1\0\2\100\2\0\12\101\6\0"+
    "\244\100\14\0\27\100\4\0\61\100\4\0\u0100\102\156\100"+
    "\2\0\152\100\46\0\7\100\14\0\5\100\5\0\14\100"+
    "\1\0\15\100\1\0\5\100\1\0\1\100\1\0\2\100"+
    "\1\0\2\100\1\0\154\100\41\0\153\100\22\0\100\100"+
    "\2\0\66\100\50\0\14\100\4\0\20\100\20\0\20\100"+
    "\3\0\2\100\30\0\3\100\40\0\5\100\1\0\207\100"+
    "\23\0\12\101\7\0\32\100\4\0\1\100\1\0\32\100"+
    "\13\0\131\100\3\0\6\100\2\0\6\100\2\0\6\100"+
    "\2\0\3\100\43\0\14\100\1\0\32\100\1\0\23\100"+
    "\1\0\2\100\1\0\17\100\2\0\16\100\42\0\173\100"+
    "\105\0\65\100\210\0\1\100\202\0\35\100\3\0\61\100"+
    "\17\0\1\100\37\0\40\100\15\0\36\100\5\0\53\100"+
    "\5\0\36\100\2\0\44\100\4\0\10\100\1\0\5\100"+
    "\52\0\236\100\2\0\12\101\6\0\44\100\4\0\44\100"+
    "\4\0\50\100\10\0\64\100\234\0\67\100\11\0\26\100"+
    "\12\0\10\100\230\0\6\100\2\0\1\100\1\0\54\100"+
    "\1\0\2\100\3\0\1\100\2\0\27\100\12\0\27\100"+
    "\11\0\37\100\101\0\23\100\1\0\2\100\12\0\26\100"+
    "\12\0\32\100\106\0\70\100\6\0\2\100\100\0\4\100"+
    "\1\0\2\100\5\0\10\100\1\0\3\100\1\0\35\100"+
    "\2\0\3\100\4\0\1\100\40\0\35\100\3\0\35\100"+
    "\43\0\10\100\1\0\36\100\31\0\66\100\12\0\26\100"+
    "\12\0\23\100\15\0\22\100\156\0\111\100\67\0\63\100"+
    "\15\0\63\100\15\0\50\100\10\0\12\101\306\0\35\100"+
    "\12\0\1\100\10\0\41\100\217\0\27\100\11\0\107\100"+
    "\37\0\12\101\17\0\74\100\25\0\31\100\7\0\12\101"+
    "\6\0\65\100\1\0\12\101\4\0\3\100\11\0\44\100"+
    "\2\0\1\100\11\0\105\100\4\0\4\100\3\0\12\101"+
    "\1\100\1\0\1\100\43\0\22\100\1\0\45\100\6\0"+
    "\1\100\101\0\7\100\1\0\1\100\1\0\4\100\1\0"+
    "\17\100\1\0\12\100\7\0\73\100\5\0\12\101\6\0"+
    "\4\100\1\0\10\100\2\0\2\100\2\0\26\100\1\0"+
    "\7\100\1\0\2\100\1\0\5\100\1\0\12\100\2\0"+
    "\2\100\2\0\3\100\2\0\1\100\6\0\1\100\5\0"+
    "\7\100\2\0\7\100\3\0\5\100\213\0\113\100\5\0"+
    "\12\101\4\0\2\100\40\0\106\100\1\0\1\100\10\0"+
    "\12\101\246\0\66\100\2\0\11\100\27\0\6\100\42\0"+
    "\101\100\3\0\1\100\13\0\12\101\46\0\71\100\7\0"+
    "\12\101\66\0\33\100\2\0\17\100\4\0\12\101\306\0"+
    "\73\100\145\0\100\100\12\101\25\0\1\100\240\0\10\100"+
    "\2\0\56\100\2\0\10\100\1\0\2\100\33\0\77\100"+
    "\10\0\1\100\10\0\112\100\3\0\1\100\42\0\71\100"+
    "\7\0\11\100\1\0\55\100\1\0\11\100\17\0\12\101"+
    "\30\0\36\100\2\0\26\100\1\0\16\100\111\0\7\100"+
    "\1\0\2\100\1\0\54\100\3\0\1\100\1\0\2\100"+
    "\1\0\11\100\10\0\12\101\6\0\6\100\1\0\2\100"+
    "\1\0\45\100\1\0\2\100\1\0\6\100\7\0\12\101"+
    "\u0136\0\27\100\11\0\232\100\146\0\157\100\21\0\304\100"+
    "\274\0\57\100\321\0\107\100\271\0\71\100\7\0\37\100"+
    "\1\0\12\101\146\0\36\100\2\0\5\100\13\0\67\100"+
    "\11\0\4\100\14\0\12\101\11\0\25\100\5\0\23\100"+
    "\260\0\100\100\200\0\113\100\4\0\71\100\7\0\21\100"+
    "\100\0\2\100\1\0\1\100\34\0\370\100\10\0\363\100"+
    "\15\0\37\100\61\0\3\100\21\0\4\100\10\0\u018c\100"+
    "\4\0\153\100\5\0\15\100\3\0\11\100\7\0\12\100"+
    "\3\0\2\100\306\0\5\100\3\0\6\100\10\0\10\100"+
    "\2\0\7\100\36\0\4\100\224\0\3\100\273\0\125\100"+
    "\1\0\107\100\1\0\2\100\2\0\1\100\2\0\2\100"+
    "\2\0\4\100\1\0\14\100\1\0\1\100\1\0\7\100"+
    "\1\0\101\100\1\0\4\100\2\0\10\100\1\0\7\100"+
    "\1\0\34\100\1\0\4\100\1\0\5\100\1\0\1\100"+
    "\3\0\7\100\1\0\u0154\100\2\0\31\100\1\0\31\100"+
    "\1\0\37\100\1\0\31\100\1\0\37\100\1\0\31\100"+
    "\1\0\37\100\1\0\31\100\1\0\37\100\1\0\31\100"+
    "\1\0\10\100\2\0\62\101\67\100\4\0\62\100\10\0"+
    "\1\100\16\0\1\100\26\0\5\100\1\0\17\100\120\0"+
    "\7\100\1\0\21\100\2\0\7\100\1\0\2\100\1\0"+
    "\5\100\325\0\55\100\3\0\16\100\2\0\12\101\4\0"+
    "\1\100\u0171\0\60\100\12\101\6\0\305\100\13\0\7\100"+
    "\51\0\114\100\4\0\12\101\246\0\4\100\1\0\33\100"+
    "\1\0\2\100\1\0\1\100\2\0\1\100\1\0\12\100"+
    "\1\0\4\100\1\0\1\100\1\0\1\100\6\0\1\100"+
    "\4\0\1\100\1\0\1\100\1\0\1\100\1\0\3\100"+
    "\1\0\2\100\1\0\1\100\2\0\1\100\1\0\1\100"+
    "\1\0\1\100\1\0\1\100\1\0\1\100\1\0\2\100"+
    "\1\0\1\100\2\0\4\100\1\0\7\100\1\0\4\100"+
    "\1\0\4\100\1\0\1\100\1\0\12\100\1\0\21\100"+
    "\5\0\3\100\1\0\5\100\1\0\21\100\164\0\32\100"+
    "\6\0\32\100\6\0\32\100\166\0\327\100\51\0\65\100"+
    "\13\0\336\100\2\0\u0182\100\16\0\u0131\100\37\0\36\100"+
    "\342\0\360\100\20\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\25\25\1\31\1\32\1\33\1\34\3\35\1\36"+
    "\2\37\1\40\1\0\1\41\1\42\1\43\1\0\1\44"+
    "\1\45\1\46\1\47\1\50\1\0\1\51\1\52\1\53"+
    "\1\0\1\15\1\54\1\0\1\55\1\56\1\57\1\0"+
    "\1\60\1\61\1\62\4\25\1\63\1\64\3\25\1\65"+
    "\7\25\1\66\14\25\1\67\1\25\1\70\13\25\1\71"+
    "\1\72\36\25\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110"+
    "\1\0\1\111\1\52\1\15\1\0\1\112\1\113\1\114"+
    "\1\0\3\25\1\115\1\116\1\117\1\120\22\25\1\121"+
    "\7\25\1\122\2\25\1\123\15\25\1\124\1\125\2\25"+
    "\1\126\10\25\1\127\1\25\1\130\17\25\1\131\4\25"+
    "\1\132\15\25\1\133\17\25\1\134\1\15\1\0\1\135"+
    "\15\25\1\136\1\25\1\137\2\25\1\140\2\25\1\141"+
    "\1\25\1\142\4\25\1\143\3\25\1\144\13\25\1\145"+
    "\1\146\1\25\1\147\10\25\1\150\2\25\1\151\13\25"+
    "\1\152\15\25\1\153\1\154\13\25\1\155\1\25\1\156"+
    "\1\25\1\157\2\25\1\160\2\25\1\161\1\25\1\0"+
    "\1\15\1\0\1\162\1\25\1\163\1\25\1\164\1\165"+
    "\1\25\1\166\1\25\1\167\2\25\1\170\6\25\1\171"+
    "\3\25\1\172\1\173\4\25\1\174\11\25\1\175\1\25"+
    "\1\176\11\25\1\177\1\25\1\200\1\25\1\201\7\25"+
    "\1\202\7\25\1\203\5\25\1\204\1\205\12\25\1\206"+
    "\4\25\1\207\1\210\2\25\2\0\2\25\1\211\5\25"+
    "\1\212\2\25\1\213\4\25\1\214\2\25\1\215\1\25"+
    "\1\216\1\25\1\217\4\25\1\220\31\25\1\221\4\25"+
    "\1\222\1\25\1\223\1\224\1\25\1\225\4\25\1\226"+
    "\1\227\1\230\14\25\1\231\1\25\1\232\1\233\7\25"+
    "\2\0\14\25\1\234\1\235\30\25\1\236\11\25\1\237"+
    "\4\25\1\240\1\241\1\242\1\25\1\0\10\25\1\243"+
    "\3\25\1\244\3\25\1\245\2\25\1\246\1\25\2\0"+
    "\1\25\1\247\1\25\1\250\1\251\6\25\1\252\1\253"+
    "\1\254\1\255\4\25\1\256\2\25\1\257\17\25\1\260"+
    "\1\261\22\25\1\262\5\25\1\263\1\0\10\25\1\264"+
    "\1\265\1\25\1\266\1\25\1\267\3\25\1\0\2\270"+
    "\1\0\16\25\1\271\1\25\1\272\12\25\1\273\1\274"+
    "\20\25\1\275\1\276\1\25\1\277\1\300\1\301\1\25"+
    "\1\0\6\25\1\302\1\303\1\304\1\305\3\25\1\306"+
    "\1\307\17\25\1\310\1\311\2\25\1\312\7\25\1\313"+
    "\10\25\1\314\11\25\1\0\2\25\1\315\1\25\1\316"+
    "\1\25\1\317\2\25\1\0\10\25\1\320\1\321\2\25"+
    "\1\322\1\323\1\324\2\25\1\325\12\25\1\326\1\327"+
    "\2\25\1\330\6\25\1\331\1\25\1\0\1\332\5\25"+
    "\1\0\7\25\1\333\1\334\1\25\1\335\4\25\1\336"+
    "\1\337\1\340\2\25\1\341\1\25\1\342\4\25\1\343"+
    "\1\344\1\345\1\25\1\346\2\25\1\347\1\25\1\350"+
    "\1\0\3\25\1\351\7\25\1\352\7\25\1\353\2\25"+
    "\1\354\2\25\1\355\1\0\1\356\1\357\3\25\1\360"+
    "\1\361\6\25\1\362\7\25\1\0\1\25\1\363\1\364"+
    "\4\25\1\365\6\25\1\366\3\25\1\0\1\367\1\25"+
    "\1\370\5\25\1\371\4\25\1\372\1\0\10\25\1\373"+
    "\1\25\1\0\4\25\1\374\4\25\1\0\1\375\1\25"+
    "\1\376\1\25\1\377\1\25\1\u0100\1\u0101\2\u0102\1\0"+
    "\4\25\1\u0103\1\25\1\u0104\1\u0105";

  private static int [] zzUnpackAction() {
    int [] result = new int[1116];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u01d5\0\u0218\0\u025b\0\u01d5\0\u029e\0\u02e1\0\u0324\0\u0367"+
    "\0\u01d5\0\u01d5\0\u03aa\0\u03ed\0\u0430\0\u0473\0\u01d5\0\u04b6"+
    "\0\u01d5\0\u01d5\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605\0\u0648"+
    "\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\u081d\0\u0860"+
    "\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35\0\u0a78"+
    "\0\u01d5\0\u0abb\0\u01d5\0\u01d5\0\u01d5\0\u0afe\0\u0b41\0\u0b84"+
    "\0\u01d5\0\u0bc7\0\u01d5\0\u0c0a\0\u0c4d\0\u01d5\0\u01d5\0\u0c90"+
    "\0\u01d5\0\u01d5\0\u01d5\0\u01d5\0\u01d5\0\u0cd3\0\u01d5\0\u0d16"+
    "\0\u01d5\0\u02e1\0\u0d59\0\u01d5\0\u0d9c\0\u01d5\0\u0ddf\0\u01d5"+
    "\0\u0e22\0\u01d5\0\u01d5\0\u01d5\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e"+
    "\0\u0f71\0\u04b6\0\u0fb4\0\u0ff7\0\u103a\0\u04b6\0\u107d\0\u10c0"+
    "\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f\0\u04b6\0\u1252\0\u1295"+
    "\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad"+
    "\0\u14f0\0\u1533\0\u04b6\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682"+
    "\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857\0\u189a"+
    "\0\u04b6\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f"+
    "\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u1c87"+
    "\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f"+
    "\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7"+
    "\0\u01d5\0\u01d5\0\u01d5\0\u01d5\0\u01d5\0\u01d5\0\u01d5\0\u01d5"+
    "\0\u01d5\0\u01d5\0\u01d5\0\u01d5\0\u01d5\0\u01d5\0\u20fa\0\u01d5"+
    "\0\u01d5\0\u213d\0\u2180\0\u01d5\0\u01d5\0\u01d5\0\u21c3\0\u2206"+
    "\0\u2249\0\u228c\0\u04b6\0\u04b6\0\u04b6\0\u04b6\0\u22cf\0\u2312"+
    "\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24e7\0\u252a"+
    "\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679\0\u26bc\0\u26ff\0\u2742"+
    "\0\u04b6\0\u2785\0\u27c8\0\u280b\0\u284e\0\u2891\0\u28d4\0\u2917"+
    "\0\u295a\0\u299d\0\u29e0\0\u04b6\0\u2a23\0\u2a66\0\u2aa9\0\u2aec"+
    "\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04"+
    "\0\u2d47\0\u04b6\0\u04b6\0\u2d8a\0\u2dcd\0\u04b6\0\u2e10\0\u2e53"+
    "\0\u2e96\0\u2ed9\0\u2f1c\0\u2f5f\0\u2fa2\0\u2fe5\0\u04b6\0\u3028"+
    "\0\u04b6\0\u306b\0\u30ae\0\u30f1\0\u3134\0\u3177\0\u31ba\0\u31fd"+
    "\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c\0\u338f\0\u33d2\0\u3415"+
    "\0\u04b6\0\u3458\0\u349b\0\u34de\0\u3521\0\u04b6\0\u3564\0\u35a7"+
    "\0\u35ea\0\u362d\0\u3670\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u37bf"+
    "\0\u3802\0\u3845\0\u3888\0\u04b6\0\u38cb\0\u390e\0\u3951\0\u3994"+
    "\0\u39d7\0\u3a1a\0\u3a5d\0\u3aa0\0\u3ae3\0\u3b26\0\u3b69\0\u3bac"+
    "\0\u3bef\0\u3c32\0\u3c75\0\u01d5\0\u3cb8\0\u3cfb\0\u01d5\0\u3d3e"+
    "\0\u3d81\0\u3dc4\0\u3e07\0\u3e4a\0\u3e8d\0\u3ed0\0\u3f13\0\u3f56"+
    "\0\u3f99\0\u3fdc\0\u401f\0\u4062\0\u04b6\0\u40a5\0\u04b6\0\u40e8"+
    "\0\u412b\0\u04b6\0\u416e\0\u41b1\0\u04b6\0\u41f4\0\u04b6\0\u4237"+
    "\0\u427a\0\u42bd\0\u4300\0\u04b6\0\u4343\0\u4386\0\u43c9\0\u04b6"+
    "\0\u440c\0\u444f\0\u4492\0\u44d5\0\u4518\0\u455b\0\u459e\0\u45e1"+
    "\0\u4624\0\u4667\0\u46aa\0\u46ed\0\u04b6\0\u4730\0\u4773\0\u47b6"+
    "\0\u47f9\0\u483c\0\u487f\0\u48c2\0\u4905\0\u4948\0\u498b\0\u04b6"+
    "\0\u49ce\0\u4a11\0\u4a54\0\u4a97\0\u4ada\0\u4b1d\0\u4b60\0\u4ba3"+
    "\0\u4be6\0\u4c29\0\u4c6c\0\u4caf\0\u4cf2\0\u4d35\0\u04b6\0\u4d78"+
    "\0\u4dbb\0\u4dfe\0\u4e41\0\u4e84\0\u4ec7\0\u4f0a\0\u4f4d\0\u4f90"+
    "\0\u4fd3\0\u5016\0\u5059\0\u509c\0\u04b6\0\u50df\0\u5122\0\u5165"+
    "\0\u51a8\0\u51eb\0\u522e\0\u5271\0\u52b4\0\u52f7\0\u533a\0\u537d"+
    "\0\u53c0\0\u5403\0\u5446\0\u5489\0\u54cc\0\u04b6\0\u550f\0\u5552"+
    "\0\u04b6\0\u5595\0\u55d8\0\u561b\0\u565e\0\u56a1\0\u56e4\0\u5727"+
    "\0\u576a\0\u57ad\0\u04b6\0\u57f0\0\u04b6\0\u04b6\0\u5833\0\u04b6"+
    "\0\u5876\0\u04b6\0\u58b9\0\u58fc\0\u593f\0\u5982\0\u59c5\0\u5a08"+
    "\0\u5a4b\0\u5a8e\0\u5ad1\0\u04b6\0\u5b14\0\u5b57\0\u5b9a\0\u5bdd"+
    "\0\u04b6\0\u5c20\0\u5c63\0\u5ca6\0\u5ce9\0\u5d2c\0\u5d6f\0\u5db2"+
    "\0\u5df5\0\u5e38\0\u5e7b\0\u5ebe\0\u5f01\0\u5f44\0\u5f87\0\u04b6"+
    "\0\u5fca\0\u04b6\0\u600d\0\u6050\0\u6093\0\u60d6\0\u6119\0\u615c"+
    "\0\u619f\0\u61e2\0\u6225\0\u04b6\0\u6268\0\u04b6\0\u62ab\0\u04b6"+
    "\0\u62ee\0\u6331\0\u6374\0\u63b7\0\u63fa\0\u643d\0\u6480\0\u04b6"+
    "\0\u64c3\0\u6506\0\u6549\0\u658c\0\u65cf\0\u6612\0\u6655\0\u04b6"+
    "\0\u6698\0\u66db\0\u671e\0\u6761\0\u67a4\0\u04b6\0\u04b6\0\u67e7"+
    "\0\u682a\0\u686d\0\u68b0\0\u68f3\0\u6936\0\u6979\0\u69bc\0\u69ff"+
    "\0\u6a42\0\u04b6\0\u6a85\0\u6ac8\0\u6b0b\0\u6b4e\0\u04b6\0\u04b6"+
    "\0\u6b91\0\u6bd4\0\u6c17\0\u6c5a\0\u6c9d\0\u6ce0\0\u04b6\0\u6d23"+
    "\0\u6d66\0\u6da9\0\u6dec\0\u6e2f\0\u04b6\0\u6e72\0\u6eb5\0\u04b6"+
    "\0\u6ef8\0\u6f3b\0\u6f7e\0\u6fc1\0\u04b6\0\u7004\0\u7047\0\u04b6"+
    "\0\u708a\0\u04b6\0\u70cd\0\u04b6\0\u7110\0\u7153\0\u7196\0\u71d9"+
    "\0\u04b6\0\u721c\0\u725f\0\u72a2\0\u72e5\0\u7328\0\u736b\0\u73ae"+
    "\0\u73f1\0\u7434\0\u7477\0\u74ba\0\u74fd\0\u7540\0\u7583\0\u75c6"+
    "\0\u7609\0\u764c\0\u768f\0\u76d2\0\u7715\0\u7758\0\u779b\0\u77de"+
    "\0\u7821\0\u7864\0\u04b6\0\u78a7\0\u78ea\0\u792d\0\u7970\0\u04b6"+
    "\0\u79b3\0\u79f6\0\u04b6\0\u7a39\0\u04b6\0\u7a7c\0\u7abf\0\u7b02"+
    "\0\u7b45\0\u04b6\0\u04b6\0\u7b88\0\u7bcb\0\u7c0e\0\u7c51\0\u7c94"+
    "\0\u7cd7\0\u7d1a\0\u7d5d\0\u7da0\0\u7de3\0\u7e26\0\u7e69\0\u7eac"+
    "\0\u04b6\0\u7eef\0\u04b6\0\u04b6\0\u7f32\0\u7f75\0\u7fb8\0\u7ffb"+
    "\0\u803e\0\u8081\0\u80c4\0\u8107\0\u814a\0\u818d\0\u81d0\0\u8213"+
    "\0\u8256\0\u8299\0\u82dc\0\u831f\0\u8362\0\u83a5\0\u83e8\0\u842b"+
    "\0\u846e\0\u04b6\0\u04b6\0\u84b1\0\u84f4\0\u8537\0\u857a\0\u85bd"+
    "\0\u8600\0\u8643\0\u8686\0\u86c9\0\u870c\0\u874f\0\u8792\0\u87d5"+
    "\0\u8818\0\u885b\0\u889e\0\u88e1\0\u8924\0\u8967\0\u89aa\0\u89ed"+
    "\0\u8a30\0\u8a73\0\u8ab6\0\u04b6\0\u8af9\0\u8b3c\0\u8b7f\0\u8bc2"+
    "\0\u8c05\0\u8c48\0\u8c8b\0\u8cce\0\u8d11\0\u04b6\0\u8d54\0\u8d97"+
    "\0\u8dda\0\u8e1d\0\u04b6\0\u04b6\0\u04b6\0\u8e60\0\u8ea3\0\u8ee6"+
    "\0\u8f29\0\u8f6c\0\u8faf\0\u8ff2\0\u9035\0\u9078\0\u90bb\0\u04b6"+
    "\0\u90fe\0\u9141\0\u9184\0\u04b6\0\u91c7\0\u920a\0\u924d\0\u04b6"+
    "\0\u9290\0\u92d3\0\u04b6\0\u9316\0\u9359\0\u939c\0\u93df\0\u04b6"+
    "\0\u9422\0\u04b6\0\u04b6\0\u9465\0\u94a8\0\u94eb\0\u952e\0\u9571"+
    "\0\u95b4\0\u04b6\0\u04b6\0\u04b6\0\u04b6\0\u95f7\0\u963a\0\u967d"+
    "\0\u96c0\0\u04b6\0\u9703\0\u9746\0\u04b6\0\u9789\0\u97cc\0\u980f"+
    "\0\u9852\0\u9895\0\u98d8\0\u991b\0\u995e\0\u99a1\0\u99e4\0\u9a27"+
    "\0\u9a6a\0\u9aad\0\u9af0\0\u9b33\0\u04b6\0\u04b6\0\u9b76\0\u9bb9"+
    "\0\u9bfc\0\u9c3f\0\u9c82\0\u9cc5\0\u9d08\0\u9d4b\0\u9d8e\0\u9dd1"+
    "\0\u9e14\0\u9e57\0\u9e9a\0\u9edd\0\u9f20\0\u9f63\0\u9fa6\0\u9fe9"+
    "\0\u04b6\0\ua02c\0\ua06f\0\ua0b2\0\ua0f5\0\ua138\0\u04b6\0\ua17b"+
    "\0\ua1be\0\ua201\0\ua244\0\ua287\0\ua2ca\0\ua30d\0\ua350\0\ua393"+
    "\0\u04b6\0\u04b6\0\ua3d6\0\u04b6\0\ua419\0\u04b6\0\ua45c\0\ua49f"+
    "\0\ua4e2\0\ua525\0\ua568\0\u01d5\0\ua568\0\ua5ab\0\ua5ee\0\ua631"+
    "\0\ua674\0\ua6b7\0\ua6fa\0\ua73d\0\ua780\0\ua7c3\0\ua806\0\ua849"+
    "\0\ua88c\0\ua8cf\0\ua912\0\u04b6\0\ua955\0\u04b6\0\ua998\0\ua9db"+
    "\0\uaa1e\0\uaa61\0\uaaa4\0\uaae7\0\uab2a\0\uab6d\0\uabb0\0\uabf3"+
    "\0\u04b6\0\u04b6\0\uac36\0\uac79\0\uacbc\0\uacff\0\uad42\0\uad85"+
    "\0\uadc8\0\uae0b\0\uae4e\0\uae91\0\uaed4\0\uaf17\0\uaf5a\0\uaf9d"+
    "\0\uafe0\0\ub023\0\u04b6\0\u04b6\0\ub066\0\u04b6\0\u04b6\0\u04b6"+
    "\0\ub0a9\0\ub0ec\0\ub12f\0\ub172\0\ub1b5\0\ub1f8\0\ub23b\0\ub27e"+
    "\0\u04b6\0\u04b6\0\u04b6\0\u04b6\0\ub2c1\0\ub304\0\ub347\0\u04b6"+
    "\0\ub38a\0\ub3cd\0\ub410\0\ub453\0\ub496\0\ub4d9\0\ub51c\0\ub55f"+
    "\0\ub5a2\0\ub5e5\0\ub628\0\ub66b\0\ub6ae\0\ub6f1\0\ub734\0\ub777"+
    "\0\u04b6\0\u04b6\0\ub7ba\0\ub7fd\0\u04b6\0\ub840\0\ub883\0\ub8c6"+
    "\0\ub909\0\ub94c\0\ub98f\0\ub9d2\0\u04b6\0\uba15\0\uba58\0\uba9b"+
    "\0\ubade\0\ubb21\0\ubb64\0\ubba7\0\ubbea\0\u04b6\0\ubc2d\0\ubc70"+
    "\0\ubcb3\0\ubcf6\0\ubd39\0\ubd7c\0\ubdbf\0\ube02\0\ube45\0\ube88"+
    "\0\ubecb\0\ubf0e\0\u04b6\0\ubf51\0\u04b6\0\ubf94\0\u04b6\0\ubfd7"+
    "\0\uc01a\0\uc05d\0\uc0a0\0\uc0e3\0\uc126\0\uc169\0\uc1ac\0\uc1ef"+
    "\0\uc232\0\uc275\0\u04b6\0\u04b6\0\uc2b8\0\uc2fb\0\u04b6\0\u04b6"+
    "\0\u04b6\0\uc33e\0\uc381\0\u04b6\0\uc3c4\0\uc407\0\uc44a\0\uc48d"+
    "\0\uc4d0\0\uc513\0\uc556\0\uc599\0\uc5dc\0\uc61f\0\u04b6\0\u04b6"+
    "\0\uc662\0\uc6a5\0\u04b6\0\uc6e8\0\uc72b\0\uc76e\0\uc7b1\0\uc7f4"+
    "\0\uc837\0\u04b6\0\uc87a\0\uc8bd\0\u04b6\0\uc900\0\uc943\0\uc986"+
    "\0\uc9c9\0\uca0c\0\uca4f\0\uca92\0\ucad5\0\ucb18\0\ucb5b\0\ucb9e"+
    "\0\ucbe1\0\ucc24\0\u04b6\0\u04b6\0\ucc67\0\u04b6\0\uccaa\0\ucced"+
    "\0\ucd30\0\ucd73\0\u04b6\0\u04b6\0\u04b6\0\ucdb6\0\ucdf9\0\u04b6"+
    "\0\uce3c\0\u04b6\0\uce7f\0\ucec2\0\ucf05\0\ucf48\0\u04b6\0\u04b6"+
    "\0\u04b6\0\ucf8b\0\u01d5\0\ucfce\0\ud011\0\u04b6\0\ud054\0\u04b6"+
    "\0\ud097\0\ud0da\0\ud11d\0\ud160\0\u04b6\0\ud1a3\0\ud1e6\0\ud229"+
    "\0\ud26c\0\ud2af\0\ud2f2\0\ud335\0\u04b6\0\ud378\0\ud3bb\0\ud3fe"+
    "\0\ud441\0\ud484\0\ud4c7\0\ud50a\0\u04b6\0\ud54d\0\ud590\0\u04b6"+
    "\0\ud5d3\0\ud616\0\u04b6\0\ud659\0\u04b6\0\u04b6\0\ud69c\0\ud6df"+
    "\0\ud722\0\u04b6\0\u04b6\0\ud765\0\ud7a8\0\ud7eb\0\ud82e\0\ud871"+
    "\0\ud8b4\0\u04b6\0\ud8f7\0\ud93a\0\ud97d\0\ud9c0\0\uda03\0\uda46"+
    "\0\uda89\0\udacc\0\udb0f\0\u04b6\0\u04b6\0\udb52\0\udb95\0\udbd8"+
    "\0\udc1b\0\u04b6\0\udc5e\0\udca1\0\udce4\0\udd27\0\udd6a\0\uddad"+
    "\0\u04b6\0\uddf0\0\ude33\0\ude76\0\udeb9\0\u04b6\0\udefc\0\u04b6"+
    "\0\udf3f\0\udf82\0\udfc5\0\ue008\0\ue04b\0\u04b6\0\ue08e\0\ue0d1"+
    "\0\ue114\0\ue157\0\u04b6\0\ue19a\0\ue1dd\0\ue220\0\ue263\0\ue2a6"+
    "\0\ue2e9\0\ue32c\0\ue36f\0\ue3b2\0\u04b6\0\ue3f5\0\ue438\0\ue47b"+
    "\0\ue4be\0\ue501\0\ue544\0\u04b6\0\ue587\0\ue5ca\0\ue60d\0\ue650"+
    "\0\ue693\0\u04b6\0\ue6d6\0\u04b6\0\ue719\0\u04b6\0\ue75c\0\u04b6"+
    "\0\u04b6\0\ue79f\0\u01d5\0\ue79f\0\ue7e2\0\ue825\0\ue868\0\ue8ab"+
    "\0\u04b6\0\ue8ee\0\u04b6\0\u04b6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1116];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\4\4\1\5\1\0\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\3\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\3\30\1\31"+
    "\1\0\1\32\1\33\1\30\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\30\1\45\1\46"+
    "\1\47\1\50\1\51\1\30\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\30\1\60\1\30\1\61\1\62\1\63"+
    "\1\64\3\0\13\65\1\66\4\65\1\67\62\65\2\70"+
    "\1\71\1\70\1\72\1\70\1\0\1\70\1\73\26\70"+
    "\1\74\43\70\1\0\4\4\125\0\1\75\62\0\1\76"+
    "\17\0\1\77\74\0\3\100\7\0\3\100\4\0\32\100"+
    "\4\0\2\100\133\0\1\101\67\0\1\102\12\0\1\103"+
    "\71\0\1\104\10\0\1\105\74\0\3\106\72\0\1\107"+
    "\4\0\1\110\6\0\1\111\72\0\1\112\1\0\3\113"+
    "\11\0\1\114\17\0\1\114\53\0\1\115\1\0\1\116"+
    "\101\0\1\117\1\120\102\0\1\121\71\0\1\122\11\0"+
    "\1\123\72\0\3\30\7\0\3\30\4\0\32\30\36\0"+
    "\1\124\74\0\3\30\7\0\3\30\4\0\2\30\1\125"+
    "\3\30\1\126\4\30\1\127\1\30\1\130\4\30\1\131"+
    "\1\132\1\30\1\133\4\30\30\0\3\30\7\0\3\30"+
    "\4\0\5\30\1\134\13\30\1\135\6\30\1\136\1\30"+
    "\30\0\3\30\7\0\3\30\4\0\1\30\1\137\11\30"+
    "\1\140\2\30\1\141\5\30\1\142\5\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\30\1\143\3\30\1\144\3\30"+
    "\1\145\4\30\1\146\13\30\30\0\3\30\7\0\3\30"+
    "\4\0\13\30\1\147\1\150\1\151\11\30\1\152\2\30"+
    "\30\0\3\30\7\0\3\30\4\0\11\30\1\153\4\30"+
    "\1\154\2\30\1\155\10\30\30\0\3\30\7\0\3\30"+
    "\4\0\5\30\1\156\5\30\1\157\5\30\1\160\10\30"+
    "\30\0\3\30\7\0\3\30\4\0\1\30\1\161\14\30"+
    "\1\162\13\30\30\0\3\30\7\0\3\30\4\0\6\30"+
    "\1\163\5\30\1\164\1\165\14\30\30\0\3\30\7\0"+
    "\3\30\4\0\1\30\1\166\7\30\1\167\20\30\30\0"+
    "\3\30\7\0\3\30\4\0\1\30\1\170\3\30\1\171"+
    "\3\30\1\172\20\30\30\0\3\30\7\0\3\30\4\0"+
    "\1\173\1\174\3\30\1\175\10\30\1\176\5\30\1\177"+
    "\5\30\30\0\3\30\7\0\3\30\4\0\6\30\1\200"+
    "\6\30\1\201\3\30\1\202\3\30\1\203\4\30\30\0"+
    "\3\30\7\0\3\30\4\0\10\30\1\204\10\30\1\205"+
    "\2\30\1\206\5\30\30\0\3\30\7\0\3\30\4\0"+
    "\5\30\1\207\10\30\1\210\13\30\30\0\3\30\7\0"+
    "\3\30\4\0\3\30\1\211\1\30\1\212\2\30\1\213"+
    "\1\214\3\30\1\215\5\30\1\216\1\217\1\30\1\220"+
    "\1\30\1\221\1\30\30\0\3\30\7\0\3\30\4\0"+
    "\1\30\1\222\3\30\1\223\2\30\1\224\5\30\1\225"+
    "\2\30\1\226\6\30\1\227\1\30\30\0\3\30\7\0"+
    "\3\30\4\0\15\30\1\230\1\30\1\231\2\30\1\232"+
    "\7\30\30\0\3\30\7\0\3\30\4\0\11\30\1\233"+
    "\4\30\1\234\13\30\30\0\3\30\7\0\3\30\4\0"+
    "\5\30\1\235\2\30\1\236\1\237\20\30\30\0\3\30"+
    "\7\0\3\30\4\0\5\30\1\240\24\30\36\0\1\241"+
    "\45\0\1\242\25\0\1\243\75\0\1\244\67\0\2\70"+
    "\1\0\1\70\1\0\1\70\1\0\1\70\1\0\26\70"+
    "\1\0\43\70\2\0\1\71\100\0\2\245\3\0\1\245"+
    "\1\246\1\245\1\247\26\245\1\250\4\245\1\251\3\245"+
    "\1\252\6\245\1\253\3\245\1\254\1\245\1\255\14\245"+
    "\30\0\1\256\74\0\3\257\7\0\3\257\4\0\32\257"+
    "\4\0\2\257\22\0\3\106\10\0\1\260\11\0\1\260"+
    "\34\0\2\110\1\261\1\110\1\261\76\110\17\0\1\112"+
    "\1\0\3\262\1\263\10\0\1\114\17\0\1\114\54\0"+
    "\1\264\102\0\1\265\102\0\1\266\1\267\73\0\3\30"+
    "\7\0\3\30\4\0\16\30\1\270\3\30\1\271\7\30"+
    "\30\0\3\30\7\0\3\30\4\0\23\30\1\272\6\30"+
    "\30\0\3\30\7\0\3\30\4\0\13\30\1\273\16\30"+
    "\30\0\3\30\7\0\3\30\4\0\4\30\1\274\25\30"+
    "\30\0\3\30\7\0\3\30\4\0\3\30\1\275\26\30"+
    "\30\0\3\30\7\0\3\30\4\0\7\30\1\276\22\30"+
    "\30\0\3\30\7\0\3\30\4\0\6\30\1\277\4\30"+
    "\1\300\16\30\30\0\3\30\7\0\3\30\4\0\5\30"+
    "\1\301\24\30\30\0\3\30\7\0\3\30\4\0\13\30"+
    "\1\302\7\30\1\303\6\30\30\0\3\30\7\0\3\30"+
    "\4\0\1\30\1\304\30\30\30\0\3\30\7\0\3\30"+
    "\4\0\15\30\1\305\6\30\1\306\5\30\30\0\3\30"+
    "\7\0\3\30\4\0\2\30\1\307\17\30\1\310\7\30"+
    "\30\0\3\30\7\0\3\30\4\0\23\30\1\311\4\30"+
    "\1\312\1\30\30\0\3\30\7\0\3\30\4\0\13\30"+
    "\1\313\6\30\1\314\7\30\30\0\3\30\7\0\3\30"+
    "\4\0\22\30\1\315\2\30\1\316\4\30\30\0\3\30"+
    "\7\0\3\30\4\0\22\30\1\317\7\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\30\1\320\30\30\30\0\3\30"+
    "\7\0\3\30\4\0\4\30\1\321\17\30\1\322\5\30"+
    "\30\0\3\30\7\0\3\30\4\0\3\30\1\323\17\30"+
    "\1\324\6\30\30\0\3\30\7\0\3\30\4\0\5\30"+
    "\1\325\7\30\1\326\3\30\1\327\1\330\7\30\30\0"+
    "\3\30\7\0\3\30\4\0\21\30\1\331\10\30\30\0"+
    "\3\30\7\0\3\30\4\0\16\30\1\332\13\30\30\0"+
    "\3\30\7\0\3\30\4\0\16\30\1\333\4\30\1\334"+
    "\6\30\30\0\3\30\7\0\3\30\4\0\16\30\1\335"+
    "\13\30\30\0\3\30\7\0\3\30\4\0\16\30\1\336"+
    "\13\30\30\0\3\30\7\0\3\30\4\0\25\30\1\337"+
    "\4\30\30\0\3\30\7\0\3\30\4\0\24\30\1\340"+
    "\5\30\30\0\3\30\7\0\3\30\4\0\17\30\1\341"+
    "\12\30\30\0\3\30\7\0\3\30\4\0\3\30\1\342"+
    "\4\30\1\343\11\30\1\344\1\345\6\30\30\0\3\30"+
    "\7\0\3\30\4\0\22\30\1\346\7\30\30\0\3\30"+
    "\7\0\3\30\4\0\12\30\1\347\1\30\1\350\5\30"+
    "\1\351\7\30\30\0\3\30\7\0\3\30\4\0\17\30"+
    "\1\352\7\30\1\353\2\30\30\0\3\30\7\0\3\30"+
    "\4\0\21\30\1\354\1\30\1\355\6\30\30\0\3\30"+
    "\7\0\3\30\4\0\15\30\1\356\14\30\30\0\3\30"+
    "\7\0\3\30\4\0\4\30\1\357\1\30\1\360\5\30"+
    "\1\361\3\30\1\362\5\30\1\363\1\30\1\364\1\30"+
    "\30\0\3\30\7\0\3\30\4\0\14\30\1\365\15\30"+
    "\30\0\3\30\7\0\3\30\4\0\23\30\1\366\2\30"+
    "\1\367\1\370\2\30\30\0\3\30\7\0\3\30\4\0"+
    "\23\30\1\371\6\30\30\0\3\30\7\0\3\30\4\0"+
    "\13\30\1\372\16\30\30\0\3\30\7\0\3\30\4\0"+
    "\6\30\1\373\23\30\30\0\3\30\7\0\3\30\4\0"+
    "\4\30\1\374\25\30\30\0\3\30\7\0\3\30\4\0"+
    "\5\30\1\375\24\30\30\0\3\30\7\0\3\30\4\0"+
    "\16\30\1\376\13\30\30\0\3\30\7\0\3\30\4\0"+
    "\11\30\1\377\4\30\1\u0100\13\30\30\0\3\30\7\0"+
    "\3\30\4\0\2\30\1\u0101\27\30\30\0\3\30\7\0"+
    "\3\30\4\0\6\30\1\u0102\14\30\1\u0103\6\30\30\0"+
    "\3\30\7\0\3\30\4\0\13\30\1\u0104\12\30\1\u0105"+
    "\3\30\30\0\3\30\7\0\3\30\4\0\16\30\1\u0106"+
    "\13\30\30\0\3\30\7\0\3\30\4\0\3\30\1\u0107"+
    "\7\30\1\u0108\7\30\1\u0109\6\30\30\0\3\30\7\0"+
    "\3\30\4\0\1\30\1\u010a\30\30\30\0\3\30\7\0"+
    "\3\30\4\0\4\30\1\u010b\25\30\30\0\3\30\7\0"+
    "\3\30\4\0\11\30\1\u010c\20\30\30\0\3\30\7\0"+
    "\3\30\4\0\1\30\1\u010d\30\30\30\0\3\30\7\0"+
    "\3\30\4\0\14\30\1\u010e\2\30\1\u010f\12\30\30\0"+
    "\3\30\7\0\3\30\4\0\11\30\1\u0110\20\30\30\0"+
    "\3\30\7\0\3\30\4\0\22\30\1\u0111\7\30\30\0"+
    "\3\30\7\0\3\30\4\0\21\30\1\u0112\10\30\30\0"+
    "\3\30\7\0\3\30\4\0\22\30\1\u0113\7\30\30\0"+
    "\3\30\7\0\3\30\4\0\5\30\1\u0114\3\30\1\u0115"+
    "\7\30\1\u0116\10\30\30\0\3\30\7\0\3\30\4\0"+
    "\4\30\1\u0117\6\30\1\u0118\1\u0119\15\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\30\1\u011a\7\30\1\u011b\16\30"+
    "\1\u011c\1\30\30\0\3\30\7\0\3\30\4\0\17\30"+
    "\1\u011d\12\30\30\0\3\30\7\0\3\30\4\0\4\30"+
    "\1\u011e\25\30\30\0\3\30\7\0\3\30\4\0\4\30"+
    "\1\u011f\15\30\1\u0120\7\30\30\0\3\30\7\0\3\30"+
    "\4\0\5\30\1\u0121\3\30\1\u0122\20\30\30\0\3\30"+
    "\7\0\3\30\4\0\5\30\1\u0123\13\30\1\u0124\10\30"+
    "\30\0\3\30\7\0\3\30\4\0\11\30\1\u0125\20\30"+
    "\30\0\3\30\7\0\3\30\4\0\2\30\1\u0126\2\30"+
    "\1\u0127\24\30\30\0\3\30\7\0\3\30\4\0\5\30"+
    "\1\u0128\3\30\1\u0129\20\30\30\0\3\30\7\0\3\30"+
    "\4\0\23\30\1\u012a\6\30\30\0\3\30\7\0\3\30"+
    "\4\0\22\30\1\u012b\7\30\17\0\1\u012c\10\0\3\257"+
    "\7\0\3\257\4\0\32\257\4\0\2\257\20\0\1\112"+
    "\1\0\3\u012d\11\0\1\114\17\0\1\114\46\0\3\u012e"+
    "\106\0\1\u012f\74\0\3\30\7\0\3\30\4\0\25\30"+
    "\1\u0130\4\30\30\0\3\30\7\0\3\30\4\0\23\30"+
    "\1\u0131\6\30\30\0\3\30\7\0\3\30\4\0\5\30"+
    "\1\u0132\24\30\30\0\3\30\7\0\3\30\4\0\16\30"+
    "\1\u0133\13\30\30\0\3\30\7\0\3\30\4\0\16\30"+
    "\1\u0134\13\30\30\0\3\30\7\0\3\30\4\0\1\30"+
    "\1\u0135\30\30\30\0\3\30\7\0\3\30\4\0\5\30"+
    "\1\u0136\24\30\30\0\3\30\7\0\3\30\4\0\3\30"+
    "\1\u0137\1\30\1\u0138\24\30\30\0\3\30\7\0\3\30"+
    "\4\0\22\30\1\u0139\7\30\30\0\3\30\7\0\3\30"+
    "\4\0\23\30\1\u013a\1\30\1\u013b\4\30\30\0\3\30"+
    "\7\0\3\30\4\0\15\30\1\u013c\14\30\30\0\3\30"+
    "\7\0\3\30\4\0\5\30\1\u013d\24\30\30\0\3\30"+
    "\7\0\3\30\4\0\23\30\1\u013e\6\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\30\1\u013f\30\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\u0140\31\30\30\0\3\30\7\0"+
    "\3\30\4\0\5\30\1\u0141\24\30\30\0\3\30\7\0"+
    "\3\30\4\0\3\30\1\u0142\26\30\30\0\3\30\7\0"+
    "\3\30\4\0\23\30\1\u0143\6\30\30\0\3\30\7\0"+
    "\3\30\4\0\11\30\1\u0144\20\30\30\0\3\30\7\0"+
    "\3\30\4\0\5\30\1\u0145\24\30\30\0\3\30\7\0"+
    "\3\30\4\0\11\30\1\u0146\20\30\30\0\3\30\7\0"+
    "\3\30\4\0\14\30\1\u0147\15\30\30\0\3\30\7\0"+
    "\3\30\4\0\13\30\1\u0148\16\30\30\0\3\30\7\0"+
    "\3\30\4\0\5\30\1\u0149\24\30\30\0\3\30\7\0"+
    "\3\30\4\0\13\30\1\u014a\16\30\30\0\3\30\7\0"+
    "\3\30\4\0\1\30\1\u014b\2\30\1\u014c\25\30\30\0"+
    "\3\30\7\0\3\30\4\0\22\30\1\u014d\7\30\30\0"+
    "\3\30\7\0\3\30\4\0\3\30\1\u014e\26\30\30\0"+
    "\3\30\7\0\3\30\4\0\14\30\1\u014f\15\30\30\0"+
    "\3\30\7\0\3\30\4\0\14\30\1\u0150\15\30\30\0"+
    "\3\30\7\0\3\30\4\0\13\30\1\u0151\16\30\30\0"+
    "\3\30\7\0\3\30\4\0\2\30\1\u0152\27\30\30\0"+
    "\3\30\7\0\3\30\4\0\24\30\1\u0153\5\30\30\0"+
    "\3\30\7\0\3\30\4\0\11\30\1\u0154\20\30\30\0"+
    "\3\30\7\0\3\30\4\0\21\30\1\u0155\10\30\30\0"+
    "\3\30\7\0\3\30\4\0\13\30\1\u0156\16\30\30\0"+
    "\3\30\7\0\3\30\4\0\13\30\1\u0157\16\30\30\0"+
    "\3\30\7\0\3\30\4\0\5\30\1\u0158\24\30\30\0"+
    "\3\30\7\0\3\30\4\0\5\30\1\u0159\15\30\1\u015a"+
    "\6\30\30\0\3\30\7\0\3\30\4\0\5\30\1\u015b"+
    "\24\30\30\0\3\30\7\0\3\30\4\0\23\30\1\u015c"+
    "\6\30\30\0\3\30\7\0\3\30\4\0\5\30\1\u015d"+
    "\24\30\30\0\3\30\7\0\3\30\4\0\11\30\1\u015e"+
    "\20\30\30\0\3\30\7\0\3\30\4\0\23\30\1\u015f"+
    "\6\30\30\0\3\30\7\0\3\30\4\0\7\30\1\u0160"+
    "\22\30\30\0\3\30\7\0\3\30\4\0\1\30\1\u0161"+
    "\30\30\30\0\3\30\7\0\3\30\4\0\1\30\1\u0162"+
    "\30\30\30\0\3\30\7\0\3\30\4\0\11\30\1\u0163"+
    "\20\30\30\0\3\30\7\0\3\30\4\0\16\30\1\u0164"+
    "\13\30\30\0\3\30\7\0\3\30\4\0\24\30\1\u0165"+
    "\5\30\30\0\3\30\7\0\3\30\4\0\5\30\1\u0166"+
    "\24\30\30\0\3\30\7\0\3\30\4\0\5\30\1\u0167"+
    "\24\30\30\0\3\30\7\0\3\30\4\0\5\30\1\u0168"+
    "\24\30\30\0\3\30\7\0\3\30\4\0\26\30\1\u0169"+
    "\3\30\30\0\3\30\7\0\3\30\4\0\23\30\1\u016a"+
    "\6\30\30\0\3\30\7\0\3\30\4\0\13\30\1\u016b"+
    "\16\30\30\0\3\30\7\0\3\30\4\0\22\30\1\u016c"+
    "\7\30\30\0\3\30\7\0\3\30\4\0\5\30\1\u016d"+
    "\24\30\30\0\3\30\7\0\3\30\4\0\21\30\1\u016e"+
    "\10\30\30\0\3\30\7\0\3\30\4\0\15\30\1\u016f"+
    "\14\30\30\0\3\30\7\0\3\30\4\0\3\30\1\u0170"+
    "\21\30\1\u0171\4\30\30\0\3\30\7\0\3\30\4\0"+
    "\23\30\1\u0172\6\30\30\0\3\30\7\0\3\30\4\0"+
    "\13\30\1\u0173\16\30\30\0\3\30\7\0\3\30\4\0"+
    "\5\30\1\u0174\24\30\30\0\3\30\7\0\3\30\4\0"+
    "\24\30\1\u0175\5\30\30\0\3\30\7\0\3\30\4\0"+
    "\13\30\1\u0176\16\30\30\0\3\30\7\0\3\30\4\0"+
    "\22\30\1\u0177\7\30\30\0\3\30\7\0\3\30\4\0"+
    "\17\30\1\u0178\12\30\30\0\3\30\7\0\3\30\4\0"+
    "\24\30\1\u0179\5\30\30\0\3\30\7\0\3\30\4\0"+
    "\5\30\1\u017a\24\30\30\0\3\30\7\0\3\30\4\0"+
    "\21\30\1\u017b\10\30\30\0\3\30\7\0\3\30\4\0"+
    "\5\30\1\u017c\24\30\30\0\3\30\7\0\3\30\4\0"+
    "\17\30\1\u017d\12\30\30\0\3\30\7\0\3\30\4\0"+
    "\15\30\1\u017e\5\30\1\u017f\6\30\30\0\3\30\7\0"+
    "\3\30\4\0\5\30\1\u0180\24\30\30\0\3\30\7\0"+
    "\3\30\4\0\23\30\1\u0181\6\30\30\0\3\30\7\0"+
    "\3\30\4\0\23\30\1\u0182\6\30\30\0\3\30\7\0"+
    "\3\30\4\0\7\30\1\u0183\22\30\30\0\3\30\7\0"+
    "\3\30\4\0\23\30\1\u0184\6\30\30\0\3\30\7\0"+
    "\3\30\4\0\15\30\1\u0185\14\30\30\0\3\30\7\0"+
    "\3\30\4\0\22\30\1\u0186\7\30\30\0\3\30\7\0"+
    "\3\30\4\0\16\30\1\u0187\13\30\30\0\3\30\7\0"+
    "\3\30\4\0\1\30\1\u0188\30\30\30\0\3\30\7\0"+
    "\3\30\4\0\1\30\1\u0189\30\30\30\0\3\30\7\0"+
    "\3\30\4\0\16\30\1\u018a\13\30\30\0\3\30\7\0"+
    "\3\30\4\0\3\30\1\u018b\11\30\1\u018c\14\30\30\0"+
    "\3\30\7\0\3\30\4\0\7\30\1\u018d\22\30\30\0"+
    "\3\30\7\0\3\30\4\0\5\30\1\u018e\24\30\30\0"+
    "\3\30\7\0\3\30\4\0\5\30\1\u018f\24\30\30\0"+
    "\3\30\7\0\3\30\4\0\1\30\1\u0190\30\30\30\0"+
    "\3\30\7\0\3\30\4\0\5\30\1\u0191\24\30\30\0"+
    "\3\30\7\0\3\30\4\0\21\30\1\u0192\10\30\30\0"+
    "\3\30\7\0\3\30\4\0\15\30\1\u0193\14\30\30\0"+
    "\3\30\7\0\3\30\4\0\26\30\1\u0194\3\30\30\0"+
    "\3\30\7\0\3\30\4\0\23\30\1\u0195\6\30\30\0"+
    "\3\30\7\0\3\30\4\0\4\30\1\u0196\25\30\30\0"+
    "\3\30\7\0\3\30\4\0\22\30\1\u0197\7\30\30\0"+
    "\3\30\7\0\3\30\4\0\12\30\1\u0198\17\30\30\0"+
    "\3\30\7\0\3\30\4\0\15\30\1\u0199\3\30\1\u019a"+
    "\10\30\30\0\3\30\7\0\3\30\4\0\13\30\1\u019b"+
    "\16\30\30\0\3\30\7\0\3\30\4\0\10\30\1\u019c"+
    "\21\30\30\0\3\30\7\0\3\30\4\0\23\30\1\u019d"+
    "\6\30\25\0\1\u019e\1\112\1\0\3\u019f\11\0\1\114"+
    "\17\0\1\114\46\0\3\u01a0\100\0\3\30\7\0\3\30"+
    "\4\0\5\30\1\u01a1\24\30\30\0\3\30\7\0\3\30"+
    "\4\0\21\30\1\u01a2\10\30\30\0\3\30\7\0\3\30"+
    "\4\0\21\30\1\u01a3\10\30\30\0\3\30\7\0\3\30"+
    "\4\0\21\30\1\u01a4\10\30\30\0\3\30\7\0\3\30"+
    "\4\0\26\30\1\u01a5\3\30\30\0\3\30\7\0\3\30"+
    "\4\0\12\30\1\u01a6\17\30\30\0\3\30\7\0\3\30"+
    "\4\0\15\30\1\u01a7\14\30\30\0\3\30\7\0\3\30"+
    "\4\0\10\30\1\u01a8\21\30\30\0\3\30\7\0\3\30"+
    "\4\0\7\30\1\u01a9\22\30\30\0\3\30\7\0\3\30"+
    "\4\0\22\30\1\u01aa\7\30\30\0\3\30\7\0\3\30"+
    "\4\0\11\30\1\u01ab\20\30\30\0\3\30\7\0\3\30"+
    "\4\0\5\30\1\u01ac\24\30\30\0\3\30\7\0\3\30"+
    "\4\0\23\30\1\u01ad\6\30\30\0\3\30\7\0\3\30"+
    "\4\0\16\30\1\u01ae\13\30\30\0\3\30\7\0\3\30"+
    "\4\0\11\30\1\u01af\4\30\1\u01b0\13\30\30\0\3\30"+
    "\7\0\3\30\4\0\23\30\1\u01b1\6\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\30\1\u01b2\30\30\30\0\3\30"+
    "\7\0\3\30\4\0\22\30\1\u01b3\7\30\30\0\3\30"+
    "\7\0\3\30\4\0\13\30\1\u01b4\16\30\30\0\3\30"+
    "\7\0\3\30\4\0\24\30\1\u01b5\5\30\30\0\3\30"+
    "\7\0\3\30\4\0\15\30\1\u01b6\14\30\30\0\3\30"+
    "\7\0\3\30\4\0\4\30\1\u01b7\25\30\30\0\3\30"+
    "\7\0\3\30\4\0\13\30\1\u01b8\16\30\30\0\3\30"+
    "\7\0\3\30\4\0\23\30\1\u01b9\6\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\30\1\u01ba\30\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\30\1\u01bb\30\30\30\0\3\30"+
    "\7\0\3\30\4\0\16\30\1\u01bc\13\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\30\1\u01bd\30\30\30\0\3\30"+
    "\7\0\3\30\4\0\17\30\1\u01be\12\30\30\0\3\30"+
    "\7\0\3\30\4\0\15\30\1\u01bf\14\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\u01c0\31\30\30\0\3\30\7\0"+
    "\3\30\4\0\5\30\1\u01c1\24\30\30\0\3\30\7\0"+
    "\3\30\4\0\24\30\1\u01c2\5\30\30\0\3\30\7\0"+
    "\3\30\4\0\21\30\1\u01c3\10\30\30\0\3\30\7\0"+
    "\3\30\4\0\21\30\1\u01c4\10\30\30\0\3\30\7\0"+
    "\3\30\4\0\1\30\1\u01c5\30\30\30\0\3\30\7\0"+
    "\3\30\4\0\21\30\1\u01c6\10\30\30\0\3\30\7\0"+
    "\3\30\4\0\1\u01c7\31\30\30\0\3\30\7\0\3\30"+
    "\4\0\23\30\1\u01c8\6\30\30\0\3\30\7\0\3\30"+
    "\4\0\25\30\1\u01c9\4\30\30\0\3\30\7\0\3\30"+
    "\4\0\5\30\1\u01ca\24\30\30\0\3\30\7\0\3\30"+
    "\4\0\4\30\1\u01cb\25\30\30\0\3\30\7\0\3\30"+
    "\4\0\30\30\1\u01cc\1\30\30\0\3\30\7\0\3\30"+
    "\4\0\22\30\1\u01cd\7\30\30\0\3\30\7\0\3\30"+
    "\4\0\15\30\1\u01ce\14\30\30\0\3\30\7\0\3\30"+
    "\4\0\1\30\1\u01cf\30\30\30\0\3\30\7\0\3\30"+
    "\4\0\5\30\1\u01d0\24\30\30\0\3\30\7\0\3\30"+
    "\4\0\1\30\1\u01d1\30\30\30\0\3\30\7\0\3\30"+
    "\4\0\16\30\1\u01d2\13\30\30\0\3\30\7\0\3\30"+
    "\4\0\1\u01d3\31\30\30\0\3\30\7\0\3\30\4\0"+
    "\22\30\1\u01d4\7\30\30\0\3\30\7\0\3\30\4\0"+
    "\5\30\1\u01d5\24\30\30\0\3\30\7\0\3\30\4\0"+
    "\21\30\1\u01d6\10\30\30\0\3\30\7\0\3\30\4\0"+
    "\21\30\1\u01d7\10\30\30\0\3\30\7\0\3\30\4\0"+
    "\5\30\1\u01d8\24\30\30\0\3\30\7\0\3\30\4\0"+
    "\5\30\1\u01d9\24\30\30\0\3\30\7\0\3\30\4\0"+
    "\1\30\1\u01da\30\30\30\0\3\30\7\0\3\30\4\0"+
    "\5\30\1\u01db\24\30\30\0\3\30\7\0\3\30\4\0"+
    "\11\30\1\u01dc\20\30\30\0\3\30\7\0\3\30\4\0"+
    "\21\30\1\u01dd\10\30\30\0\3\30\7\0\3\30\4\0"+
    "\21\30\1\u01de\10\30\30\0\3\30\7\0\3\30\4\0"+
    "\24\30\1\u01df\5\30\30\0\3\30\7\0\3\30\4\0"+
    "\5\30\1\u01e0\24\30\30\0\3\30\7\0\3\30\4\0"+
    "\21\30\1\u01e1\10\30\30\0\3\30\7\0\3\30\4\0"+
    "\3\30\1\u01e2\26\30\30\0\3\30\7\0\3\30\4\0"+
    "\11\30\1\u01e3\20\30\30\0\3\30\7\0\3\30\4\0"+
    "\2\30\1\u01e4\27\30\30\0\3\30\7\0\3\30\4\0"+
    "\17\30\1\u01e5\12\30\30\0\3\30\7\0\3\30\4\0"+
    "\4\30\1\u01e6\25\30\30\0\3\30\7\0\3\30\4\0"+
    "\11\30\1\u01e7\20\30\30\0\3\30\7\0\3\30\4\0"+
    "\21\30\1\u01e8\10\30\30\0\3\30\7\0\3\30\4\0"+
    "\3\30\1\u01e9\26\30\30\0\3\30\7\0\3\30\4\0"+
    "\5\30\1\u01ea\24\30\30\0\3\30\7\0\3\30\4\0"+
    "\5\30\1\u01eb\24\30\30\0\3\30\7\0\3\30\4\0"+
    "\14\30\1\u01ec\15\30\30\0\3\30\7\0\3\30\4\0"+
    "\1\u01ed\31\30\30\0\3\30\7\0\3\30\4\0\26\30"+
    "\1\u01ee\3\30\30\0\3\30\7\0\3\30\4\0\30\30"+
    "\1\u01ef\1\30\30\0\3\30\7\0\3\30\4\0\2\30"+
    "\1\u01f0\27\30\30\0\3\30\7\0\3\30\4\0\21\30"+
    "\1\u01f1\10\30\30\0\3\30\7\0\3\30\4\0\12\30"+
    "\1\u01f2\17\30\30\0\3\30\7\0\3\30\4\0\22\30"+
    "\1\u01f3\7\30\30\0\3\30\7\0\3\30\4\0\7\30"+
    "\1\u01f4\22\30\30\0\3\30\7\0\3\30\4\0\16\30"+
    "\1\u01f5\13\30\30\0\3\30\7\0\3\30\4\0\13\30"+
    "\1\u01f6\16\30\30\0\3\30\7\0\3\30\4\0\23\30"+
    "\1\u01f7\6\30\30\0\3\30\7\0\3\30\4\0\21\30"+
    "\1\u01f8\10\30\30\0\3\30\7\0\3\30\4\0\1\u01f9"+
    "\31\30\30\0\3\30\7\0\3\30\4\0\7\30\1\u01fa"+
    "\22\30\30\0\3\30\7\0\3\30\4\0\22\30\1\u01fb"+
    "\7\30\30\0\3\30\7\0\3\30\4\0\24\30\1\u01fc"+
    "\5\30\30\0\3\30\7\0\3\30\4\0\5\30\1\u01fd"+
    "\24\30\30\0\3\30\7\0\3\30\4\0\1\u01fe\31\30"+
    "\30\0\3\30\7\0\3\30\4\0\5\30\1\u01ff\24\30"+
    "\30\0\3\30\7\0\3\30\4\0\5\30\1\u0200\24\30"+
    "\30\0\3\30\7\0\3\30\4\0\16\30\1\u0201\13\30"+
    "\30\0\3\30\7\0\3\30\4\0\5\30\1\u0202\24\30"+
    "\30\0\3\u0203\76\0\1\112\1\0\3\u019f\11\0\1\114"+
    "\17\0\1\114\51\0\1\u0204\77\0\3\30\7\0\3\30"+
    "\4\0\1\u0205\31\30\30\0\3\30\7\0\3\30\4\0"+
    "\1\30\1\u0206\30\30\30\0\3\30\7\0\3\30\4\0"+
    "\5\30\1\u0207\24\30\30\0\3\30\7\0\3\30\4\0"+
    "\4\30\1\u0208\25\30\30\0\3\30\7\0\3\30\4\0"+
    "\16\30\1\u0209\13\30\30\0\3\30\7\0\3\30\4\0"+
    "\15\30\1\u020a\14\30\30\0\3\30\7\0\3\30\4\0"+
    "\21\30\1\u020b\10\30\30\0\3\30\7\0\3\30\4\0"+
    "\1\u020c\31\30\30\0\3\30\7\0\3\30\4\0\14\30"+
    "\1\u020d\15\30\30\0\3\30\7\0\3\30\4\0\15\30"+
    "\1\u020e\14\30\30\0\3\30\7\0\3\30\4\0\15\30"+
    "\1\u020f\14\30\30\0\3\30\7\0\3\30\4\0\5\30"+
    "\1\u0210\24\30\30\0\3\30\7\0\3\30\4\0\15\30"+
    "\1\u0211\14\30\30\0\3\30\7\0\3\30\4\0\11\30"+
    "\1\u0212\20\30\30\0\3\30\7\0\3\30\4\0\4\30"+
    "\1\u0213\25\30\30\0\3\30\7\0\3\30\4\0\4\30"+
    "\1\u0214\25\30\30\0\3\30\7\0\3\30\4\0\22\30"+
    "\1\u0215\7\30\30\0\3\30\7\0\3\30\4\0\13\30"+
    "\1\u0216\16\30\30\0\3\30\7\0\3\30\4\0\13\30"+
    "\1\u0217\16\30\30\0\3\30\7\0\3\30\4\0\23\30"+
    "\1\u0218\6\30\30\0\3\30\7\0\3\30\4\0\3\30"+
    "\1\u0219\26\30\30\0\3\30\7\0\3\30\4\0\13\30"+
    "\1\u021a\16\30\30\0\3\30\7\0\3\30\4\0\11\30"+
    "\1\u021b\20\30\30\0\3\30\7\0\3\30\4\0\7\30"+
    "\1\u021c\22\30\30\0\3\30\7\0\3\30\4\0\11\30"+
    "\1\u021d\20\30\30\0\3\30\7\0\3\30\4\0\14\30"+
    "\1\u021e\15\30\30\0\3\30\7\0\3\30\4\0\4\30"+
    "\1\u021f\25\30\30\0\3\30\7\0\3\30\4\0\11\30"+
    "\1\u0220\20\30\30\0\3\30\7\0\3\30\4\0\23\30"+
    "\1\u0221\6\30\30\0\3\30\7\0\3\30\4\0\15\30"+
    "\1\u0222\14\30\30\0\3\30\7\0\3\30\4\0\6\30"+
    "\1\u0223\23\30\30\0\2\30\1\u0224\7\0\3\30\4\0"+
    "\6\30\1\u0225\5\30\1\u0226\1\u0227\2\30\1\u0228\5\30"+
    "\1\u0229\1\30\1\u022a\1\30\30\0\3\30\7\0\3\30"+
    "\4\0\11\30\1\u022b\20\30\30\0\3\30\7\0\3\30"+
    "\4\0\1\30\1\u022c\30\30\30\0\3\30\7\0\3\30"+
    "\4\0\22\30\1\u022d\7\30\30\0\3\30\7\0\3\30"+
    "\4\0\3\30\1\u022e\26\30\30\0\3\30\7\0\3\30"+
    "\4\0\23\30\1\u022f\6\30\30\0\3\30\7\0\3\30"+
    "\4\0\21\30\1\u0230\10\30\30\0\3\30\7\0\3\30"+
    "\4\0\12\30\1\u0231\17\30\30\0\3\30\7\0\3\30"+
    "\4\0\21\30\1\u0232\10\30\30\0\3\30\7\0\3\30"+
    "\4\0\21\30\1\u0233\10\30\30\0\2\30\1\u0234\7\0"+
    "\3\30\4\0\6\30\1\u0235\5\30\1\u0236\1\u0237\2\30"+
    "\1\u0238\5\30\1\u0239\1\30\1\u023a\1\30\30\0\3\30"+
    "\7\0\3\30\4\0\23\30\1\u023b\6\30\30\0\3\30"+
    "\7\0\3\30\4\0\11\30\1\u023c\20\30\30\0\3\30"+
    "\7\0\3\30\4\0\2\30\1\u023d\27\30\30\0\3\30"+
    "\7\0\3\30\4\0\23\30\1\u023e\6\30\30\0\3\30"+
    "\7\0\3\30\4\0\3\30\1\u023f\26\30\30\0\3\30"+
    "\7\0\3\30\4\0\3\30\1\u0240\26\30\30\0\3\30"+
    "\7\0\3\30\4\0\5\30\1\u0241\24\30\30\0\3\30"+
    "\7\0\3\30\4\0\15\30\1\u0242\14\30\30\0\3\30"+
    "\7\0\3\30\4\0\17\30\1\u0243\12\30\30\0\3\30"+
    "\7\0\3\30\4\0\11\30\1\u0244\20\30\30\0\3\30"+
    "\7\0\3\30\4\0\23\30\1\u0245\6\30\30\0\3\30"+
    "\7\0\3\30\4\0\15\30\1\u0246\14\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\30\1\u0247\30\30\30\0\3\30"+
    "\7\0\3\30\4\0\5\30\1\u0248\24\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\30\1\u0249\30\30\30\0\3\30"+
    "\7\0\3\30\4\0\3\30\1\u024a\26\30\30\0\3\30"+
    "\7\0\3\30\4\0\10\30\1\u024b\21\30\30\0\3\30"+
    "\7\0\3\30\4\0\14\30\1\u024c\15\30\30\0\3\30"+
    "\7\0\3\30\4\0\23\30\1\u024d\6\30\30\0\3\30"+
    "\7\0\3\30\4\0\5\30\1\u024e\24\30\30\0\3\30"+
    "\7\0\3\30\4\0\6\30\1\u024f\5\30\1\u0250\3\30"+
    "\1\u0251\5\30\1\u0252\1\30\1\u0253\1\30\30\0\3\30"+
    "\7\0\3\30\4\0\5\30\1\u0254\24\30\30\0\3\30"+
    "\7\0\3\30\4\0\21\30\1\u0255\10\30\30\0\3\30"+
    "\7\0\3\30\4\0\11\30\1\u0256\20\30\30\0\3\30"+
    "\7\0\3\30\4\0\11\30\1\u0257\20\30\30\0\3\30"+
    "\7\0\3\30\4\0\5\30\1\u0258\24\30\30\0\3\30"+
    "\7\0\3\30\4\0\6\30\1\u0259\23\30\30\0\3\30"+
    "\7\0\3\30\4\0\5\30\1\u025a\24\30\30\0\3\30"+
    "\7\0\3\30\4\0\5\30\1\u025b\24\30\30\0\3\30"+
    "\7\0\3\30\4\0\23\30\1\u025c\6\30\30\0\3\30"+
    "\7\0\3\30\4\0\14\30\1\u025d\15\30\30\0\3\30"+
    "\7\0\3\30\4\0\23\30\1\u025e\6\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\30\1\u025f\30\30\30\0\3\30"+
    "\7\0\3\30\4\0\21\30\1\u0260\10\30\30\0\3\30"+
    "\7\0\3\30\4\0\11\30\1\u0261\20\30\30\0\3\30"+
    "\7\0\3\30\4\0\24\30\1\u0262\5\30\30\0\3\30"+
    "\7\0\3\30\4\0\21\30\1\u0263\10\30\30\0\3\u0264"+
    "\100\0\3\u0265\100\0\3\30\7\0\3\30\4\0\16\30"+
    "\1\u0266\13\30\30\0\3\30\7\0\3\30\4\0\3\30"+
    "\1\u0267\26\30\30\0\3\30\7\0\3\30\4\0\1\30"+
    "\1\u0268\30\30\30\0\3\30\7\0\3\30\4\0\21\30"+
    "\1\u0269\10\30\30\0\3\30\7\0\3\30\4\0\24\30"+
    "\1\u026a\5\30\30\0\3\30\7\0\3\30\4\0\23\30"+
    "\1\u026b\6\30\30\0\3\30\7\0\3\30\4\0\4\30"+
    "\1\u026c\25\30\30\0\3\30\7\0\3\30\4\0\1\u026d"+
    "\31\30\30\0\3\30\7\0\3\30\4\0\13\30\1\u026e"+
    "\16\30\30\0\3\30\7\0\3\30\4\0\3\30\1\u026f"+
    "\26\30\30\0\3\30\7\0\3\30\4\0\16\30\1\u0270"+
    "\13\30\30\0\3\30\7\0\3\30\4\0\5\30\1\u0271"+
    "\24\30\30\0\3\30\7\0\3\30\4\0\22\30\1\u0272"+
    "\7\30\30\0\3\30\7\0\3\30\4\0\30\30\1\u0273"+
    "\1\30\30\0\3\30\7\0\3\30\4\0\1\u0274\31\30"+
    "\30\0\3\30\7\0\3\30\4\0\1\30\1\u0275\30\30"+
    "\30\0\3\30\7\0\3\30\4\0\15\30\1\u0276\14\30"+
    "\30\0\3\30\7\0\3\30\4\0\15\30\1\u0277\14\30"+
    "\30\0\3\30\7\0\3\30\4\0\5\30\1\u0278\24\30"+
    "\30\0\3\30\7\0\3\30\4\0\5\30\1\u0279\24\30"+
    "\30\0\3\30\7\0\3\30\4\0\23\30\1\u027a\6\30"+
    "\30\0\3\30\7\0\3\30\4\0\3\30\1\u027b\26\30"+
    "\30\0\3\30\7\0\3\30\4\0\1\30\1\u027c\30\30"+
    "\30\0\1\u027d\2\30\7\0\3\30\4\0\32\30\30\0"+
    "\3\30\7\0\3\30\4\0\11\30\1\u027e\20\30\30\0"+
    "\3\30\7\0\3\30\4\0\16\30\1\u027f\13\30\30\0"+
    "\3\30\7\0\3\30\4\0\1\u0280\31\30\30\0\3\30"+
    "\7\0\3\30\4\0\24\30\1\u0281\5\30\30\0\3\30"+
    "\7\0\3\30\4\0\5\30\1\u0282\24\30\30\0\3\30"+
    "\7\0\3\30\4\0\5\30\1\u0283\24\30\30\0\3\30"+
    "\7\0\3\30\4\0\5\30\1\u0284\24\30\30\0\3\30"+
    "\7\0\3\30\4\0\23\30\1\u0285\6\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\u0286\31\30\30\0\3\30\7\0"+
    "\3\30\4\0\1\30\1\u0287\30\30\30\0\3\30\7\0"+
    "\3\30\4\0\10\30\1\u0288\21\30\30\0\3\30\7\0"+
    "\3\30\4\0\23\30\1\u0289\6\30\30\0\3\30\7\0"+
    "\3\30\4\0\22\30\1\u028a\7\30\30\0\3\30\7\0"+
    "\3\30\4\0\22\30\1\u028b\7\30\30\0\3\30\7\0"+
    "\3\30\4\0\12\30\1\u028c\17\30\30\0\1\u028d\2\30"+
    "\7\0\3\30\4\0\32\30\30\0\3\30\7\0\3\30"+
    "\4\0\11\30\1\u028e\20\30\30\0\3\30\7\0\3\30"+
    "\4\0\16\30\1\u028f\13\30\30\0\3\30\7\0\3\30"+
    "\4\0\1\u0290\31\30\30\0\3\30\7\0\3\30\4\0"+
    "\24\30\1\u0291\5\30\30\0\3\30\7\0\3\30\4\0"+
    "\5\30\1\u0292\24\30\30\0\3\30\7\0\3\30\4\0"+
    "\5\30\1\u0293\24\30\30\0\3\30\7\0\3\30\4\0"+
    "\4\30\1\u0294\25\30\30\0\3\30\7\0\3\30\4\0"+
    "\16\30\1\u0295\13\30\30\0\3\30\7\0\3\30\4\0"+
    "\5\30\1\u0296\24\30\30\0\3\30\7\0\3\30\4\0"+
    "\23\30\1\u0297\6\30\30\0\3\30\7\0\3\30\4\0"+
    "\15\30\1\u0298\14\30\30\0\3\30\7\0\3\30\4\0"+
    "\11\30\1\u0299\20\30\30\0\3\30\7\0\3\30\4\0"+
    "\23\30\1\u029a\6\30\30\0\3\30\7\0\3\30\4\0"+
    "\7\30\1\u029b\22\30\30\0\3\30\7\0\3\30\4\0"+
    "\21\30\1\u029c\10\30\30\0\3\30\7\0\3\30\4\0"+
    "\23\30\1\u029d\6\30\30\0\3\30\7\0\3\30\4\0"+
    "\21\30\1\u029e\10\30\26\0\1\u029f\1\0\3\30\7\0"+
    "\3\30\4\0\1\u02a0\31\30\30\0\3\30\7\0\3\30"+
    "\4\0\1\u02a1\31\30\30\0\3\30\7\0\3\30\4\0"+
    "\23\30\1\u02a2\6\30\30\0\3\30\7\0\3\30\4\0"+
    "\11\30\1\u02a3\20\30\30\0\3\30\7\0\3\30\4\0"+
    "\16\30\1\u02a4\13\30\30\0\3\30\7\0\3\30\4\0"+
    "\24\30\1\u02a5\5\30\30\0\3\30\7\0\3\30\4\0"+
    "\5\30\1\u02a6\24\30\30\0\3\30\7\0\3\30\4\0"+
    "\5\30\1\u02a7\24\30\30\0\3\30\7\0\3\30\4\0"+
    "\13\30\1\u02a8\16\30\30\0\3\30\7\0\3\30\4\0"+
    "\16\30\1\u02a9\13\30\30\0\3\30\7\0\3\30\4\0"+
    "\15\30\1\u02aa\14\30\30\0\3\30\7\0\3\30\4\0"+
    "\5\30\1\u02ab\24\30\30\0\3\30\7\0\3\30\4\0"+
    "\21\30\1\u02ac\10\30\30\0\3\30\7\0\3\30\4\0"+
    "\23\30\1\u02ad\6\30\30\0\3\30\7\0\3\30\4\0"+
    "\16\30\1\u02ae\13\30\30\0\3\30\7\0\3\30\4\0"+
    "\1\30\1\u02af\30\30\30\0\3\30\7\0\3\30\4\0"+
    "\13\30\1\u02b0\16\30\30\0\3\30\7\0\3\30\4\0"+
    "\25\30\1\u02b1\4\30\30\0\3\30\7\0\3\30\4\0"+
    "\15\30\1\u02b2\14\30\30\0\3\30\7\0\3\30\4\0"+
    "\23\30\1\u02b3\6\30\30\0\3\30\7\0\3\30\4\0"+
    "\4\30\1\u02b4\25\30\25\0\1\u02b5\105\0\3\u02b6\100\0"+
    "\3\30\7\0\3\30\4\0\21\30\1\u02b7\10\30\30\0"+
    "\3\30\7\0\3\30\4\0\23\30\1\u02b8\6\30\30\0"+
    "\3\30\7\0\3\30\4\0\21\30\1\u02b9\10\30\30\0"+
    "\3\30\7\0\3\30\4\0\30\30\1\u02ba\1\30\30\0"+
    "\3\30\7\0\3\30\4\0\5\30\1\u02bb\24\30\30\0"+
    "\3\30\7\0\3\30\4\0\3\30\1\u02bc\17\30\1\u02bd"+
    "\6\30\30\0\3\30\7\0\3\30\4\0\11\30\1\u02be"+
    "\20\30\30\0\3\30\7\0\3\30\4\0\14\30\1\u02bf"+
    "\11\30\1\u02c0\1\30\1\u02c1\1\30\30\0\3\30\7\0"+
    "\3\30\4\0\30\30\1\u02c2\1\30\30\0\3\30\7\0"+
    "\3\30\4\0\5\30\1\u02c3\24\30\30\0\3\30\7\0"+
    "\3\30\4\0\15\30\1\u02c4\14\30\30\0\3\30\7\0"+
    "\3\30\4\0\22\30\1\u02c5\7\30\30\0\3\30\7\0"+
    "\3\30\4\0\14\30\1\u02c6\3\30\1\u02c7\7\30\1\u02c8"+
    "\1\30\30\0\3\30\7\0\3\30\4\0\23\30\1\u02c9"+
    "\6\30\30\0\3\30\7\0\3\30\4\0\7\30\1\u02ca"+
    "\22\30\30\0\3\30\7\0\3\30\4\0\1\u02cb\31\30"+
    "\30\0\3\30\7\0\3\30\4\0\15\30\1\u02cc\14\30"+
    "\30\0\3\30\7\0\3\30\4\0\22\30\1\u02cd\7\30"+
    "\30\0\3\30\7\0\3\30\4\0\5\30\1\u02ce\24\30"+
    "\30\0\3\30\7\0\3\30\4\0\5\30\1\u02cf\24\30"+
    "\30\0\3\30\7\0\3\30\4\0\3\30\1\u02d0\26\30"+
    "\30\0\3\30\7\0\3\30\4\0\1\u02d1\31\30\30\0"+
    "\3\30\7\0\3\30\4\0\22\30\1\u02d2\7\30\30\0"+
    "\3\30\7\0\3\30\4\0\15\30\1\u02d3\14\30\30\0"+
    "\3\30\7\0\3\30\4\0\4\30\1\u02d4\1\30\1\u02d5"+
    "\5\30\1\u02d6\3\30\1\u02d7\5\30\1\u02d8\1\30\1\u02d9"+
    "\1\30\30\0\3\30\7\0\3\30\4\0\1\30\1\u02da"+
    "\30\30\30\0\3\30\7\0\3\30\4\0\5\30\1\u02db"+
    "\24\30\30\0\3\30\7\0\3\30\4\0\1\30\1\u02dc"+
    "\30\30\30\0\3\30\7\0\3\30\4\0\26\30\1\u02dd"+
    "\3\30\30\0\3\30\7\0\3\30\4\0\1\30\1\u02de"+
    "\30\30\30\0\3\30\7\0\3\30\4\0\1\30\1\u02df"+
    "\30\30\30\0\3\30\7\0\3\30\4\0\13\30\1\u02e0"+
    "\16\30\30\0\3\30\7\0\3\30\4\0\22\30\1\u02e1"+
    "\7\30\30\0\3\30\7\0\3\30\4\0\5\30\1\u02e2"+
    "\24\30\30\0\3\30\7\0\3\30\4\0\1\u02e3\31\30"+
    "\30\0\3\30\7\0\3\30\4\0\1\u02e4\31\30\30\0"+
    "\3\30\7\0\3\30\4\0\1\u02e5\31\30\30\0\3\30"+
    "\7\0\3\30\4\0\22\30\1\u02e6\7\30\30\0\3\30"+
    "\7\0\3\30\4\0\15\30\1\u02e7\14\30\30\0\3\30"+
    "\7\0\3\30\4\0\4\30\1\u02e8\1\30\1\u02e9\5\30"+
    "\1\u02ea\3\30\1\u02eb\5\30\1\u02ec\1\30\1\u02ed\1\30"+
    "\30\0\3\30\7\0\3\30\4\0\1\30\1\u02ee\30\30"+
    "\30\0\3\30\7\0\3\30\4\0\5\30\1\u02ef\24\30"+
    "\30\0\3\30\7\0\3\30\4\0\1\30\1\u02f0\30\30"+
    "\30\0\3\30\7\0\3\30\4\0\5\30\1\u02f1\24\30"+
    "\30\0\3\30\7\0\3\30\4\0\16\30\1\u02f2\13\30"+
    "\30\0\3\30\7\0\3\30\4\0\5\30\1\u02f3\24\30"+
    "\30\0\3\30\7\0\3\30\4\0\3\30\1\u02f4\26\30"+
    "\30\0\3\30\7\0\3\30\4\0\15\30\1\u02f5\14\30"+
    "\30\0\3\30\7\0\3\30\4\0\30\30\1\u02f6\1\30"+
    "\30\0\3\30\7\0\3\30\4\0\4\30\1\u02f7\25\30"+
    "\72\0\1\u02f8\40\0\3\30\7\0\3\30\4\0\14\30"+
    "\1\u02f9\15\30\30\0\3\30\7\0\3\30\4\0\13\30"+
    "\1\u02fa\16\30\30\0\3\30\7\0\3\30\4\0\10\30"+
    "\1\u02fb\21\30\30\0\3\30\7\0\3\30\4\0\22\30"+
    "\1\u02fc\7\30\30\0\3\30\7\0\3\30\4\0\15\30"+
    "\1\u02fd\14\30\30\0\3\30\7\0\3\30\4\0\1\30"+
    "\1\u02fe\30\30\30\0\3\30\7\0\3\30\4\0\5\30"+
    "\1\u02ff\24\30\30\0\3\30\7\0\3\30\4\0\1\30"+
    "\1\u0300\30\30\30\0\3\30\7\0\3\30\4\0\26\30"+
    "\1\u0301\3\30\30\0\3\30\7\0\3\30\4\0\7\30"+
    "\1\u0302\22\30\30\0\3\30\7\0\3\30\4\0\15\30"+
    "\1\u0303\14\30\30\0\3\30\7\0\3\30\4\0\5\30"+
    "\1\u0304\24\30\30\0\3\30\7\0\3\30\4\0\4\30"+
    "\1\u0305\25\30\30\0\3\30\7\0\3\30\4\0\23\30"+
    "\1\u0306\6\30\30\0\3\30\7\0\3\30\4\0\11\30"+
    "\1\u0307\20\30\30\0\3\30\7\0\3\30\4\0\1\u0308"+
    "\31\30\30\0\3\30\7\0\3\30\4\0\1\30\1\u0309"+
    "\30\30\30\0\3\u030a\73\0\1\u030b\1\0\1\u030c\1\u030d"+
    "\1\0\3\u030b\1\u030c\4\0\1\u030c\41\0\1\u030c\1\0"+
    "\1\u030c\3\0\1\u030b\22\0\3\30\7\0\3\30\4\0"+
    "\1\u030e\31\30\30\0\3\30\7\0\3\30\4\0\1\u030f"+
    "\31\30\30\0\3\30\7\0\3\30\4\0\24\30\1\u0310"+
    "\5\30\30\0\3\30\7\0\3\30\4\0\11\30\1\u0311"+
    "\20\30\30\0\3\30\7\0\3\30\4\0\22\30\1\u0312"+
    "\7\30\30\0\3\30\7\0\3\30\4\0\16\30\1\u0313"+
    "\13\30\30\0\3\30\7\0\3\30\4\0\5\30\1\u0314"+
    "\24\30\30\0\3\30\7\0\3\30\4\0\5\30\1\u0315"+
    "\24\30\30\0\3\30\7\0\3\30\4\0\16\30\1\u0316"+
    "\13\30\30\0\3\30\7\0\3\30\4\0\24\30\1\u0317"+
    "\5\30\30\0\3\30\7\0\3\30\4\0\5\30\1\u0318"+
    "\24\30\30\0\3\30\7\0\3\30\4\0\11\30\1\u0319"+
    "\20\30\30\0\3\30\7\0\3\30\4\0\4\30\1\u031a"+
    "\25\30\30\0\3\30\7\0\3\30\4\0\23\30\1\u031b"+
    "\6\30\30\0\3\30\7\0\3\30\4\0\4\30\1\u031c"+
    "\25\30\30\0\3\30\7\0\3\30\4\0\16\30\1\u031d"+
    "\13\30\30\0\3\30\7\0\3\30\4\0\5\30\1\u031e"+
    "\24\30\30\0\3\30\7\0\3\30\4\0\4\30\1\u031f"+
    "\25\30\30\0\3\30\7\0\3\30\4\0\3\30\1\u0320"+
    "\26\30\30\0\3\30\7\0\3\30\4\0\23\30\1\u0321"+
    "\6\30\30\0\3\30\7\0\3\30\4\0\1\30\1\u0322"+
    "\30\30\30\0\3\30\7\0\3\30\4\0\11\30\1\u0323"+
    "\20\30\30\0\3\30\7\0\3\30\4\0\16\30\1\u0324"+
    "\13\30\30\0\3\30\7\0\3\30\4\0\24\30\1\u0325"+
    "\5\30\30\0\3\30\7\0\3\30\4\0\5\30\1\u0326"+
    "\24\30\30\0\3\30\7\0\3\30\4\0\5\30\1\u0327"+
    "\24\30\30\0\3\30\7\0\3\30\4\0\21\30\1\u0328"+
    "\10\30\30\0\3\30\7\0\3\30\4\0\12\30\1\u0329"+
    "\17\30\30\0\3\30\7\0\3\30\4\0\21\30\1\u032a"+
    "\10\30\30\0\3\30\7\0\3\30\4\0\7\30\1\u032b"+
    "\22\30\30\0\3\30\7\0\3\30\4\0\1\u032c\31\30"+
    "\30\0\3\30\7\0\3\30\4\0\1\u032d\31\30\30\0"+
    "\3\30\7\0\3\30\4\0\21\30\1\u032e\10\30\30\0"+
    "\3\30\7\0\3\30\4\0\1\30\1\u032f\30\30\30\0"+
    "\3\30\7\0\3\30\4\0\1\30\1\u0330\30\30\30\0"+
    "\3\30\7\0\3\30\4\0\4\30\1\u0331\25\30\30\0"+
    "\3\30\7\0\3\30\4\0\3\30\1\u0332\26\30\30\0"+
    "\3\30\7\0\3\30\4\0\23\30\1\u0333\6\30\30\0"+
    "\3\30\7\0\3\30\4\0\1\30\1\u0334\30\30\30\0"+
    "\3\30\7\0\3\30\4\0\11\30\1\u0335\20\30\30\0"+
    "\3\30\7\0\3\30\4\0\16\30\1\u0336\13\30\30\0"+
    "\3\30\7\0\3\30\4\0\24\30\1\u0337\5\30\30\0"+
    "\3\30\7\0\3\30\4\0\5\30\1\u0338\24\30\30\0"+
    "\3\30\7\0\3\30\4\0\5\30\1\u0339\24\30\30\0"+
    "\3\30\7\0\3\30\4\0\21\30\1\u033a\10\30\30\0"+
    "\3\30\7\0\3\30\4\0\12\30\1\u033b\17\30\30\0"+
    "\3\30\7\0\3\30\4\0\21\30\1\u033c\10\30\30\0"+
    "\3\30\7\0\3\30\4\0\12\30\1\u033d\17\30\30\0"+
    "\3\30\7\0\3\30\4\0\4\30\1\u033e\25\30\30\0"+
    "\3\30\7\0\3\30\4\0\5\30\1\u033f\24\30\30\0"+
    "\3\30\7\0\3\30\4\0\7\30\1\u0340\22\30\30\0"+
    "\3\30\7\0\3\30\4\0\1\u0341\31\30\75\0\1\u0342"+
    "\35\0\3\30\7\0\3\30\4\0\16\30\1\u0343\13\30"+
    "\30\0\3\30\7\0\3\30\4\0\5\30\1\u0344\24\30"+
    "\30\0\3\30\7\0\3\30\4\0\16\30\1\u0345\13\30"+
    "\30\0\3\30\7\0\3\30\4\0\3\30\1\u0346\26\30"+
    "\30\0\3\30\7\0\3\30\4\0\23\30\1\u0347\6\30"+
    "\30\0\3\30\7\0\3\30\4\0\21\30\1\u0348\10\30"+
    "\30\0\3\30\7\0\3\30\4\0\12\30\1\u0349\17\30"+
    "\30\0\3\30\7\0\3\30\4\0\21\30\1\u034a\10\30"+
    "\30\0\3\30\7\0\3\30\4\0\23\30\1\u034b\6\30"+
    "\30\0\3\30\7\0\3\30\4\0\5\30\1\u034c\24\30"+
    "\30\0\3\30\7\0\3\30\4\0\3\30\1\u034d\26\30"+
    "\30\0\3\30\7\0\3\30\4\0\14\30\1\u034e\13\30"+
    "\1\u034f\1\30\30\0\3\30\7\0\3\30\4\0\30\30"+
    "\1\u0350\1\30\30\0\3\u0351\73\0\1\u030c\1\0\1\u030c"+
    "\2\0\4\u030c\4\0\1\u030c\41\0\1\u030c\1\0\1\u030c"+
    "\3\0\1\u030c\22\0\3\30\7\0\3\30\4\0\2\30"+
    "\1\u0352\27\30\30\0\3\30\7\0\3\30\4\0\14\30"+
    "\1\u0353\3\30\1\u0354\7\30\1\u0355\1\30\30\0\3\30"+
    "\7\0\3\30\4\0\21\30\1\u0356\10\30\30\0\3\30"+
    "\7\0\3\30\4\0\14\30\1\u0357\15\30\30\0\3\30"+
    "\7\0\3\30\4\0\23\30\1\u0358\6\30\30\0\3\30"+
    "\7\0\3\30\4\0\15\30\1\u0359\14\30\30\0\3\30"+
    "\7\0\3\30\4\0\5\30\1\u035a\24\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\30\1\u035b\30\30\30\0\3\30"+
    "\7\0\3\30\4\0\15\30\1\u035c\14\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\30\1\u035d\30\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\30\1\u035e\30\30\30\0\3\30"+
    "\7\0\3\30\4\0\16\30\1\u035f\13\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\30\1\u0360\30\30\30\0\3\30"+
    "\7\0\3\30\4\0\22\30\1\u0361\7\30\30\0\3\30"+
    "\7\0\3\30\4\0\6\30\1\u0362\23\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\30\1\u0363\30\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\30\1\u0364\30\30\30\0\3\30"+
    "\7\0\3\30\4\0\10\30\1\u0365\21\30\30\0\3\30"+
    "\7\0\3\30\4\0\30\30\1\u0366\1\30\30\0\3\30"+
    "\7\0\3\30\4\0\22\30\1\u0367\7\30\30\0\3\30"+
    "\7\0\3\30\4\0\15\30\1\u0368\14\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\30\1\u0369\30\30\30\0\3\30"+
    "\7\0\3\30\4\0\5\30\1\u036a\24\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\30\1\u036b\30\30\30\0\3\30"+
    "\7\0\3\30\4\0\23\30\1\u036c\6\30\30\0\3\30"+
    "\7\0\3\30\4\0\16\30\1\u036d\13\30\30\0\3\30"+
    "\7\0\3\30\4\0\20\30\1\u036e\7\30\1\u036f\1\30"+
    "\30\0\3\30\7\0\3\30\4\0\1\30\1\u0370\30\30"+
    "\30\0\3\30\7\0\3\30\4\0\22\30\1\u0371\7\30"+
    "\30\0\3\30\7\0\3\30\4\0\7\30\1\u0372\22\30"+
    "\30\0\3\30\7\0\3\30\4\0\7\30\1\u0373\22\30"+
    "\30\0\3\30\7\0\3\30\4\0\1\30\1\u0374\30\30"+
    "\30\0\3\30\7\0\3\30\4\0\1\30\1\u0375\30\30"+
    "\30\0\3\30\7\0\3\30\4\0\10\30\1\u0376\21\30"+
    "\30\0\3\30\7\0\3\30\4\0\30\30\1\u0377\1\30"+
    "\30\0\3\30\7\0\3\30\4\0\22\30\1\u0378\7\30"+
    "\30\0\3\30\7\0\3\30\4\0\15\30\1\u0379\14\30"+
    "\30\0\3\30\7\0\3\30\4\0\1\30\1\u037a\30\30"+
    "\30\0\3\30\7\0\3\30\4\0\5\30\1\u037b\24\30"+
    "\30\0\3\30\7\0\3\30\4\0\1\30\1\u037c\30\30"+
    "\30\0\3\30\7\0\3\30\4\0\23\30\1\u037d\6\30"+
    "\30\0\3\30\7\0\3\30\4\0\11\30\1\u037e\20\30"+
    "\30\0\3\30\7\0\3\30\4\0\5\30\1\u037f\24\30"+
    "\66\0\1\u0380\44\0\3\30\7\0\3\30\4\0\4\30"+
    "\1\u0381\25\30\30\0\3\30\7\0\3\30\4\0\15\30"+
    "\1\u0382\14\30\30\0\3\30\7\0\3\30\4\0\4\30"+
    "\1\u0383\25\30\30\0\3\30\7\0\3\30\4\0\1\30"+
    "\1\u0384\30\30\30\0\3\30\7\0\3\30\4\0\10\30"+
    "\1\u0385\21\30\30\0\3\30\7\0\3\30\4\0\23\30"+
    "\1\u0386\6\30\30\0\3\30\7\0\3\30\4\0\5\30"+
    "\1\u0387\24\30\30\0\3\30\7\0\3\30\4\0\16\30"+
    "\1\u0388\13\30\30\0\3\30\7\0\3\30\4\0\5\30"+
    "\1\u0389\24\30\74\0\1\u038a\36\0\3\30\7\0\3\30"+
    "\4\0\5\30\1\u038b\24\30\30\0\3\30\7\0\3\30"+
    "\4\0\16\30\1\u038c\13\30\30\0\3\30\7\0\3\30"+
    "\4\0\24\30\1\u038d\5\30\30\0\3\30\7\0\3\30"+
    "\4\0\5\30\1\u038e\24\30\30\0\3\30\7\0\3\30"+
    "\4\0\21\30\1\u038f\10\30\30\0\3\30\7\0\3\30"+
    "\4\0\5\30\1\u0390\24\30\30\0\3\30\7\0\3\30"+
    "\4\0\11\30\1\u0391\20\30\30\0\3\30\7\0\3\30"+
    "\4\0\23\30\1\u0392\6\30\30\0\3\30\7\0\3\30"+
    "\4\0\12\30\1\u0393\17\30\30\0\3\30\7\0\3\30"+
    "\4\0\21\30\1\u0394\10\30\30\0\3\30\7\0\3\30"+
    "\4\0\23\30\1\u0395\6\30\30\0\3\30\7\0\3\30"+
    "\4\0\21\30\1\u0396\10\30\30\0\3\30\7\0\3\30"+
    "\4\0\21\30\1\u0397\10\30\30\0\3\30\7\0\3\30"+
    "\4\0\15\30\1\u0398\14\30\30\0\3\30\7\0\3\30"+
    "\4\0\30\30\1\u0399\1\30\30\0\3\30\7\0\3\30"+
    "\4\0\30\30\1\u039a\1\30\30\0\3\30\7\0\3\30"+
    "\4\0\13\30\1\u039b\16\30\30\0\3\30\7\0\3\30"+
    "\4\0\22\30\1\u039c\7\30\30\0\3\30\7\0\3\30"+
    "\4\0\3\30\1\u039d\26\30\30\0\3\30\7\0\3\30"+
    "\4\0\23\30\1\u039e\6\30\30\0\3\30\7\0\3\30"+
    "\4\0\21\30\1\u039f\10\30\30\0\3\30\7\0\3\30"+
    "\4\0\12\30\1\u03a0\17\30\30\0\3\30\7\0\3\30"+
    "\4\0\21\30\1\u03a1\10\30\30\0\3\30\7\0\3\30"+
    "\4\0\5\30\1\u03a2\24\30\30\0\3\30\7\0\3\30"+
    "\4\0\24\30\1\u03a3\5\30\30\0\3\30\7\0\3\30"+
    "\4\0\5\30\1\u03a4\24\30\30\0\3\30\7\0\3\30"+
    "\4\0\7\30\1\u03a5\22\30\30\0\3\30\7\0\3\30"+
    "\4\0\1\u03a6\31\30\30\0\3\30\7\0\3\30\4\0"+
    "\16\30\1\u03a7\13\30\30\0\3\30\7\0\3\30\4\0"+
    "\16\30\1\u03a8\13\30\30\0\3\30\7\0\3\30\4\0"+
    "\30\30\1\u03a9\1\30\30\0\3\30\7\0\3\30\4\0"+
    "\13\30\1\u03aa\16\30\30\0\3\30\7\0\3\30\4\0"+
    "\22\30\1\u03ab\7\30\30\0\3\30\7\0\3\30\4\0"+
    "\3\30\1\u03ac\26\30\30\0\3\30\7\0\3\30\4\0"+
    "\23\30\1\u03ad\6\30\30\0\3\30\7\0\3\30\4\0"+
    "\21\30\1\u03ae\10\30\30\0\3\30\7\0\3\30\4\0"+
    "\12\30\1\u03af\17\30\30\0\3\30\7\0\3\30\4\0"+
    "\21\30\1\u03b0\10\30\30\0\3\30\7\0\3\30\4\0"+
    "\5\30\1\u03b1\24\30\30\0\3\30\7\0\3\30\4\0"+
    "\4\30\1\u03b2\25\30\30\0\3\30\7\0\3\30\4\0"+
    "\15\30\1\u03b3\14\30\52\0\1\u03b4\60\0\3\30\7\0"+
    "\3\30\4\0\5\30\1\u03b5\24\30\30\0\3\30\7\0"+
    "\3\30\4\0\7\30\1\u03b6\22\30\30\0\3\30\7\0"+
    "\3\30\4\0\13\30\1\u03b7\16\30\30\0\3\30\7\0"+
    "\3\30\4\0\5\30\1\u03b8\24\30\30\0\3\30\7\0"+
    "\3\30\4\0\15\30\1\u03b9\14\30\30\0\3\30\7\0"+
    "\3\30\4\0\1\30\1\u03ba\30\30\30\0\3\u03bb\100\0"+
    "\3\30\7\0\3\30\4\0\13\30\1\u03bc\16\30\30\0"+
    "\3\30\7\0\3\30\4\0\15\30\1\u03bd\14\30\30\0"+
    "\3\30\7\0\3\30\4\0\1\30\1\u03be\30\30\30\0"+
    "\3\30\7\0\3\30\4\0\1\30\1\u03bf\30\30\30\0"+
    "\3\30\7\0\3\30\4\0\5\30\1\u03c0\24\30\30\0"+
    "\3\30\7\0\3\30\4\0\31\30\1\u03c1\30\0\3\30"+
    "\7\0\3\30\4\0\15\30\1\u03c2\14\30\30\0\3\30"+
    "\7\0\3\30\4\0\10\30\1\u03c3\21\30\30\0\3\30"+
    "\7\0\3\30\4\0\10\30\1\u03c4\21\30\30\0\3\30"+
    "\7\0\3\30\4\0\23\30\1\u03c5\6\30\30\0\3\30"+
    "\7\0\3\30\4\0\22\30\1\u03c6\7\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\u03c7\31\30\30\0\3\30\7\0"+
    "\3\30\4\0\1\30\1\u03c8\30\30\30\0\3\30\7\0"+
    "\3\30\4\0\10\30\1\u03c9\21\30\30\0\3\30\7\0"+
    "\3\30\4\0\23\30\1\u03ca\6\30\30\0\3\30\7\0"+
    "\3\30\4\0\22\30\1\u03cb\7\30\30\0\3\30\7\0"+
    "\3\30\4\0\22\30\1\u03cc\7\30\30\0\3\30\7\0"+
    "\3\30\4\0\21\30\1\u03cd\10\30\30\0\3\30\7\0"+
    "\3\30\4\0\1\30\1\u03ce\30\30\30\0\3\30\7\0"+
    "\3\30\4\0\1\30\1\u03cf\30\30\30\0\3\30\7\0"+
    "\3\30\4\0\16\30\1\u03d0\13\30\30\0\3\30\7\0"+
    "\3\30\4\0\1\30\1\u03d1\30\30\30\0\3\30\7\0"+
    "\3\30\4\0\22\30\1\u03d2\7\30\30\0\3\30\7\0"+
    "\3\30\4\0\1\u03d3\31\30\30\0\3\30\7\0\3\30"+
    "\4\0\1\30\1\u03d4\30\30\30\0\3\30\7\0\3\30"+
    "\4\0\10\30\1\u03d5\21\30\30\0\3\30\7\0\3\30"+
    "\4\0\23\30\1\u03d6\6\30\30\0\3\30\7\0\3\30"+
    "\4\0\22\30\1\u03d7\7\30\30\0\3\30\7\0\3\30"+
    "\4\0\22\30\1\u03d8\7\30\30\0\3\30\7\0\3\30"+
    "\4\0\21\30\1\u03d9\10\30\30\0\3\30\7\0\3\30"+
    "\4\0\6\30\1\u03da\23\30\73\0\1\u03db\37\0\3\30"+
    "\7\0\3\30\4\0\23\30\1\u03dc\6\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\u03dd\31\30\30\0\3\30\7\0"+
    "\3\30\4\0\21\30\1\u03de\10\30\30\0\3\30\7\0"+
    "\3\30\4\0\23\30\1\u03df\6\30\30\0\3\30\7\0"+
    "\3\30\4\0\21\30\1\u03e0\10\30\30\0\3\u03e1\100\0"+
    "\3\30\7\0\3\30\4\0\16\30\1\u03e2\13\30\30\0"+
    "\3\30\7\0\3\30\4\0\23\30\1\u03e3\6\30\30\0"+
    "\3\30\7\0\3\30\4\0\21\30\1\u03e4\10\30\30\0"+
    "\3\30\7\0\3\30\4\0\21\30\1\u03e5\10\30\30\0"+
    "\3\30\7\0\3\30\4\0\15\30\1\u03e6\14\30\30\0"+
    "\3\30\7\0\3\30\4\0\16\30\1\u03e7\13\30\30\0"+
    "\3\30\7\0\3\30\4\0\3\30\1\u03e8\26\30\30\0"+
    "\3\30\7\0\3\30\4\0\5\30\1\u03e9\24\30\30\0"+
    "\3\30\7\0\3\30\4\0\20\30\1\u03ea\7\30\1\u03eb"+
    "\1\30\30\0\3\30\7\0\3\30\4\0\13\30\1\u03ec"+
    "\16\30\30\0\3\30\7\0\3\30\4\0\22\30\1\u03ed"+
    "\7\30\30\0\3\30\7\0\3\30\4\0\5\30\1\u03ee"+
    "\24\30\30\0\3\30\7\0\3\30\4\0\21\30\1\u03ef"+
    "\10\30\30\0\3\30\7\0\3\30\4\0\21\30\1\u03f0"+
    "\10\30\30\0\3\30\7\0\3\30\4\0\7\30\1\u03f1"+
    "\22\30\30\0\3\30\7\0\3\30\4\0\20\30\1\u03f2"+
    "\7\30\1\u03f3\1\30\30\0\3\30\7\0\3\30\4\0"+
    "\13\30\1\u03f4\16\30\30\0\3\30\7\0\3\30\4\0"+
    "\22\30\1\u03f5\7\30\30\0\3\30\7\0\3\30\4\0"+
    "\5\30\1\u03f6\24\30\30\0\3\30\7\0\3\30\4\0"+
    "\16\30\1\u03f7\13\30\30\0\3\30\7\0\3\30\4\0"+
    "\10\30\1\u03f8\21\30\30\0\3\30\7\0\3\30\4\0"+
    "\20\30\1\u03f9\7\30\1\u03fa\1\30\30\0\3\30\7\0"+
    "\3\30\4\0\10\30\1\u03fb\21\30\33\0\1\u03fc\77\0"+
    "\3\30\7\0\3\30\4\0\26\30\1\u03fd\3\30\30\0"+
    "\3\30\7\0\3\30\4\0\10\30\1\u03fe\21\30\30\0"+
    "\3\30\7\0\3\30\4\0\23\30\1\u03ff\6\30\30\0"+
    "\3\30\7\0\3\30\4\0\3\30\1\u0400\26\30\30\0"+
    "\3\30\7\0\3\30\4\0\15\30\1\u0401\14\30\30\0"+
    "\3\30\7\0\3\30\4\0\23\30\1\u0402\6\30\30\0"+
    "\3\30\7\0\3\30\4\0\21\30\1\u0403\10\30\30\0"+
    "\3\30\7\0\3\30\4\0\24\30\1\u0404\5\30\30\0"+
    "\3\30\7\0\3\30\4\0\5\30\1\u0405\24\30\30\0"+
    "\3\30\7\0\3\30\4\0\1\u0406\31\30\30\0\3\30"+
    "\7\0\3\30\4\0\21\30\1\u0407\10\30\30\0\3\30"+
    "\7\0\3\30\4\0\23\30\1\u0408\6\30\30\0\3\30"+
    "\7\0\3\30\4\0\22\30\1\u0409\7\30\30\0\3\30"+
    "\7\0\3\30\4\0\16\30\1\u040a\13\30\30\0\3\30"+
    "\7\0\3\30\4\0\24\30\1\u040b\5\30\30\0\3\30"+
    "\7\0\3\30\4\0\5\30\1\u040c\24\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\u040d\31\30\30\0\3\30\7\0"+
    "\3\30\4\0\21\30\1\u040e\10\30\30\0\3\30\7\0"+
    "\3\30\4\0\21\30\1\u040f\10\30\30\0\3\30\7\0"+
    "\3\30\4\0\24\30\1\u0410\5\30\30\0\3\30\7\0"+
    "\3\30\4\0\5\30\1\u0411\24\30\30\0\3\u0412\100\0"+
    "\3\30\7\0\3\30\4\0\5\30\1\u0413\24\30\30\0"+
    "\3\30\7\0\3\30\4\0\30\30\1\u0414\1\30\30\0"+
    "\3\30\7\0\3\30\4\0\5\30\1\u0415\24\30\30\0"+
    "\3\30\7\0\3\30\4\0\1\30\1\u0416\30\30\30\0"+
    "\3\30\7\0\3\30\4\0\1\30\1\u0417\30\30\30\0"+
    "\3\30\7\0\3\30\4\0\20\30\1\u0418\7\30\1\u0419"+
    "\1\30\30\0\3\30\7\0\3\30\4\0\22\30\1\u041a"+
    "\7\30\30\0\3\30\7\0\3\30\4\0\5\30\1\u041b"+
    "\24\30\30\0\3\30\7\0\3\30\4\0\1\u041c\31\30"+
    "\30\0\3\30\7\0\3\30\4\0\1\30\1\u041d\30\30"+
    "\30\0\3\30\7\0\3\30\4\0\1\30\1\u041e\30\30"+
    "\30\0\3\30\7\0\3\30\4\0\20\30\1\u041f\7\30"+
    "\1\u0420\1\30\30\0\3\30\7\0\3\30\4\0\22\30"+
    "\1\u0421\7\30\30\0\3\30\7\0\3\30\4\0\3\30"+
    "\1\u0422\26\30\30\0\3\30\7\0\3\30\4\0\1\30"+
    "\1\u0423\30\30\30\0\3\30\7\0\3\30\4\0\1\30"+
    "\1\u0424\30\30\30\0\3\u0425\100\0\3\30\7\0\3\30"+
    "\4\0\21\30\1\u0426\10\30\30\0\3\30\7\0\3\30"+
    "\4\0\21\30\1\u0427\10\30\30\0\3\30\7\0\3\30"+
    "\4\0\21\30\1\u0428\10\30\30\0\3\30\7\0\3\30"+
    "\4\0\24\30\1\u0429\5\30\30\0\3\30\7\0\3\30"+
    "\4\0\5\30\1\u042a\24\30\30\0\3\30\7\0\3\30"+
    "\4\0\21\30\1\u042b\10\30\30\0\3\30\7\0\3\30"+
    "\4\0\1\30\1\u042c\30\30\30\0\3\30\7\0\3\30"+
    "\4\0\21\30\1\u042d\10\30\30\0\3\30\7\0\3\30"+
    "\4\0\21\30\1\u042e\10\30\30\0\3\30\7\0\3\30"+
    "\4\0\24\30\1\u042f\5\30\30\0\3\30\7\0\3\30"+
    "\4\0\5\30\1\u0430\24\30\30\0\3\30\7\0\3\30"+
    "\4\0\5\30\1\u0431\24\30\30\0\3\30\7\0\3\30"+
    "\4\0\21\30\1\u0432\10\30\30\0\3\30\7\0\3\30"+
    "\4\0\21\30\1\u0433\10\30\33\0\1\u0434\77\0\3\30"+
    "\7\0\3\30\4\0\23\30\1\u0435\6\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\30\1\u0436\30\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\30\1\u0437\30\30\30\0\3\30"+
    "\7\0\3\30\4\0\22\30\1\u0438\7\30\30\0\3\30"+
    "\7\0\3\30\4\0\7\30\1\u0439\22\30\30\0\3\30"+
    "\7\0\3\30\4\0\23\30\1\u043a\6\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\30\1\u043b\30\30\30\0\3\30"+
    "\7\0\3\30\4\0\1\30\1\u043c\30\30\30\0\3\30"+
    "\7\0\3\30\4\0\4\30\1\u043d\25\30\30\0\3\30"+
    "\7\0\3\30\4\0\23\30\1\u043e\6\30\30\0\3\u043f"+
    "\100\0\3\30\7\0\3\30\4\0\5\30\1\u0440\24\30"+
    "\30\0\3\30\7\0\3\30\4\0\21\30\1\u0441\10\30"+
    "\30\0\3\30\7\0\3\30\4\0\21\30\1\u0442\10\30"+
    "\30\0\3\30\7\0\3\30\4\0\1\u0443\31\30\30\0"+
    "\3\30\7\0\3\30\4\0\16\30\1\u0444\13\30\30\0"+
    "\3\30\7\0\3\30\4\0\5\30\1\u0445\24\30\30\0"+
    "\3\30\7\0\3\30\4\0\21\30\1\u0446\10\30\30\0"+
    "\3\30\7\0\3\30\4\0\21\30\1\u0447\10\30\30\0"+
    "\3\30\7\0\3\30\4\0\5\30\1\u0448\24\30\30\0"+
    "\3\u0449\100\0\3\30\7\0\3\30\4\0\21\30\1\u044a"+
    "\10\30\30\0\3\30\7\0\3\30\4\0\23\30\1\u044b"+
    "\6\30\30\0\3\30\7\0\3\30\4\0\22\30\1\u044c"+
    "\7\30\30\0\3\30\7\0\3\30\4\0\1\30\1\u044d"+
    "\30\30\30\0\3\30\7\0\3\30\4\0\21\30\1\u044e"+
    "\10\30\30\0\3\30\7\0\3\30\4\0\23\30\1\u044f"+
    "\6\30\30\0\3\30\7\0\3\30\4\0\22\30\1\u0450"+
    "\7\30\30\0\3\30\7\0\3\30\4\0\21\30\1\u0451"+
    "\10\30\23\0\1\u0452\1\0\1\u0453\1\u0454\1\0\3\u0452"+
    "\1\u0453\4\0\1\u0453\41\0\1\u0453\1\0\1\u0453\3\0"+
    "\1\u0452\22\0\3\30\7\0\3\30\4\0\5\30\1\u0455"+
    "\24\30\30\0\3\30\7\0\3\30\4\0\7\30\1\u0456"+
    "\22\30\30\0\3\30\7\0\3\30\4\0\5\30\1\u0457"+
    "\24\30\23\0\1\u0453\1\0\1\u0453\2\0\4\u0453\4\0"+
    "\1\u0453\41\0\1\u0453\1\0\1\u0453\3\0\1\u0453\22\0"+
    "\3\30\7\0\3\30\4\0\21\30\1\u0458\10\30\30\0"+
    "\3\30\7\0\3\30\4\0\16\30\1\u0459\13\30\30\0"+
    "\3\30\7\0\3\30\4\0\21\30\1\u045a\10\30\30\0"+
    "\3\30\7\0\3\30\4\0\22\30\1\u045b\7\30\30\0"+
    "\3\30\7\0\3\30\4\0\22\30\1\u045c\7\30\7\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[59697];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\4\1\2\11\2\1\1\11\4\1\2\11\4\1"+
    "\1\11\1\1\2\11\26\1\1\11\1\1\3\11\3\1"+
    "\1\11\1\1\1\11\1\0\1\1\2\11\1\0\5\11"+
    "\1\0\1\11\1\1\1\11\1\0\1\1\1\11\1\0"+
    "\1\11\1\1\1\11\1\0\3\11\114\1\16\11\1\0"+
    "\2\11\1\1\1\0\3\11\1\0\164\1\1\11\1\1"+
    "\1\0\1\11\156\1\1\0\1\1\1\0\142\1\2\0"+
    "\137\1\2\0\71\1\1\0\25\1\2\0\101\1\1\0"+
    "\21\1\1\0\1\1\1\11\1\0\64\1\1\0\75\1"+
    "\1\0\11\1\1\0\51\1\1\0\6\1\1\0\37\1"+
    "\1\11\5\1\1\0\32\1\1\0\25\1\1\0\22\1"+
    "\1\0\16\1\1\0\12\1\1\0\11\1\1\0\11\1"+
    "\1\11\1\0\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1116];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _ApexLexer() {
    this((java.io.Reader)null);
  }
  StringBuilder string = new StringBuilder();

	/**
	* '#+' stride demarking start/end of raw string/byte literal
	*/
	private int zzShaStride = -1;

	/**
	* Dedicated storage for starting position of some previously successful
	* match
	*/
	private int zzPostponedMarkedPos = -1;

	/**
	* Dedicated nested-comment level counter
	*/
	private int zzNestedCommentLevel = 0;

	IElementType imbueBlockComment() {
	    assert(zzNestedCommentLevel == 0);
	    yybegin(YYINITIAL);

	    zzStartRead = zzPostponedMarkedPos;
	    zzPostponedMarkedPos = -1;

	    if (yylength() >= 3) {
	        if (yycharat(2) == '!') {
	            return INNER_BLOCK_DOC_COMMENT;
	        } else if (yycharat(2) == '*' && (yylength() == 3 || yycharat(3) != '*' && yycharat(3) != '/')) {
	            return OUTER_BLOCK_DOC_COMMENT;
	        }
	    }

	    return BLOCK_COMMENT;
	}

      //在这之间，可以定义一些java的中间变量，方法
      private static String zzToPrintable(CharSequence str) {
          // jflex 内置的 zzToPrintable 和 yytext 返回的结果不匹配，使用grammar-kit 的插件，会报错
          // 因此才自定义个本方法，兼容一下
          return str.toString();
      }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ApexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }

  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case IN_BLOCK_COMMENT: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [402] { zzNestedCommentLevel = 0; return imbueBlockComment(); }");
              zzNestedCommentLevel = 0; return imbueBlockComment();
            }  // fall though
            case 1117: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [97] { return WHITE_SPACE; }");
            { return WHITE_SPACE;
            }
          // fall through
          case 262: break;
          case 2:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [299] { return BANG; }");
            { return BANG;
            }
          // fall through
          case 263: break;
          case 3:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [318] { return BITAND; }");
            { return BITAND;
            }
          // fall through
          case 264: break;
          case 4:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [349] { yybegin(STRING); string.setLength(0); }");
            { yybegin(STRING); string.setLength(0);
            }
          // fall through
          case 265: break;
          case 5:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [287] { return LPAREN; }");
            { return LPAREN;
            }
          // fall through
          case 266: break;
          case 6:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [288] { return RPAREN; }");
            { return RPAREN;
            }
          // fall through
          case 267: break;
          case 7:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [316] { return MUL; }");
            { return MUL;
            }
          // fall through
          case 268: break;
          case 8:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [314] { return ADD; }");
            { return ADD;
            }
          // fall through
          case 269: break;
          case 9:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [294] { return COMMA; }");
            { return COMMA;
            }
          // fall through
          case 270: break;
          case 10:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [315] { return SUB; }");
            { return SUB;
            }
          // fall through
          case 271: break;
          case 11:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [295] { return DOT; }");
            { return DOT;
            }
          // fall through
          case 272: break;
          case 12:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [317] { return DIV; }");
            { return DIV;
            }
          // fall through
          case 273: break;
          case 13:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [339] { return INTEGERLITERALPATTERN; }");
            { return INTEGERLITERALPATTERN;
            }
          // fall through
          case 274: break;
          case 14:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [303] { return COLON; }");
            { return COLON;
            }
          // fall through
          case 275: break;
          case 15:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [293] { return SEMI; }");
            { return SEMI;
            }
          // fall through
          case 276: break;
          case 16:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [298] { return LT; }");
            { return LT;
            }
          // fall through
          case 277: break;
          case 17:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [296] { return ASSIGN; }");
            { return ASSIGN;
            }
          // fall through
          case 278: break;
          case 18:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [297] { return GT; }");
            { return GT;
            }
          // fall through
          case 279: break;
          case 19:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [302] { return QUESTION; }");
            { return QUESTION;
            }
          // fall through
          case 280: break;
          case 20:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [332] { return ATSIGN; }");
            { return ATSIGN;
            }
          // fall through
          case 281: break;
          case 21:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [334] { return IDENTIFIER; }");
            { return IDENTIFIER;
            }
          // fall through
          case 282: break;
          case 22:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [291] { return LBRACK; }");
            { return LBRACK;
            }
          // fall through
          case 283: break;
          case 23:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [292] { return RBRACK; }");
            { return RBRACK;
            }
          // fall through
          case 284: break;
          case 24:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [320] { return CARET; }");
            { return CARET;
            }
          // fall through
          case 285: break;
          case 25:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [289] { return LBRACE; }");
            { return LBRACE;
            }
          // fall through
          case 286: break;
          case 26:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [319] { return BITOR; }");
            { return BITOR;
            }
          // fall through
          case 287: break;
          case 27:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [290] { return RBRACE; }");
            { return RBRACE;
            }
          // fall through
          case 288: break;
          case 28:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [300] { return TILDE; }");
            { return TILDE;
            }
          // fall through
          case 289: break;
          case 29:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [404] {  }");
            { 
            }
          // fall through
          case 290: break;
          case 30:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [367] { string.append( yytext() );"+ZZ_NL+"     \t\t\t\t\t System.out.println(\"字符串匹配到了:\"+yytext()); }");
            { string.append( yytext() );
     					 System.out.println("字符串匹配到了:"+yytext());
            }
          // fall through
          case 291: break;
          case 31:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [386] { System.out.println(\"字符串匹配到了行终结符，error\");throw new RuntimeException(\"Unterminated string at end of line\"); }");
            { System.out.println("字符串匹配到了行终结符，error");throw new RuntimeException("Unterminated string at end of line");
            }
          // fall through
          case 292: break;
          case 32:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [361] { yybegin(YYINITIAL);"+ZZ_NL+"          \t\t\t\t\t\t\tSystem.out.println(\"字符串结束了:\"+yytext());"+ZZ_NL+"          \t\t\t\t\treturn SINGLEQUOTESTRINGLITERAL;"+ZZ_NL+"//      \t\t\t\t\t    return symbol(STRING_LITERAL, string.toString()); }");
            { yybegin(YYINITIAL);
          							System.out.println("字符串结束了:"+yytext());
          					return SINGLEQUOTESTRINGLITERAL;
//      					    return symbol(STRING_LITERAL, string.toString());
            }
          // fall through
          case 293: break;
          case 33:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [306] { return NOTEQUAL; }");
            { return NOTEQUAL;
            }
          // fall through
          case 294: break;
          case 34:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [309] { return AND; }");
            { return AND;
            }
          // fall through
          case 295: break;
          case 35:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [326] { return AND_ASSIGN; }");
            { return AND_ASSIGN;
            }
          // fall through
          case 296: break;
          case 36:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [324] { return MUL_ASSIGN; }");
            { return MUL_ASSIGN;
            }
          // fall through
          case 297: break;
          case 37:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [312] { return INC; }");
            { return INC;
            }
          // fall through
          case 298: break;
          case 38:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [322] { return ADD_ASSIGN; }");
            { return ADD_ASSIGN;
            }
          // fall through
          case 299: break;
          case 39:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [313] { return DEC; }");
            { return DEC;
            }
          // fall through
          case 300: break;
          case 40:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [323] { return SUB_ASSIGN; }");
            { return SUB_ASSIGN;
            }
          // fall through
          case 301: break;
          case 41:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [346] { yybegin(IN_BLOCK_COMMENT); yypushback(2); }");
            { yybegin(IN_BLOCK_COMMENT); yypushback(2);
            }
          // fall through
          case 302: break;
          case 42:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [342] { return LINE_COMMENT; }");
            { return LINE_COMMENT;
            }
          // fall through
          case 303: break;
          case 43:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [325] { return DIV_ASSIGN; }");
            { return DIV_ASSIGN;
            }
          // fall through
          case 304: break;
          case 44:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [340] { return LONGLITERALPATTERN; }");
            { return LONGLITERALPATTERN;
            }
          // fall through
          case 305: break;
          case 45:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [307] { return LESSANDGREATER; }");
            { return LESSANDGREATER;
            }
          // fall through
          case 306: break;
          case 46:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [304] { return EQUAL; }");
            { return EQUAL;
            }
          // fall through
          case 307: break;
          case 47:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [321] { return MAPTO; }");
            { return MAPTO;
            }
          // fall through
          case 308: break;
          case 48:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [301] { return QUESTIONDOT; }");
            { return QUESTIONDOT;
            }
          // fall through
          case 309: break;
          case 49:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [311] { return COAL; }");
            { return COAL;
            }
          // fall through
          case 310: break;
          case 50:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [328] { return XOR_ASSIGN; }");
            { return XOR_ASSIGN;
            }
          // fall through
          case 311: break;
          case 51:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [160] { return AS; }");
            { return AS;
            }
          // fall through
          case 312: break;
          case 52:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [197] { return AT; }");
            { return AT;
            }
          // fall through
          case 313: break;
          case 53:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [165] { return BY; }");
            { return BY;
            }
          // fall through
          case 314: break;
          case 54:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [107] { return DO; }");
            { return DO;
            }
          // fall through
          case 315: break;
          case 55:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [116] { return IF; }");
            { return IF;
            }
          // fall through
          case 316: break;
          case 56:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [179] { return IN; }");
            { return IN;
            }
          // fall through
          case 317: break;
          case 57:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [125] { return ON; }");
            { return ON;
            }
          // fall through
          case 318: break;
          case 58:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [168] { return SOQLOR; }");
            { return SOQLOR;
            }
          // fall through
          case 319: break;
          case 59:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [327] { return OR_ASSIGN; }");
            { return OR_ASSIGN;
            }
          // fall through
          case 320: break;
          case 60:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [310] { return OR; }");
            { return OR;
            }
          // fall through
          case 321: break;
          case 61:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [398] { if (--zzNestedCommentLevel == 0)"+ZZ_NL+"              return imbueBlockComment(); }");
            { if (--zzNestedCommentLevel == 0)
              return imbueBlockComment();
            }
          // fall through
          case 322: break;
          case 62:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [394] { if (zzNestedCommentLevel++ == 0)"+ZZ_NL+"              zzPostponedMarkedPos = zzStartRead; }");
            { if (zzNestedCommentLevel++ == 0)
              zzPostponedMarkedPos = zzStartRead;
            }
          // fall through
          case 323: break;
          case 63:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [385] { System.out.println(\"字符串匹配到了:\\\\. error\");throw new RuntimeException(\"Illegal escape sequence \\\"\"+yytext()+\"\\\"\"); }");
            { System.out.println("字符串匹配到了:\\. error");throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            }
          // fall through
          case 324: break;
          case 64:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [379] { string.append( \'\\\"\' ); System.out.println(\"字符串匹配到了:\\\"\"); }");
            { string.append( '\"' ); System.out.println("字符串匹配到了:\"");
            }
          // fall through
          case 325: break;
          case 65:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [380] { string.append( \'\\\'\' ); System.out.println(\"字符串匹配到了:\\\\\'\"); }");
            { string.append( '\'' ); System.out.println("字符串匹配到了:\\'");
            }
          // fall through
          case 326: break;
          case 66:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [381] { string.append( \'\\\\\' ); System.out.println(\"字符串匹配到了:\\\\\\\\\"); }");
            { string.append( '\\' ); System.out.println("字符串匹配到了:\\\\");
            }
          // fall through
          case 327: break;
          case 67:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [372] { string.append( \'\\b\' );"+ZZ_NL+"      \t\t\t\t\t\t\t\t\t System.out.println(\"字符串匹配到了:\\\\b\"); }");
            { string.append( '\b' );
      									 System.out.println("字符串匹配到了:\\b");
            }
          // fall through
          case 328: break;
          case 68:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [377] { string.append( \'\\f\' ); System.out.println(\"字符串匹配到了:\\\\f\"); }");
            { string.append( '\f' ); System.out.println("字符串匹配到了:\\f");
            }
          // fall through
          case 329: break;
          case 69:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [376] { string.append( \'\\n\' ); System.out.println(\"字符串匹配到了:\\\\n\"); }");
            { string.append( '\n' ); System.out.println("字符串匹配到了:\\n");
            }
          // fall through
          case 330: break;
          case 70:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [378] { string.append( \'\\r\' ) ;System.out.println(\"字符串匹配到了:\\\\r\"); }");
            { string.append( '\r' ) ;System.out.println("字符串匹配到了:\\r");
            }
          // fall through
          case 331: break;
          case 71:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [375] { string.append( \'\\t\' ); System.out.println(\"字符串匹配到了:\\\\t\"); }");
            { string.append( '\t' ); System.out.println("字符串匹配到了:\\t");
            }
          // fall through
          case 332: break;
          case 72:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [308] { return TRIPLENOTEQUAL; }");
            { return TRIPLENOTEQUAL;
            }
          // fall through
          case 333: break;
          case 73:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [341] { return NUMBERLITERALPATTERN; }");
            { return NUMBERLITERALPATTERN;
            }
          // fall through
          case 334: break;
          case 74:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [329] { return LSHIFT_ASSIGN; }");
            { return LSHIFT_ASSIGN;
            }
          // fall through
          case 335: break;
          case 75:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [305] { return TRIPLEEQUAL; }");
            { return TRIPLEEQUAL;
            }
          // fall through
          case 336: break;
          case 76:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [330] { return RSHIFT_ASSIGN; }");
            { return RSHIFT_ASSIGN;
            }
          // fall through
          case 337: break;
          case 77:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [188] { return ALL; }");
            { return ALL;
            }
          // fall through
          case 338: break;
          case 78:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [167] { return SOQLAND; }");
            { return SOQLAND;
            }
          // fall through
          case 339: break;
          case 79:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [182] { return ASC; }");
            { return ASC;
            }
          // fall through
          case 340: break;
          case 80:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [170] { return AVG; }");
            { return AVG;
            }
          // fall through
          case 341: break;
          case 81:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [176] { return END; }");
            { return END;
            }
          // fall through
          case 342: break;
          case 82:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [113] { return FOR; }");
            { return FOR;
            }
          // fall through
          case 343: break;
          case 83:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [114] { return GET; }");
            { return GET;
            }
          // fall through
          case 344: break;
          case 84:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [154] { return MAP; }");
            { return MAP;
            }
          // fall through
          case 345: break;
          case 85:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [173] { return MAX; }");
            { return MAX;
            }
          // fall through
          case 346: break;
          case 86:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [172] { return MIN; }");
            { return MIN;
            }
          // fall through
          case 347: break;
          case 87:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [123] { return NEW; }");
            { return NEW;
            }
          // fall through
          case 348: break;
          case 88:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [169] { return NOT; }");
            { return NOT;
            }
          // fall through
          case 349: break;
          case 89:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [132] { return SET; }");
            { return SET;
            }
          // fall through
          case 350: break;
          case 90:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [174] { return SUM; }");
            { return SUM;
            }
          // fall through
          case 351: break;
          case 91:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [142] { return TRY; }");
            { return TRY;
            }
          // fall through
          case 352: break;
          case 92:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [335] { return SINGLEQUOTESTRINGLITERAL; }");
            { return SINGLEQUOTESTRINGLITERAL;
            }
          // fall through
          case 353: break;
          case 93:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [331] { return URSHIFT_ASSIGN; }");
            { return URSHIFT_ASSIGN;
            }
          // fall through
          case 354: break;
          case 94:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [205] { return CUBE; }");
            { return CUBE;
            }
          // fall through
          case 355: break;
          case 95:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [195] { return DATA; }");
            { return DATA;
            }
          // fall through
          case 356: break;
          case 96:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [183] { return DESC; }");
            { return DESC;
            }
          // fall through
          case 357: break;
          case 97:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [108] { return ELSE; }");
            { return ELSE;
            }
          // fall through
          case 358: break;
          case 98:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [109] { return ENUM; }");
            { return ENUM;
            }
          // fall through
          case 359: break;
          case 99:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [273] { return FIND; }");
            { return FIND;
            }
          // fall through
          case 360: break;
          case 100:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [159] { return FROM; }");
            { return FROM;
            }
          // fall through
          case 361: break;
          case 101:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [186] { return LAST; }");
            { return LAST;
            }
          // fall through
          case 362: break;
          case 102:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [178] { return LIKE; }");
            { return LIKE;
            }
          // fall through
          case 363: break;
          case 103:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [153] { return LIST; }");
            { return LIST;
            }
          // fall through
          case 364: break;
          case 104:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [275] { return NAME; }");
            { return NAME;
            }
          // fall through
          case 365: break;
          case 105:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [124] { return NULL; }");
            { return NULL;
            }
          // fall through
          case 366: break;
          case 106:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [189] { return ROWS; }");
            { return ROWS;
            }
          // fall through
          case 367: break;
          case 107:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [177] { return THEN; }");
            { return THEN;
            }
          // fall through
          case 368: break;
          case 108:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [138] { return THIS; }");
            { return THIS;
            }
          // fall through
          case 369: break;
          case 109:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [156] { return USER; }");
            { return USER;
            }
          // fall through
          case 370: break;
          case 110:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [190] { return VIEW; }");
            { return VIEW;
            }
          // fall through
          case 371: break;
          case 111:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [147] { return VOID; }");
            { return VOID;
            }
          // fall through
          case 372: break;
          case 112:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [149] { return WHEN; }");
            { return WHEN;
            }
          // fall through
          case 373: break;
          case 113:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [151] { return WITH; }");
            { return WITH;
            }
          // fall through
          case 374: break;
          case 114:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [198] { return ABOVE; }");
            { return ABOVE;
            }
          // fall through
          case 375: break;
          case 115:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [100] { return AFTER; }");
            { return AFTER;
            }
          // fall through
          case 376: break;
          case 116:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [199] { return BELOW; }");
            { return BELOW;
            }
          // fall through
          case 377: break;
          case 117:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [102] { return BREAK; }");
            { return BREAK;
            }
          // fall through
          case 378: break;
          case 118:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [103] { return CATCH; }");
            { return CATCH;
            }
          // fall through
          case 379: break;
          case 119:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [104] { return CLASS; }");
            { return CLASS;
            }
          // fall through
          case 380: break;
          case 120:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [158] { return COUNT; }");
            { return COUNT;
            }
          // fall through
          case 381: break;
          case 121:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [274] { return EMAIL; }");
            { return EMAIL;
            }
          // fall through
          case 382: break;
          case 122:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [111] { return FINAL; }");
            { return FINAL;
            }
          // fall through
          case 383: break;
          case 123:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [185] { return FIRST; }");
            { return FIRST;
            }
          // fall through
          case 384: break;
          case 124:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [187] { return GROUP; }");
            { return GROUP;
            }
          // fall through
          case 385: break;
          case 125:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [166] { return LIMIT; }");
            { return LIMIT;
            }
          // fall through
          case 386: break;
          case 126:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [122] { return MERGE; }");
            { return MERGE;
            }
          // fall through
          case 387: break;
          case 127:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [184] { return NULLS; }");
            { return NULLS;
            }
          // fall through
          case 388: break;
          case 128:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [164] { return ORDER; }");
            { return ORDER;
            }
          // fall through
          case 389: break;
          case 129:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [276] { return PHONE; }");
            { return PHONE;
            }
          // fall through
          case 390: break;
          case 130:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [162] { return SCOPE; }");
            { return SCOPE;
            }
          // fall through
          case 391: break;
          case 131:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [135] { return SUPER; }");
            { return SUPER;
            }
          // fall through
          case 392: break;
          case 132:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [139] { return THROW; }");
            { return THROW;
            }
          // fall through
          case 393: break;
          case 133:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [230] { return TODAY; }");
            { return TODAY;
            }
          // fall through
          case 394: break;
          case 134:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [161] { return USING; }");
            { return USING;
            }
          // fall through
          case 395: break;
          case 135:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [163] { return WHERE; }");
            { return WHERE;
            }
          // fall through
          case 396: break;
          case 136:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [150] { return WHILE; }");
            { return WHILE;
            }
          // fall through
          case 397: break;
          case 137:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [101] { return BEFORE; }");
            { return BEFORE;
            }
          // fall through
          case 398: break;
          case 138:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [209] { return CUSTOM; }");
            { return CUSTOM;
            }
          // fall through
          case 399: break;
          case 139:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [106] { return DELETE; }");
            { return DELETE;
            }
          // fall through
          case 400: break;
          case 140:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [278] { return FIELDS; }");
            { return FIELDS;
            }
          // fall through
          case 401: break;
          case 141:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [206] { return FORMAT; }");
            { return FORMAT;
            }
          // fall through
          case 402: break;
          case 142:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [115] { return GLOBAL; }");
            { return GLOBAL;
            }
          // fall through
          case 403: break;
          case 143:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [191] { return HAVING; }");
            { return HAVING;
            }
          // fall through
          case 404: break;
          case 144:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [119] { return INSERT; }");
            { return INSERT;
            }
          // fall through
          case 405: break;
          case 145:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [194] { return OFFSET; }");
            { return OFFSET;
            }
          // fall through
          case 406: break;
          case 146:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [129] { return PUBLIC; }");
            { return PUBLIC;
            }
          // fall through
          case 407: break;
          case 147:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [130] { return RETURN; }");
            { return RETURN;
            }
          // fall through
          case 408: break;
          case 148:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [192] { return ROLLUP; }");
            { return ROLLUP;
            }
          // fall through
          case 409: break;
          case 149:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [157] { return SELECT; }");
            { return SELECT;
            }
          // fall through
          case 410: break;
          case 150:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [134] { return STATIC; }");
            { return STATIC;
            }
          // fall through
          case 411: break;
          case 151:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [136] { return SWITCH; }");
            { return SWITCH;
            }
          // fall through
          case 412: break;
          case 152:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [155] { return SYSTEM; }");
            { return SYSTEM;
            }
          // fall through
          case 413: break;
          case 153:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [175] { return TYPEOF; }");
            { return TYPEOF;
            }
          // fall through
          case 414: break;
          case 154:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [144] { return UPDATE; }");
            { return UPDATE;
            }
          // fall through
          case 415: break;
          case 155:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [145] { return UPSERT; }");
            { return UPSERT;
            }
          // fall through
          case 416: break;
          case 156:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [110] { return EXTENDS; }");
            { return EXTENDS;
            }
          // fall through
          case 417: break;
          case 157:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [112] { return FINALLY; }");
            { return FINALLY;
            }
          // fall through
          case 418: break;
          case 158:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [281] { return NETWORK; }");
            { return NETWORK;
            }
          // fall through
          case 419: break;
          case 159:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [127] { return PRIVATE; }");
            { return PRIVATE;
            }
          // fall through
          case 420: break;
          case 160:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [133] { return SHARING; }");
            { return SHARING;
            }
          // fall through
          case 421: break;
          case 161:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [277] { return SIDEBAR; }");
            { return SIDEBAR;
            }
          // fall through
          case 422: break;
          case 162:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [282] { return SNIPPET; }");
            { return SNIPPET;
            }
          // fall through
          case 423: break;
          case 163:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [193] { return TOLABEL; }");
            { return TOLABEL;
            }
          // fall through
          case 424: break;
          case 164:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [141] { return TRIGGER; }");
            { return TRIGGER;
            }
          // fall through
          case 425: break;
          case 165:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [146] { return VIRTUAL; }");
            { return VIRTUAL;
            }
          // fall through
          case 426: break;
          case 166:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [152] { return WITHOUT; }");
            { return WITHOUT;
            }
          // fall through
          case 427: break;
          case 167:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [99] { return ABSTRACT; }");
            { return ABSTRACT;
            }
          // fall through
          case 428: break;
          case 168:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [196] { return CATEGORY; }");
            { return CATEGORY;
            }
          // fall through
          case 429: break;
          case 169:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [105] { return CONTINUE; }");
            { return CONTINUE;
            }
          // fall through
          case 430: break;
          case 170:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [221] { return DAY_ONLY; }");
            { return DAY_ONLY;
            }
          // fall through
          case 431: break;
          case 171:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [211] { return DISTANCE; }");
            { return DISTANCE;
            }
          // fall through
          case 432: break;
          case 172:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [284] { return DIVISION; }");
            { return DIVISION;
            }
          // fall through
          case 433: break;
          case 173:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [181] { return EXCLUDES; }");
            { return EXCLUDES;
            }
          // fall through
          case 434: break;
          case 174:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [213] { return GROUPING; }");
            { return GROUPING;
            }
          // fall through
          case 435: break;
          case 175:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [180] { return INCLUDES; }");
            { return INCLUDES;
            }
          // fall through
          case 436: break;
          case 176:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [286] { return LISTVIEW; }");
            { return LISTVIEW;
            }
          // fall through
          case 437: break;
          case 177:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [279] { return METADATA; }");
            { return METADATA;
            }
          // fall through
          case 438: break;
          case 178:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [126] { return OVERRIDE; }");
            { return OVERRIDE;
            }
          // fall through
          case 439: break;
          case 179:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [210] { return STANDARD; }");
            { return STANDARD;
            }
          // fall through
          case 440: break;
          case 180:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [231] { return TOMORROW; }");
            { return TOMORROW;
            }
          // fall through
          case 441: break;
          case 181:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [207] { return TRACKING; }");
            { return TRACKING;
            }
          // fall through
          case 442: break;
          case 182:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [143] { return UNDELETE; }");
            { return UNDELETE;
            }
          // fall through
          case 443: break;
          case 183:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [208] { return VIEWSTAT; }");
            { return VIEWSTAT;
            }
          // fall through
          case 444: break;
          case 184:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [337] { return TIMELITERAL; }");
            { return TIMELITERAL;
            }
          // fall through
          case 445: break;
          case 185:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [118] { return INHERITED; }");
            { return INHERITED;
            }
          // fall through
          case 446: break;
          case 186:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [121] { return INTERFACE; }");
            { return INTERFACE;
            }
          // fall through
          case 447: break;
          case 187:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [232] { return LAST_WEEK; }");
            { return LAST_WEEK;
            }
          // fall through
          case 448: break;
          case 188:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [256] { return LAST_YEAR; }");
            { return LAST_YEAR;
            }
          // fall through
          case 449: break;
          case 189:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [234] { return NEXT_WEEK; }");
            { return NEXT_WEEK;
            }
          // fall through
          case 450: break;
          case 190:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [257] { return NEXT_YEAR; }");
            { return NEXT_YEAR;
            }
          // fall through
          case 451: break;
          case 191:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [128] { return PROTECTED; }");
            { return PROTECTED;
            }
          // fall through
          case 452: break;
          case 192:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [204] { return REFERENCE; }");
            { return REFERENCE;
            }
          // fall through
          case 453: break;
          case 193:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [285] { return RETURNING; }");
            { return RETURNING;
            }
          // fall through
          case 454: break;
          case 194:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [233] { return THIS_WEEK; }");
            { return THIS_WEEK;
            }
          // fall through
          case 455: break;
          case 195:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [255] { return THIS_YEAR; }");
            { return THIS_YEAR;
            }
          // fall through
          case 456: break;
          case 196:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [140] { return TRANSIENT; }");
            { return TRANSIENT;
            }
          // fall through
          case 457: break;
          case 197:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [203] { return USER_MODE; }");
            { return USER_MODE;
            }
          // fall through
          case 458: break;
          case 198:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [229] { return YESTERDAY; }");
            { return YESTERDAY;
            }
          // fall through
          case 459: break;
          case 199:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [336] { return DATELITERAL; }");
            { return DATELITERAL;
            }
          // fall through
          case 460: break;
          case 200:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [117] { return IMPLEMENTS; }");
            { return IMPLEMENTS;
            }
          // fall through
          case 461: break;
          case 201:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [120] { return INSTANCEOF; }");
            { return INSTANCEOF;
            }
          // fall through
          case 462: break;
          case 202:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [235] { return LAST_MONTH; }");
            { return LAST_MONTH;
            }
          // fall through
          case 463: break;
          case 203:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [242] { return N_DAYS_AGO_N; }");
            { return N_DAYS_AGO_N;
            }
          // fall through
          case 464: break;
          case 204:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [237] { return NEXT_MONTH; }");
            { return NEXT_MONTH;
            }
          // fall through
          case 465: break;
          case 205:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [137] { return TESTMETHOD; }");
            { return TESTMETHOD;
            }
          // fall through
          case 466: break;
          case 206:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [236] { return THIS_MONTH; }");
            { return THIS_MONTH;
            }
          // fall through
          case 467: break;
          case 207:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [148] { return WEBSERVICE; }");
            { return WEBSERVICE;
            }
          // fall through
          case 468: break;
          case 208:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [219] { return DAY_IN_WEEK; }");
            { return DAY_IN_WEEK;
            }
          // fall through
          case 469: break;
          case 209:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [220] { return DAY_IN_YEAR; }");
            { return DAY_IN_YEAR;
            }
          // fall through
          case 470: break;
          case 210:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [224] { return FISCAL_YEAR; }");
            { return FISCAL_YEAR;
            }
          // fall through
          case 471: break;
          case 211:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [212] { return GEOLOCATION; }");
            { return GEOLOCATION;
            }
          // fall through
          case 472: break;
          case 212:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [225] { return HOUR_IN_DAY; }");
            { return HOUR_IN_DAY;
            }
          // fall through
          case 473: break;
          case 213:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [240] { return LAST_N_DAYS_N; }");
            { return LAST_N_DAYS_N;
            }
          // fall through
          case 474: break;
          case 214:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [245] { return N_WEEKS_AGO_N; }");
            { return N_WEEKS_AGO_N;
            }
          // fall through
          case 475: break;
          case 215:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [260] { return N_YEARS_AGO_N; }");
            { return N_YEARS_AGO_N;
            }
          // fall through
          case 476: break;
          case 216:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [241] { return NEXT_N_DAYS_N; }");
            { return NEXT_N_DAYS_N;
            }
          // fall through
          case 477: break;
          case 217:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [280] { return PRICEBOOKID; }");
            { return PRICEBOOKID;
            }
          // fall through
          case 478: break;
          case 218:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [202] { return SYSTEM_MODE; }");
            { return SYSTEM_MODE;
            }
          // fall through
          case 479: break;
          case 219:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [218] { return DAY_IN_MONTH; }");
            { return DAY_IN_MONTH;
            }
          // fall through
          case 480: break;
          case 220:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [222] { return FISCAL_MONTH; }");
            { return FISCAL_MONTH;
            }
          // fall through
          case 481: break;
          case 221:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [238] { return LAST_90_DAYS; }");
            { return LAST_90_DAYS;
            }
          // fall through
          case 482: break;
          case 222:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [244] { return LAST_N_WEEKS_N; }");
            { return LAST_N_WEEKS_N;
            }
          // fall through
          case 483: break;
          case 223:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [259] { return LAST_N_YEARS_N; }");
            { return LAST_N_YEARS_N;
            }
          // fall through
          case 484: break;
          case 224:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [250] { return LAST_QUARTER; }");
            { return LAST_QUARTER;
            }
          // fall through
          case 485: break;
          case 225:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [248] { return N_MONTHS_AGO_N; }");
            { return N_MONTHS_AGO_N;
            }
          // fall through
          case 486: break;
          case 226:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [239] { return NEXT_90_DAYS; }");
            { return NEXT_90_DAYS;
            }
          // fall through
          case 487: break;
          case 227:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [243] { return NEXT_N_WEEKS_N; }");
            { return NEXT_N_WEEKS_N;
            }
          // fall through
          case 488: break;
          case 228:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [258] { return NEXT_N_YEARS_N; }");
            { return NEXT_N_YEARS_N;
            }
          // fall through
          case 489: break;
          case 229:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [251] { return NEXT_QUARTER; }");
            { return NEXT_QUARTER;
            }
          // fall through
          case 490: break;
          case 230:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [131] { return SYSTEMRUNAS; }");
            { return SYSTEMRUNAS;
            }
          // fall through
          case 491: break;
          case 231:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [249] { return THIS_QUARTER; }");
            { return THIS_QUARTER;
            }
          // fall through
          case 492: break;
          case 232:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [227] { return WEEK_IN_YEAR; }");
            { return WEEK_IN_YEAR;
            }
          // fall through
          case 493: break;
          case 233:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [217] { return CALENDAR_YEAR; }");
            { return CALENDAR_YEAR;
            }
          // fall through
          case 494: break;
          case 234:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [247] { return LAST_N_MONTHS_N; }");
            { return LAST_N_MONTHS_N;
            }
          // fall through
          case 495: break;
          case 235:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [246] { return NEXT_N_MONTHS_N; }");
            { return NEXT_N_MONTHS_N;
            }
          // fall through
          case 496: break;
          case 236:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [283] { return TARGET_LENGTH; }");
            { return TARGET_LENGTH;
            }
          // fall through
          case 497: break;
          case 237:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [226] { return WEEK_IN_MONTH; }");
            { return WEEK_IN_MONTH;
            }
          // fall through
          case 498: break;
          case 238:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [200] { return ABOVE_OR_BELOW; }");
            { return ABOVE_OR_BELOW;
            }
          // fall through
          case 499: break;
          case 239:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [215] { return CALENDAR_MONTH; }");
            { return CALENDAR_MONTH;
            }
          // fall through
          case 500: break;
          case 240:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [171] { return COUNT_DISTINCT; }");
            { return COUNT_DISTINCT;
            }
          // fall through
          case 501: break;
          case 241:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [223] { return FISCAL_QUARTER; }");
            { return FISCAL_QUARTER;
            }
          // fall through
          case 502: break;
          case 242:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [254] { return N_QUARTERS_AGO_N; }");
            { return N_QUARTERS_AGO_N;
            }
          // fall through
          case 503: break;
          case 243:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [214] { return CONVERT_CURRENCY; }");
            { return CONVERT_CURRENCY;
            }
          // fall through
          case 504: break;
          case 244:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [228] { return CONVERT_TIMEZONE; }");
            { return CONVERT_TIMEZONE;
            }
          // fall through
          case 505: break;
          case 245:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [253] { return LAST_N_QUARTERS_N; }");
            { return LAST_N_QUARTERS_N;
            }
          // fall through
          case 506: break;
          case 246:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [252] { return NEXT_N_QUARTERS_N; }");
            { return NEXT_N_QUARTERS_N;
            }
          // fall through
          case 507: break;
          case 247:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [216] { return CALENDAR_QUARTER; }");
            { return CALENDAR_QUARTER;
            }
          // fall through
          case 508: break;
          case 248:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [268] { return LAST_FISCAL_YEAR; }");
            { return LAST_FISCAL_YEAR;
            }
          // fall through
          case 509: break;
          case 249:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [269] { return NEXT_FISCAL_YEAR; }");
            { return NEXT_FISCAL_YEAR;
            }
          // fall through
          case 510: break;
          case 250:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [267] { return THIS_FISCAL_YEAR; }");
            { return THIS_FISCAL_YEAR;
            }
          // fall through
          case 511: break;
          case 251:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [201] { return SECURITY_ENFORCED; }");
            { return SECURITY_ENFORCED;
            }
          // fall through
          case 512: break;
          case 252:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [272] { return N_FISCAL_YEARS_AGO_N; }");
            { return N_FISCAL_YEARS_AGO_N;
            }
          // fall through
          case 513: break;
          case 253:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [262] { return LAST_FISCAL_QUARTER; }");
            { return LAST_FISCAL_QUARTER;
            }
          // fall through
          case 514: break;
          case 254:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [271] { return LAST_N_FISCAL_YEARS_N; }");
            { return LAST_N_FISCAL_YEARS_N;
            }
          // fall through
          case 515: break;
          case 255:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [263] { return NEXT_FISCAL_QUARTER; }");
            { return NEXT_FISCAL_QUARTER;
            }
          // fall through
          case 516: break;
          case 256:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [270] { return NEXT_N_FISCAL_YEARS_N; }");
            { return NEXT_N_FISCAL_YEARS_N;
            }
          // fall through
          case 517: break;
          case 257:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [261] { return THIS_FISCAL_QUARTER; }");
            { return THIS_FISCAL_QUARTER;
            }
          // fall through
          case 518: break;
          case 258:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [338] { return DATETIMELITERAL; }");
            { return DATETIMELITERAL;
            }
          // fall through
          case 519: break;
          case 259:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [266] { return N_FISCAL_QUARTERS_AGO_N; }");
            { return N_FISCAL_QUARTERS_AGO_N;
            }
          // fall through
          case 520: break;
          case 260:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [265] { return LAST_N_FISCAL_QUARTERS_N; }");
            { return LAST_N_FISCAL_QUARTERS_N;
            }
          // fall through
          case 521: break;
          case 261:
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [264] { return NEXT_N_FISCAL_QUARTERS_N; }");
            { return NEXT_N_FISCAL_QUARTERS_N;
            }
          // fall through
          case 522: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java _ApexLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        _ApexLexer scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
//////////手动添加的代码
          BufferedReader bufferedReader = new BufferedReader(reader);
          StringBuilder sb = new StringBuilder();
          String newLine ;
          while((newLine = bufferedReader.readLine()) != null) {
            sb.append(newLine);
          }
          scanner = new _ApexLexer(reader);
          scanner.reset(sb,0,sb.length(),YYINITIAL);
///////////////

          do {
            System.out.println(scanner.advance());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
