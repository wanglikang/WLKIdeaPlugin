// Copyright 2000-2022 JetBrains s.r.o. and other contributors.
// Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
{
//  classHeader="//自动生成的语法分析器"
  parserClass="com.wlk.ideaplugin.apexsupport.language.parser.ApexParser"
  parserUtilClass="com.wlk.ideaplugin.apexsupport.language.parser.ApexParserUtil"
  // 在此文件中，运行 【Generate Parse Util】 后，会自动生成一个ApexParserUtil  放到和 parserClass 同一个文件夹下，
  // 并自动生成此配置，然后，此文件的右键选项中，就没有【Generate Parse Util】 的选项了
//  parserUtilClass="com.wlk.ideaplugin.apexsupport.language.parser.ApexParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  psiImplPackage="com.wlk.ideaplugin.apexsupport.language.gen.psi.impl"
  psiClassPrefix="Apex"
  psiImplClassSuffix="Impl"
  psiPackage="com.wlk.ideaplugin.apexsupport.language.gen.psi"

// 这个 type ，应该是会自动生成的,,生成后，可以被.flex文件所用的
  elementTypeHolderClass="com.wlk.ideaplugin.apexsupport.language.gen.psi.ApexTypes"


	// 非终结符的语法元素类型
  elementTypeClass  ="com.wlk.ideaplugin.apexsupport.language.psi.ApexElementType"


  // 应该是根据name，自动生成token的工厂类,应该还用不到
  tokenTypeFactory  ="com.wlk.ideaplugin.apexsupport.language.psi.ApexTokenType.createTokenType"
  // 终结符的语法元素类型（token）
  tokenTypeClass    ="com.wlk.ideaplugin.apexsupport.language.psi.ApexTokenType"

// psiImplUtilClass 暂不知道是干什么的
  psiImplUtilClass="com.wlk.ideaplugin.apexsupport.language.psi.impl.ApexPsiImplUtil"
//  extends(".*Name")='NamedElement'
//  mixin(".*Name")="com.wlk.ideaplugin.apexsupport.language.ApexCommonNamedElementImpl"
//  implements(".*Name")="com.wlk.ideaplugin.apexsupport.language.psi.ApexNamedElement"
  // 会给对应节点的接口里，加伤对应的
  methods(".*Name")=[getKey getValue getName setName getNameIdentifier getPresentation]

  // 看起来，bnf中，要想解决左递归的错误提醒，需要将所有的左递归的表达式和表达式本身，都声明为expr结尾
  // 并使用 下面的 extends 处理一下才行

  tokens=[
    // 有几个内置的flex 变量可以用，参考【Grammar-kit】项目中的：org.intellij.grammar.actions.BnfGenerateLexerAction#text2JFlex
    // [:letter:]、[:digit:]、[:lowercase:]、[:uppercase:]、([:letter:]|[:digit:])、[\x00-\x7F]

	// 对应的词法，有如下几种
	// 关键字：apex类型（list、map）、DML关键字、SOQL关键字、SOQL数据函数关键字、SOQL数据公式关键字、SOQL数据和时间字面量、
	//      SOQL 币种字面量、SOSL 关键字、
	// 字面量：
	//  Integer、Long、数字、十六进制
	//  bool
	//  string 字面量
	// 分隔符
	// 操作符
	// 其他类型的

	// Keywords     // 这些关键字其实不用特定在tokens里定义，因为Grammar-kit 和 antlr不一样，在文法里使用的时候，不能引用，只能使用字面量
	// 这个定义的keyword，不使用，因为看起来这里定义了之后，大小写就确定了，后续不太方便
	ABSTRACT	="abstract"
	AFTER	="after"
	BEFORE	="before"
	BREAK	="break"
	CATCH	="catch"
	CLASS	= "class"
	CONTINUE	="continue"
	DELETE	="delete"
	DO	="do"
	ELSE	="else"
	ENUM	="enum"
	EXTENDS	="extends"
	FINAL	="final"
	FINALLY	="finally"
	FOR	="for"
	GET	="get"
	GLOBAL	="global"
	IF	="if"
	IMPLEMENTS	="implements"
	INHERITED	="inherited"
	INSERT	="insert"
	INSTANCEOF	="instanceof"
	INTERFACE	="interface"
	MERGE	="merge"
	NEW	="new"
	NULL	="null"
	ON	="on"
	OVERRIDE	="override"
	PRIVATE	="private"
	PROTECTED	="protected"
	PUBLIC	="public"
	RETURN	="return"
	SYSTEMRUNAS	="system.runas"
	SET	="set"
	SHARING	="sharing"
	STATIC	="static"
	SUPER	="super"
	SWITCH	="switch"
	TESTMETHOD	="testmethod"
	THIS	="this"
	THROW	="throw"
	TRANSIENT	="transient"
	TRIGGER	="trigger"
	TRY	="try"
	UNDELETE	="undelete"
	UPDATE	="update"
	UPSERT	="upsert"
	VIRTUAL	="virtual"
	VOID	="void"
	WEBSERVICE	="webservice"
	WHEN	="when"
	WHILE	="while"
	WITH	="with"
	WITHOUT	="without"

	// Apex generic types, Set is defined above for properties
	LIST	="list"
	MAP	="map"

	// DML keywords
//	SYSTEM	="system"
//	USER	="user"

	// Soql specific keywords
	SELECT	="select"
//	COUNT	="count"
	FROM	="from"
	AS	="as"
	USING	="using"
	SCOPE	="scope"
	WHERE	="where"
	ORDER	="order"
	BY	="by"
	LIMIT	="limit"
	SOQLAND	="and"
	SOQLOR	="or"
	NOT	="not"
	AVG	="avg"
	COUNT_DISTINCT	="count_distinct"
	MIN	="min"
	MAX	="max"
	SUM	="sum"
	TYPEOF	="typeof"
	END	="end"
	THEN	="then"
	LIKE	="like"
	IN	="in"
	INCLUDES	="includes"
	EXCLUDES	="excludes"
	ASC	="asc"
	DESC	="desc"
	NULLS	="nulls"
	FIRST	="first"
	LAST	="last"
	GROUP	="group"
	ALL	="all"
	ROWS	="rows"
	VIEW	="view"
	HAVING	="having"
	ROLLUP	="rollup"
	TOLABEL	="tolabel"
	OFFSET	="offset"
	DATA	="data"
	CATEGORY	="category"
	AT	="at"
	ABOVE	="above"
	BELOW	="below"
	ABOVE_OR_BELOW	="above_or_below"
	SECURITY_ENFORCED	="security_enforced"
	SYSTEM_MODE	="system_mode"
	USER_MODE	="user_mode"
	REFERENCE	="reference"
	CUBE	="cube"
	FORMAT	="format"
	TRACKING	="tracking"
	VIEWSTAT	="viewstat"
	CUSTOM	="custom"
	STANDARD	="standard"
	DISTANCE	="distance"
	GEOLOCATION	="geolocation"
	GROUPING	="grouping"
	CONVERT_CURRENCY	="convertcurrency" // used in both SOQL and SOSL

	// SOQL Date functions
	CALENDAR_MONTH	="calendar_month"
	CALENDAR_QUARTER	="calendar_quarter"
	CALENDAR_YEAR	="calendar_year"
	DAY_IN_MONTH	="day_in_month"
	DAY_IN_WEEK	="day_in_week"
	DAY_IN_YEAR	="day_in_year"
	DAY_ONLY	="day_only"
	FISCAL_MONTH	="fiscal_month"
	FISCAL_QUARTER	="fiscal_quarter"
	FISCAL_YEAR	="fiscal_year"
	HOUR_IN_DAY	="hour_in_day"
	WEEK_IN_MONTH	="week_in_month"
	WEEK_IN_YEAR	="week_in_year"
	CONVERT_TIMEZONE	="converttimezone"

	// SOQL Date formulas
	YESTERDAY	="yesterday"
	TODAY	="today"
	TOMORROW	="tomorrow"
	LAST_WEEK	="last_week"
	THIS_WEEK	="this_week"
	NEXT_WEEK	="next_week"
	LAST_MONTH	="last_month"
	THIS_MONTH	="this_month"
	NEXT_MONTH	="next_month"
	LAST_90_DAYS	="last_90_days"
	NEXT_90_DAYS	="next_90_days"
	LAST_N_DAYS_N	="last_n_days"
	NEXT_N_DAYS_N	="next_n_days"
	N_DAYS_AGO_N	="n_days_ago"
	NEXT_N_WEEKS_N	="next_n_weeks"
	LAST_N_WEEKS_N	="last_n_weeks"
	N_WEEKS_AGO_N	="n_weeks_ago"
	NEXT_N_MONTHS_N	="next_n_months"
	LAST_N_MONTHS_N	="last_n_months"
	N_MONTHS_AGO_N	="n_months_ago"
	THIS_QUARTER	="this_quarter"
	LAST_QUARTER	="last_quarter"
	NEXT_QUARTER	="next_quarter"
	NEXT_N_QUARTERS_N	="next_n_quarters"
	LAST_N_QUARTERS_N	="last_n_quarters"
	N_QUARTERS_AGO_N	="n_quarters_ago"
	THIS_YEAR	="this_year"
	LAST_YEAR	="last_year"
	NEXT_YEAR	="next_year"
	NEXT_N_YEARS_N	="next_n_years"
	LAST_N_YEARS_N	="last_n_years"
	N_YEARS_AGO_N	="n_years_ago"
	THIS_FISCAL_QUARTER	="this_fiscal_quarter"
	LAST_FISCAL_QUARTER	="last_fiscal_quarter"
	NEXT_FISCAL_QUARTER	="next_fiscal_quarter"
	NEXT_N_FISCAL_QUARTERS_N	="next_n_fiscal_quarters"
	LAST_N_FISCAL_QUARTERS_N	="last_n_fiscal_quarters"
	N_FISCAL_QUARTERS_AGO_N	="n_fiscal_quarters_ago"
	THIS_FISCAL_YEAR	="this_fiscal_year"
	LAST_FISCAL_YEAR	="last_fiscal_year"
	NEXT_FISCAL_YEAR	="next_fiscal_year"
	NEXT_N_FISCAL_YEARS_N	="next_n_fiscal_years"
	LAST_N_FISCAL_YEARS_N	="last_n_fiscal_years"
	N_FISCAL_YEARS_AGO_N	="n_fiscal_years_ago"


	// SOQL Currency literal
	// (NOTE: this is also a valid Identifier)
//	IntegralCurrencyLiteral = [a-z] [a-z] [a-z] Digit+
//	IntegralCurrencyLiteral = "regexp:[a-z][a-z][a-z]\d+"

	// SOSL Keywords
	FIND	="find"
//	EMAIL	="email"
//	NAME	="name"
//	PHONE	="phone"
	SIDEBAR	="sidebar"
	FIELDS	="fields"
	METADATA	="metadata"
	PRICEBOOKID	="pricebookid"
	NETWORK	="network"
	SNIPPET	="snippet"
	TARGET_LENGTH	="target_length"
	DIVISION	="division"
	RETURNING	="returning"
	LISTVIEW	="listview"

	// §3.11 Separators
	LPAREN	=	"("
	RPAREN	=	")"
	LBRACE	=	"{"
	RBRACE	=	"}"
	LBRACK	=	"["
	RBRACK	=	"]"
	SEMI	=	";"
	COMMA	=	","
	DOT	=	"."

	// §3.12 Operators

	ASSIGN	=	"="
	GT	=	">"
	LT	=	"<"
	BANG	=	"!"
	TILDE	=	"~"
	QUESTIONDOT	=	"?."
	QUESTION	=	"?"
	COLON	=	":"
	EQUAL	=	"=="
	TRIPLEEQUAL	=	"==="
	NOTEQUAL	=	"!="
	LESSANDGREATER	=	"<>"
	TRIPLENOTEQUAL	=	"!=="
	AND	=	"&&"
	OR	=	"||"
	COAL	=	"??"
	INC	=	"++"
	DEC	=	"--"
	ADD	=	"+"
	SUB	=	"-"
	MUL	=	"*"
	DIV	=	"/"
	BITAND	=	"&"
	BITOR	=	"|"
	CARET	=	"^"
	MAPTO	=	"=>"

	ADD_ASSIGN	=	"+="
	SUB_ASSIGN	=	"-="
	MUL_ASSIGN	=	"*="
	DIV_ASSIGN	=	"/="
	AND_ASSIGN	=	"&="
	OR_ASSIGN	=	"|="
	XOR_ASSIGN	=	"^="
	LSHIFT_ASSIGN	=	"<<="
	RSHIFT_ASSIGN	=	">>="
	URSHIFT_ASSIGN	=	">>>="


	// Additional symbols not defined in the lexical specification
	ATSIGN	=	"@"

    LINE_COMMENT = "regexp://[^\r\n]*[\r|\n]?"
    WS = "regexp:\s"

	// 更好的支持多行注释，参考文章：
	// https://zhuanlan.zhihu.com/p/706946101
	// http://www.cs.man.ac.uk/~pjj/cs212/ex2_str_comm.html

	// 占位的几个token类型，因为使用bnf自动生成tokenType，可能会自动删掉已有的token，因此，在这里占个位置，后续将尽量少自动生成.flex
	BLOCK_COMMENT="BLOCK_COMMENT"
	INNER_BLOCK_DOC_COMMENT="INNER_BLOCK_DOC_COMMENT"
	OUTER_BLOCK_DOC_COMMENT="OUTER_BLOCK_DOC_COMMENT"


	// identifier 的token 定义应该放到最后面，优先级应该是最低的
	// 否则，其他的关键字可能会被解析为identifer,就无法很好的匹配了
	//[\u4e00-\u9fff]
    identifier="regexp:[a-zA-Z_]+[a-zA-Z0-9_]*"
    singlequotestringliteral = "regexp:\\'[\w\u4e00-\u9fff][\w\u4e00-\u9fff]+\\'"         // 不重要，这个会在flex中单独去配置

	// SOQL Date and Time literals
//	DateLiteral =  Digit Digit Digit Digit '-' Digit Digit '-' Digit Digit
	DateLiteral =  "regexp:\d\d\d\d-\d\d-\d\d"
//	TimeLiteral =  Digit Digit ':' Digit Digit ':' Digit Digit ('.' Digit+ )? ('z' | (('+' | '-') Digit+ ( ':' Digit+)? ))
	TimeLiteral =  "regexp:\d\d:\d\d:\d\d[\.\d+]?[z|[[+-]\d+[:\d+]?]]"
//	DateTimeLiteral =  DateLiteral 't' TimeLiteral
	DateTimeLiteral =  "regexp:\d\d\d\d-\d\d-\d\dt\d\d:\d\d:\d\d[\.\d+]?[z|[[+-]\d+[:\d+]?]]"

	integerliteralpattern = "regexp:\d+"
	longLiteralpattern = "regexp:\d+[lL]"
	numberliteralpattern = "regexp:\d*\.\d+[dD]"
  ]

}

//COMMENT::= LINE_COMMENT | TRADITIONAL_COMMENT | DOCUMENTATION_COMMENT

// 基于 https://github.com/apex-dev-tools/apex-parser 的开源的apex文法来进行适配
//V2: 基于 https://github.com/neowit/tooling-force.com 的开源文法进行适配
apexFile::= classUnit

classUnit::= modifierDeclaration  typeDeclaration {name='classunitName'}
typeDeclaration::= classDeclaration {name="typeDec"}

classDeclaration::= "CLASS" identifier typeParameters?  ("IMPLEMENTS" identifier)?  {pin=2 name="cls" }
private typeParameters::=   "<" typeParameter ("," typeParameter)* ">" {name="typeParameters"}
typeParameter::=   identifier ("extends" typeBound)? {name="typePar"}
typeBound::=   type ("&" type)*
type::=   classOrInterfaceType ("[]")*

classOrInterfaceType::=   identifier typeArguments? ('.' identifier typeArguments? )*
    |   "set" typeArguments // 'set <' has to be defined explicitly, otherwise it clashes with 'set' of property setter

modifierDeclaration::=  modifier*
typeArguments::= "<" typeList ">"
typeList::= typeRef ("," typeRef)*
typeRef::= typeName ("." typeName)* ("[" "]")*

typeName::= "LIST" typeArguments?
    | "SET" typeArguments?
    | "MAP" typeArguments?
    | identifier typeArguments?

modifier::=
    "GLOBAL"
    | "PUBLIC"
    | "PROTECTED"
    | "PRIVATE"
    | "TRANSIENT"
    | "STATIC"
    | "ABSTRACT"
    | "FINAL"
    | "WEBSERVICE"
    | "OVERRIDE"
    | "VIRTUAL"
    | "TESTMETHOD"
    | sharingModifier

private sharingModifier::= ("with" | "without" ) "sharing"
