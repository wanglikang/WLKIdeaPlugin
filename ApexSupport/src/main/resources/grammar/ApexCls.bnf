// Copyright 2000-2022 JetBrains s.r.o. and other contributors.
// Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
{
//  classHeader="//自动生成的语法分析器"
  parserClass="com.wlk.ideaplugin.apexsupport.language.parser.ApexParser"
  parserUtilClass="com.wlk.ideaplugin.apexsupport.language.parser.ApexParserUtil"
  // 在此文件中，运行 【Generate Parse Util】 后，会自动生成一个ApexParserUtil  放到和 parserClass 同一个文件夹下，
  // 并自动生成此配置，然后，此文件的右键选项中，就没有【Generate Parse Util】 的选项了
//  parserUtilClass="com.wlk.ideaplugin.apexsupport.language.parser.ApexParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiImplPackage="com.wlk.ideaplugin.apexsupport.language.gen.psi.impl"
  psiClassPrefix="Apex"
  psiImplClassSuffix="Impl"
  psiPackage="com.wlk.ideaplugin.apexsupport.language.gen.psi"

// 这个 type ，应该是会自动生成的,,生成后，可以被.flex文件所用的
  elementTypeHolderClass="com.wlk.ideaplugin.apexsupport.language.gen.psi.ApexTypes"

  // 应该是根据name，自动生成token的工厂类,应该还用不到
  tokenTypeFactory  ="com.wlk.ideaplugin.apexsupport.language.psi.ApexTokenType.createTokenType"
  elementTypeClass  ="com.wlk.ideaplugin.apexsupport.language.psi.ApexElementType"
  tokenTypeClass    ="com.wlk.ideaplugin.apexsupport.language.psi.ApexTokenType"

// psiImplUtilClass 暂不知道是干什么的
  psiImplUtilClass="com.wlk.ideaplugin.apexsupport.language.psi.impl.ApexPsiImplUtil"
//  extends(".*Name")='NamedElement'
//  mixin(".*Name")="com.wlk.ideaplugin.apexsupport.language.ApexCommonNamedElementImpl"
//  implements(".*Name")="com.wlk.ideaplugin.apexsupport.language.psi.ApexNamedElement"
  // 会给对应节点的接口里，加伤对应的
  methods(".*Name")=[getKey getValue getName setName getNameIdentifier getPresentation]

  // 看起来，bnf中，要想解决左递归的错误提醒，需要将所有的左递归的表达式和表达式本身，都声明为expr结尾
  // 并使用 下面的 extends 处理一下才行
  extends(".*expr")=expr
  implements(".*block")="com.wlk.ideaplugin.apexsupport.feature.fold.FoldAble"


  tokens=[
    // 有几个内置的flex 变量可以用，参考【Grammar-kit】项目中的：org.intellij.grammar.actions.BnfGenerateLexerAction#text2JFlex
    // [:letter:]、[:digit:]、[:lowercase:]、[:uppercase:]、([:letter:]|[:digit:])、[\x00-\x7F]

//[\u4e00-\u9fff]
    identifier="regexp:[a-zA-Z_]+[a-zA-Z0-9\\u4e00-\\u9fff_]*"
    singlequotestringliteral = "regexp:\\'[\w\u4e00-\u9fff][\w\u4e00-\u9fff]+\\'"         // 不重要，这个会在flex中单独去配置

//    identifier="regexp:\\p\\\{Alpha}(\\p\\\{Alpha})*"
	// 对应的词法，有如下几种
	// 关键字：apex类型（list、map）、DML关键字、SOQL关键字、SOQL数据函数关键字、SOQL数据公式关键字、SOQL数据和时间字面量、
	//      SOQL 币种字面量、SOSL 关键字、
	// 字面量：
	//  Integer、Long、数字、十六进制
	//  bool
	//  string 字面量
	// 分隔符
	// 操作符
	// 其他类型的

	// Keywords     // 这些关键字其实不用特定在tokens里定义，因为Grammar-kit 和 antlr不一样，在文法里使用的时候，不能引用，只能使用字面量
	// 这个定义的keyword，不使用，因为看起来这里定义了之后，大小写就确定了，后续不太方便
	ABSTRACT	="abstract"
	AFTER	="after"
	BEFORE	="before"
	BREAK	="break"
	CATCH	="catch"
	CLASS	="class"
	CONTINUE	="continue"
	DELETE	="delete"
	DO	="do"
	ELSE	="else"
	ENUM	="enum"
	EXTENDS	="extends"
	FINAL	="final"
	FINALLY	="finally"
	FOR	="for"
	GET	="get"
	GLOBAL	="global"
	IF	="if"
	IMPLEMENTS	="implements"
	INHERITED	="inherited"
	INSERT	="insert"
	INSTANCEOF	="instanceof"
	INTERFACE	="interface"
	MERGE	="merge"
	NEW	="new"
	NULL	="null"
	ON	="on"
	OVERRIDE	="override"
	PRIVATE	="private"
	PROTECTED	="protected"
	PUBLIC	="public"
	RETURN	="return"
	SYSTEMRUNAS	="system.runas"
	SET	="set"
	SHARING	="sharing"
	STATIC	="static"
	SUPER	="super"
	SWITCH	="switch"
	TESTMETHOD	="testmethod"
	THIS	="this"
	THROW	="throw"
	TRANSIENT	="transient"
	TRIGGER	="trigger"
	TRY	="try"
	UNDELETE	="undelete"
	UPDATE	="update"
	UPSERT	="upsert"
	VIRTUAL	="virtual"
	VOID	="void"
	WEBSERVICE	="webservice"
	WHEN	="when"
	WHILE	="while"
	WITH	="with"
	WITHOUT	="without"

	// Apex generic types, Set is defined above for properties
	LIST	="list"
	MAP	="map"

	// DML keywords
//	SYSTEM	="system"
//	USER	="user"

	// Soql specific keywords
	SELECT	="select"
//	COUNT	="count"
	FROM	="from"
	AS	="as"
	USING	="using"
	SCOPE	="scope"
	WHERE	="where"
	ORDER	="order"
	BY	="by"
	LIMIT	="limit"
	SOQLAND	="and"
	SOQLOR	="or"
	NOT	="not"
	AVG	="avg"
	COUNT_DISTINCT	="count_distinct"
	MIN	="min"
	MAX	="max"
	SUM	="sum"
	TYPEOF	="typeof"
	END	="end"
	THEN	="then"
	LIKE	="like"
	IN	="in"
	INCLUDES	="includes"
	EXCLUDES	="excludes"
	ASC	="asc"
	DESC	="desc"
	NULLS	="nulls"
	FIRST	="first"
	LAST	="last"
	GROUP	="group"
	ALL	="all"
	ROWS	="rows"
	VIEW	="view"
	HAVING	="having"
	ROLLUP	="rollup"
	TOLABEL	="tolabel"
	OFFSET	="offset"
	DATA	="data"
	CATEGORY	="category"
	AT	="at"
	ABOVE	="above"
	BELOW	="below"
	ABOVE_OR_BELOW	="above_or_below"
	SECURITY_ENFORCED	="security_enforced"
	SYSTEM_MODE	="system_mode"
	USER_MODE	="user_mode"
	REFERENCE	="reference"
	CUBE	="cube"
	FORMAT	="format"
	TRACKING	="tracking"
	VIEWSTAT	="viewstat"
	CUSTOM	="custom"
	STANDARD	="standard"
	DISTANCE	="distance"
	GEOLOCATION	="geolocation"
	GROUPING	="grouping"
	CONVERT_CURRENCY	="convertcurrency" // used in both SOQL and SOSL

	// SOQL Date functions
	CALENDAR_MONTH	="calendar_month"
	CALENDAR_QUARTER	="calendar_quarter"
	CALENDAR_YEAR	="calendar_year"
	DAY_IN_MONTH	="day_in_month"
	DAY_IN_WEEK	="day_in_week"
	DAY_IN_YEAR	="day_in_year"
	DAY_ONLY	="day_only"
	FISCAL_MONTH	="fiscal_month"
	FISCAL_QUARTER	="fiscal_quarter"
	FISCAL_YEAR	="fiscal_year"
	HOUR_IN_DAY	="hour_in_day"
	WEEK_IN_MONTH	="week_in_month"
	WEEK_IN_YEAR	="week_in_year"
	CONVERT_TIMEZONE	="converttimezone"

	// SOQL Date formulas
	YESTERDAY	="yesterday"
	TODAY	="today"
	TOMORROW	="tomorrow"
	LAST_WEEK	="last_week"
	THIS_WEEK	="this_week"
	NEXT_WEEK	="next_week"
	LAST_MONTH	="last_month"
	THIS_MONTH	="this_month"
	NEXT_MONTH	="next_month"
	LAST_90_DAYS	="last_90_days"
	NEXT_90_DAYS	="next_90_days"
	LAST_N_DAYS_N	="last_n_days"
	NEXT_N_DAYS_N	="next_n_days"
	N_DAYS_AGO_N	="n_days_ago"
	NEXT_N_WEEKS_N	="next_n_weeks"
	LAST_N_WEEKS_N	="last_n_weeks"
	N_WEEKS_AGO_N	="n_weeks_ago"
	NEXT_N_MONTHS_N	="next_n_months"
	LAST_N_MONTHS_N	="last_n_months"
	N_MONTHS_AGO_N	="n_months_ago"
	THIS_QUARTER	="this_quarter"
	LAST_QUARTER	="last_quarter"
	NEXT_QUARTER	="next_quarter"
	NEXT_N_QUARTERS_N	="next_n_quarters"
	LAST_N_QUARTERS_N	="last_n_quarters"
	N_QUARTERS_AGO_N	="n_quarters_ago"
	THIS_YEAR	="this_year"
	LAST_YEAR	="last_year"
	NEXT_YEAR	="next_year"
	NEXT_N_YEARS_N	="next_n_years"
	LAST_N_YEARS_N	="last_n_years"
	N_YEARS_AGO_N	="n_years_ago"
	THIS_FISCAL_QUARTER	="this_fiscal_quarter"
	LAST_FISCAL_QUARTER	="last_fiscal_quarter"
	NEXT_FISCAL_QUARTER	="next_fiscal_quarter"
	NEXT_N_FISCAL_QUARTERS_N	="next_n_fiscal_quarters"
	LAST_N_FISCAL_QUARTERS_N	="last_n_fiscal_quarters"
	N_FISCAL_QUARTERS_AGO_N	="n_fiscal_quarters_ago"
	THIS_FISCAL_YEAR	="this_fiscal_year"
	LAST_FISCAL_YEAR	="last_fiscal_year"
	NEXT_FISCAL_YEAR	="next_fiscal_year"
	NEXT_N_FISCAL_YEARS_N	="next_n_fiscal_years"
	LAST_N_FISCAL_YEARS_N	="last_n_fiscal_years"
	N_FISCAL_YEARS_AGO_N	="n_fiscal_years_ago"

	// SOQL Date and Time literals
//	DateLiteral =  Digit Digit Digit Digit '-' Digit Digit '-' Digit Digit
	DateLiteral =  "regexp:\d\d\d\d-\d\d-\d\d"
//	TimeLiteral =  Digit Digit ':' Digit Digit ':' Digit Digit ('.' Digit+ )? ('z' | (('+' | '-') Digit+ ( ':' Digit+)? ))
	TimeLiteral =  "regexp:\d\d:\d\d:\d\d[\.\d+]?[z|[[+-]\d+[:\d+]?]]"
//	DateTimeLiteral =  DateLiteral 't' TimeLiteral
	DateTimeLiteral =  "regexp:\d\d\d\d-\d\d-\d\dt\d\d:\d\d:\d\d[\.\d+]?[z|[[+-]\d+[:\d+]?]]"

	integerliteralpattern = "regexp:\d+"
	longLiteralpattern = "regexp:\d+[lL]"
	numberliteralpattern = "regexp:\d*\.\d+[dD]"

	// SOQL Currency literal
	// (NOTE: this is also a valid Identifier)
//	IntegralCurrencyLiteral = [a-z] [a-z] [a-z] Digit+
//	IntegralCurrencyLiteral = "regexp:[a-z][a-z][a-z]\d+"

	// SOSL Keywords
	FIND	="find"
//	EMAIL	="email"
//	NAME	="name"
//	PHONE	="phone"
	SIDEBAR	="sidebar"
	FIELDS	="fields"
	METADATA	="metadata"
	PRICEBOOKID	="pricebookid"
	NETWORK	="network"
	SNIPPET	="snippet"
	TARGET_LENGTH	="target_length"
	DIVISION	="division"
	RETURNING	="returning"
	LISTVIEW	="listview"

	// 其他语句的关键字,暂时先不定义，等用到的时候，在进行完善
//	FindLiteral = ""

	// §3.11 Separators
	LPAREN	=	"("
	RPAREN	=	")"
	LBRACE	=	"{"
	RBRACE	=	"}"
	LBRACK	=	"["
	RBRACK	=	"]"
	SEMI	=	";"
	COMMA	=	","
	DOT	=	"."

	// §3.12 Operators

	ASSIGN	=	"="
	GT	=	">"
	LT	=	"<"
	BANG	=	"!"
	TILDE	=	"~"
	QUESTIONDOT	=	"?."
	QUESTION	=	"?"
	COLON	=	":"
	EQUAL	=	"=="
	TRIPLEEQUAL	=	"==="
	NOTEQUAL	=	"!="
	LESSANDGREATER	=	"<>"
	TRIPLENOTEQUAL	=	"!=="
	AND	=	"&&"
	OR	=	"||"
	COAL	=	"??"
	INC	=	"++"
	DEC	=	"--"
	ADD	=	"+"
	SUB	=	"-"
	MUL	=	"*"
	DIV	=	"/"
	BITAND	=	"&"
	BITOR	=	"|"
	CARET	=	"^"
	MAPTO	=	"=>"

	ADD_ASSIGN	=	"+="
	SUB_ASSIGN	=	"-="
	MUL_ASSIGN	=	"*="
	DIV_ASSIGN	=	"/="
	AND_ASSIGN	=	"&="
	OR_ASSIGN	=	"|="
	XOR_ASSIGN	=	"^="
	LSHIFT_ASSIGN	=	"<<="
	RSHIFT_ASSIGN	=	">>="
	URSHIFT_ASSIGN	=	">>>="


	// Additional symbols not defined in the lexical specification
	ATSIGN	=	"@"

    LINE_COMMENT = "regexp://[^\r\n]*[\r|\n]?"
    WS = "regexp:\s"

	// 更好的支持多行注释，参考文章：
	// https://zhuanlan.zhihu.com/p/706946101
	// http://www.cs.man.ac.uk/~pjj/cs212/ex2_str_comm.html

	// 占位的几个token类型，因为使用bnf自动生成tokenType，可能会自动删掉已有的token，因此，在这里占个位置，后续将尽量少自动生成.flex
		BLOCK_COMMENT="BLOCK_COMMENT"
		INNER_BLOCK_DOC_COMMENT="INNER_BLOCK_DOC_COMMENT"
		OUTER_BLOCK_DOC_COMMENT="OUTER_BLOCK_DOC_COMMENT"
  ]
}

//COMMENT::= LINE_COMMENT | TRADITIONAL_COMMENT | DOCUMENTATION_COMMENT

// 基于 https://github.com/apex-dev-tools/apex-parser    的开源的apex文法来进行适配
apexFile::= classUnit | triggerUnit
// entry point for Apex trigger files
triggerUnit::= TRIGGER identifier ON identifier LPAREN triggerCase (COMMA triggerCase)* RPAREN triggerBlock {pin=1}
triggerCase::= (BEFORE | AFTER) ( INSERT | UPDATE | DELETE | UNDELETE )
triggerBlock::= LBRACE triggerBlockMember* RBRACE
triggerBlockMember::= modifierDeclaration triggerMemberDeclaration | statement
triggerMemberDeclaration::= methodDeclaration
    | fieldDeclaration
    | interfaceDeclaration
    | classDeclaration
    | enumDeclaration
    | propertyDeclaration





// entry point for Apex class files
classUnit::= modifierDeclaration  typeDeclaration
upper typeDeclaration::= classDeclaration
    | enumDeclaration
    | interfaceDeclaration

upper classDeclaration::= CLASS identifier (EXTENDS typeRef)? (IMPLEMENTS typeList)? classBody {pin=2}
upper classBody::= LBRACE classBodyDeclaration* RBRACE {pin=1 }
upper classBodyDeclaration::=  modifierDeclaration memberDeclaration
modifierDeclaration::=  annotation*  modifier*
modifier::=
    GLOBAL
    | PUBLIC
    | PROTECTED
    | PRIVATE
    | TRANSIENT
    | STATIC
    | ABSTRACT
    | FINAL
    | WEBSERVICE
    | OVERRIDE
    | VIRTUAL
    | TESTMETHOD
    | WITH SHARING
    | WITHOUT SHARING
    | INHERITED SHARING

upper memberDeclaration::= constructorDeclaration
	| methodDeclaration
    | fieldDeclaration
    | interfaceDeclaration
    | classDeclaration
    | enumDeclaration
    | propertyDeclaration
    | staticBlock

upper methodDeclaration::= ( typeRef | "VOID") identifier  formalParameters  ( block | SEMI ) {pin=3}

upper staticBlock::= STATIC? LBRACE statement* RBRACE {pin=2 implements="com.wlk.ideaplugin.apexsupport.feature.fold.FoldAble"}

upper fieldDeclaration::= typeRef variableDeclarators SEMI

upper  constructorDeclaration::= qualifiedName formalParameters block {pin=3}

upper interfaceDeclaration::= INTERFACE identifier (EXTENDS typeList)? interfaceBody

interfaceBody::= LBRACE interfaceMethodDeclaration* RBRACE

interfaceMethodDeclaration::= modifierDeclaration* (typeRef | VOID ) identifier formalParameters SEMI

upper enumDeclaration::= ENUM identifier LBRACE enumConstants? RBRACE

enumConstants::= identifier (COMMA identifier)*

upper propertyDeclaration::= typeRef identifier LBRACE propertyBlock* RBRACE

propertyBlock::= modifierDeclaration* (getter | setter)

getter::= GET (SEMI | block) {pin=1}

setter::= SET (SEMI | block) {pin=1}

upper annotation::= ATSIGN qualifiedName ( LPAREN ( elementValuePairs | elementValue )? RPAREN )? {pin=2}

//qualifiedName::= id (DOT id)*
upper qualifiedName::= identifier (DOT identifier)*

elementValuePairs::= elementValuePair (COMMA? elementValuePair)*

//elementValuePair::= id ASSIGN elementValue
elementValuePair::= identifier ASSIGN elementValue {pin=2}

elementValue::= expression
	| annotation
    | elementValueArrayInitializer

elementValueArrayInitializer::= LBRACE (elementValue (COMMA elementValue)*)? (COMMA)? RBRACE



//upper typeRef::= typeName (DOT typeName)* arraySubscripts
typeRef::= typeName (DOT typeName)* (LBRACK RBRACK)*


upper formalParameters::= LPAREN formalParameterList? RPAREN {pin=1}

formalParameterList::= formalParameter (COMMA formalParameter)*

formalParameter::= modifierDeclaration typeRef identifier

typeName::= LIST typeArguments?
    | SET typeArguments?
    | MAP typeArguments?
    | id typeArguments?
    {pin=1}


typeArguments::= LT typeList GT {pin=1}
typeList::= typeRef (COMMA typeRef)*
//arraySubscripts::= (LBRACK RBRACK)*

left upper statement::=
     ifStatement
    | switchStatement
    | forStatement
    | whileStatement
    | doWhileStatement
    | tryStatement
    | returnStatement
    | throwStatement
    | breakStatement
    | continueStatement
    | insertStatement
    | updateStatement
    | deleteStatement
    | undeleteStatement
    | upsertStatement
    | mergeStatement
    | runAsStatement
    | localVariableDeclarationStatement
    | expressionStatement
    | block
    {implements="com.wlk.ideaplugin.apexsupport.feature.fold.FoldAble"}

upper left whileStatement::= WHILE parExpression (statement | SEMI) {pin=1}
upper left doWhileStatement::= DO block "WHILE" parExpression SEMI {pin=1}
upper left tryStatement::= TRY block (catchClause+ finallyBlock? | finallyBlock) {pin=1}
catchClause::= CATCH LPAREN modifier* qualifiedName identifier RPAREN block {pin=2}
finallyBlock::= FINALLY block {pin=1}
upper left throwStatement::= THROW expression SEMI {pin=1}
upper left breakStatement::= BREAK SEMI
upper left continueStatement::= CONTINUE SEMI
upper left insertStatement::= INSERT accessLevel? expression SEMI
accessLevel::= AS (SYSTEM | USER)
upper left updateStatement::= UPDATE accessLevel? expression SEMI
upper left deleteStatement::= DELETE accessLevel? expression SEMI
upper left undeleteStatement::= UNDELETE accessLevel? expression SEMI
upper left upsertStatement::= UPSERT accessLevel? expression qualifiedName? SEMI
upper left mergeStatement::= MERGE accessLevel? expression expression SEMI
//left runAsStatement::= SYSTEMRUNAS LPAREN expressionList? RPAREN block
upper left runAsStatement::= "system.runas" LPAREN expressionList? RPAREN block



upper left switchStatement::= "SWITCH" "ON" expression LBRACE whenControl+ RBRACE {pin=1 name="需要switch关键字" implements="com.wlk.ideaplugin.apexsupport.feature.fold.FoldAble"}
whenControl::= "WHEN" whenValue block
whenValue::= "ELSE"
    | whenLiteral (COMMA whenLiteral)*
    | typeRef identifier

whenLiteral::= (SUB|ADD)* IntegerLiteral
    | (SUB|ADD)* LongLiteral
    | StringLiteral
    | NULL
    | identifier
    // Salesforce tolerates paren pairs around each literal,
    // although this is not explicitly documented.
    | LPAREN whenLiteral RPAREN


upper expressionStatement::= expression SEMI
upper left forStatement::= FOR LPAREN forControl RPAREN (statement | SEMI) {pin=1 implements="com.wlk.ideaplugin.apexsupport.feature.fold.FoldAble"}
upper forControl::= enhancedForControl | forInit? SEMI expression? SEMI forUpdate?
left upper enhancedForControl::= typeRef identifier COLON expression
forInit::= localVariableDeclaration | expressionList
forUpdate::= expressionList


upper localVariableDeclarationStatement::= localVariableDeclaration SEMI
localVariableDeclaration::= modifierDeclaration typeRef variableDeclarators
variableDeclarators::= variableDeclarator (COMMA variableDeclarator)*
variableDeclarator::= id (ASSIGN expression)?

upper returnStatement::= RETURN expression? SEMI {pin=1}
upper block::= LBRACE statement* RBRACE {pin=1 name="block语句" implements="com.wlk.ideaplugin.apexsupport.feature.fold.FoldAble"}
upper ifStatement::= IF parExpression statement (ELSE statement)? {pin=1 name="匹配到了ifStatement"}
parExpression::= LPAREN expression RPAREN {implements="com.wlk.ideaplugin.apexsupport.feature.fold.FoldAble"}

/////// 表达式相关的声明，，开始
// 要想 expression 能解决左递归的报错，需要添加一下 extends(".*expr")=expr
// 对于expressin 内的元素，除来相同层级的xxx_group,内层的xxx_expr 元素禁 用private，否则还是会被识别为 左递归的
left expression::= expr
expr::=
     right_expression_group
    | left_recursion_group
    | primary_group
//      {extraRoot=true}

private primary_group ::= primary_expr
//	| simple_ref_expr
private left_recursion_group ::= dot_expr
	| inc_dec_expr
	| brack_expr
	| mul_div_expr | add_sub_expr
	| lt_gt_expr | lt_gt_assi_expr
	| instance_expr
	| logic_expr
	| bit_and_expr | caret_expr | bitor_expr | and_expr | or_expr | coal_expr
	| question_expr  | multi_assign_expr

private right_expression_group::= bang_expression_expr
	| methodCall_expr
	| new_creator_expr
	| paren_typef_expr
    | paren_expr

paren_typef_expr::= LPAREN typeRef RPAREN expr
paren_expr::= LPAREN expr RPAREN

// 左递归的内容，得一个一个的去声明
dot_expr::= expr ( DOT | QUESTIONDOT) ( dotMethodCall | anyId ) {pin=2}
inc_dec_expr::= expr (INC | DEC)
brack_expr::= expr LBRACK expr RBRACK
mul_div_expr::= expr (MUL|DIV) expr
add_sub_expr::= expr (ADD|SUB) expr
lt_gt_expr::= expr (LT LT | GT GT GT | GT GT) expr
lt_gt_assi_expr::=  expr (GT | LT) ASSIGN? expr
instance_expr::= expr INSTANCEOF typeRef
logic_expr::= expr (TRIPLEEQUAL | TRIPLENOTEQUAL | EQUAL | NOTEQUAL | LESSANDGREATER ) expr
bit_and_expr::= expr BITAND expr
caret_expr::= expr CARET expr
bitor_expr::= expr BITOR expr
and_expr::= expr AND expr
or_expr::= expr OR expr
coal_expr::= expr COAL expr
question_expr::= expr QUESTION expr COLON expr   { rightAssociative=true }
multi_assign_expr::= expr
  (   ASSIGN
      |   ADD_ASSIGN
      |   SUB_ASSIGN
      |   MUL_ASSIGN
      |   DIV_ASSIGN
      |   AND_ASSIGN
      |   OR_ASSIGN
      |   XOR_ASSIGN
      |   RSHIFT_ASSIGN
      |   URSHIFT_ASSIGN
      |   LSHIFT_ASSIGN
  ) expr  { pin=2 rightAssociative=true }

primary_expr::= primary
//simple_ref_expr ::= identifier
bang_expression_expr::= (TILDE|BANG) expr
new_creator_expr::= NEW creator
creator::=  createdName ( LBRACE RBRACE | arguments | arrayCreatorRest | mapCreatorRest | setCreatorRest)
createdName::= idCreatedNamePair (DOT idCreatedNamePair)*
idCreatedNamePair::= anyId (LT typeList GT)?
arguments::= LPAREN expressionList? RPAREN
arrayCreatorRest::= LBRACK expr RBRACK | LBRACK RBRACK arrayInitializer?
mapCreatorRest::= LBRACE mapCreatorRestPair (COMMA mapCreatorRestPair )* RBRACE
setCreatorRest ::= LBRACE expr (COMMA ( expr ))* RBRACE
mapCreatorRestPair::= expr MAPTO expr


arrayInitializer::= LBRACE (expr (COMMA expr)* (COMMA)? )? RBRACE

dotMethodCall::= anyId LPAREN expressionList? RPAREN {pin=2}
expressionList::= expr (COMMA expr)*
methodCall_expr::= (identifier | THIS | SUPER) LPAREN expressionList? RPAREN {pin=2}
/////// 表达式相关的声明，，结束

primary::= THIS
    | SUPER
    | literal
    | typeRef DOT CLASS
    | VOID DOT CLASS
//    | id
	| identifier
    | soqlLiteral
//    | soslLiteral //暂时先不支持SOSL ，不知道是个啥，以后用到了再去支持

literal::=
	 NULL
	| IntegerLiteral
    | LongLiteral
    | NumberLiteral
    | StringLiteral
    | BooleanLiteral
IntegerLiteral::=integerliteralpattern
LongLiteral::=longliteralpattern
NumberLiteral::= numberliteralpattern
BooleanLiteral::= ("'TRUE'"|"'FALSE'")
StringLiteral::=  singlequotestringliteral

soqlLiteral::= LBRACK SELECT selectLiteral RBRACK {pin=1 name="匹配到了soqlLiternal"}

selectLiteral::= (SelectRestNoInnerBrackets | SelectRestAllowingInnerBrackets)*?

query::= SELECT selectList
        FROM fromNameList
        usingScope?
        whereClause?
        withClause?
        groupByClause?
        orderByClause?
        limitClause?
        offsetClause?
        allRowsClause?
        forClauses
        (UPDATE updateList)?
        {pin=1 recoverWhile=query_recover name="需要SELECT ..."}

private query_recover::= !RBRACK

usingScope::= USING SCOPE soqlId {pin=2}
withClause::= WITH  withClauseEntry {pin=1}
withClauseEntry::= DATA CATEGORY filteringExpression
	| SECURITY_ENFORCED
	| SYSTEM_MODE
	| USER_MODE
	| logicalExpression

groupByClause::= GROUP BY groupByClauseEntry {pin=2}

groupByClauseEntry::= selectList (HAVING logicalExpression)?
	| ROLLUP LPAREN fieldName (COMMA fieldName)* RPAREN
	| CUBE LPAREN fieldName (COMMA fieldName)* RPAREN

orderByClause::= ORDER BY fieldOrderList     {pin=1}
limitClause::= LIMIT IntegerLiteral | LIMIT boundExpression     {pin=1}
offsetClause::= OFFSET IntegerLiteral
    | OFFSET boundExpression
    {pin=1}
allRowsClause::= ALL ROWS     {pin=1}
forClauses::= forClausesEntry*
forClausesEntry::= FOR (VIEW | UPDATE | REFERENCE) {pin=1}

updateList::= updateType (COMMA updateList)?
updateType::= TRACKING | VIEWSTAT

fieldOrderList::= fieldOrder (COMMA fieldOrder)*
fieldOrder::= fieldName (ASC | DESC)? (NULLS (FIRST|LAST))?
    | soqlFunction (ASC | DESC)? (NULLS (FIRST|LAST))?

filteringExpression::= dataCategorySelection (AND dataCategorySelection)*
dataCategorySelection::= soqlId filteringSelector dataCategoryName
dataCategoryName::= soqlId
    | LPAREN soqlId (COMMA soqlId)* LPAREN

filteringSelector::= AT | ABOVE | BELOW | ABOVE_OR_BELOW

subQuery::= SELECT subFieldList
        FROM fromNameList
        whereClause?
        orderByClause?
        limitClause?
        forClauses
        (UPDATE updateList)?
        {pin=1}

whereClause::= WHERE logicalExpression {pin=1}
logicalExpression::= conditionalExpression (SOQLAND conditionalExpression)*
    | conditionalExpression (SOQLOR conditionalExpression)*
    | NOT conditionalExpression

conditionalExpression::= LPAREN logicalExpression RPAREN
    | fieldExpression

fieldExpression::= fieldName comparisonOperator value
    | soqlFunction comparisonOperator value

comparisonOperator::= ASSIGN | NOTEQUAL | LT | GT | LT ASSIGN | GT ASSIGN | LESSANDGREATER | LIKE | IN | NOT IN | INCLUDES | EXCLUDES

value::= NULL
    | BooleanLiteral
    | signedNumber
    | StringLiteral
//    | DateLiteral
//    | TimeLiteral
//    | DateTimeLiteral
//    | dateFormula
//    | IntegralCurrencyLiteral (DOT IntegerLiteral?)?
    | LPAREN subQuery RPAREN
    | valueList
    | boundExpression

valueList::= LPAREN value (COMMA value)* RPAREN


fromNameList::= fieldName soqlId? (COMMA fieldName soqlId?)* {pin=1}

subFieldList::= subFieldEntry (COMMA subFieldEntry)*
subFieldEntry::= fieldName soqlId?
    | soqlFunction soqlId?
    | LPAREN subQuery RPAREN soqlId?
    | typeOf
typeOf::= TYPEOF fieldName whenClause+ elseClause? END
whenClause::= WHEN fieldName THEN fieldNameList
elseClause::= ELSE fieldNameList
fieldNameList::= fieldName (COMMA fieldName)*

selectList::= selectEntry (COMMA selectEntry)* {name="需要一个 selectList ..." }
selectEntry::= fieldName soqlId?
    | soqlFunction soqlId?
    | LPAREN subQuery RPAREN soqlId?
    | typeOf
    {name="需要一个 selectEntry ..."}


fieldName::= soqlId (DOT soqlId)* {pin=1 name="标识符"}
//fieldName::= soqlId (DOT soqlId)* {pin=1}
soqlId::= identifier

soqlFunction::= AVG LPAREN fieldName RPAREN
    | COUNT LPAREN RPAREN
    | COUNT LPAREN fieldName RPAREN
    | COUNT_DISTINCT LPAREN fieldName RPAREN
    | MIN LPAREN fieldName RPAREN
    | MAX LPAREN fieldName RPAREN
    | SUM LPAREN fieldName RPAREN
    | TOLABEL LPAREN fieldName RPAREN
    | FORMAT LPAREN ( fieldName | soqlFunction ) RPAREN
    | CALENDAR_MONTH LPAREN dateFieldName RPAREN
    | CALENDAR_QUARTER LPAREN dateFieldName RPAREN
    | CALENDAR_YEAR LPAREN dateFieldName RPAREN
    | DAY_IN_MONTH LPAREN dateFieldName RPAREN
    | DAY_IN_WEEK LPAREN dateFieldName RPAREN
    | DAY_IN_YEAR LPAREN dateFieldName RPAREN
    | DAY_ONLY LPAREN dateFieldName RPAREN
    | FISCAL_MONTH LPAREN dateFieldName RPAREN
    | FISCAL_QUARTER LPAREN dateFieldName RPAREN
    | FISCAL_YEAR LPAREN dateFieldName RPAREN
    | HOUR_IN_DAY LPAREN dateFieldName RPAREN
    | WEEK_IN_MONTH LPAREN dateFieldName RPAREN
    | WEEK_IN_YEAR LPAREN dateFieldName RPAREN
    | FIELDS LPAREN soqlFieldsParameter RPAREN
    | DISTANCE LPAREN locationValue COMMA locationValue COMMA StringLiteral RPAREN
    | GROUPING LPAREN fieldName RPAREN
    | CONVERT_CURRENCY LPAREN fieldName RPAREN

dateFieldName::= "CONVERTTIMEZONE" LPAREN fieldName RPAREN
    | fieldName

soqlFieldsParameter::= "ALL" | "CUSTOM" | "STANDARD"
locationValue::= fieldName
    | boundExpression
    | GEOLOCATION LPAREN coordinateValue COMMA coordinateValue  RPAREN

coordinateValue::= signedNumber | boundExpression

boundExpression::= COLON expression

// TODO: NumberLiteral has trailing [dD]?, SOQL does not support this but a fix would need wider changes
signedNumber::= (ADD | SUB)? (IntegerLiteral | NumberLiteral)


id::=  identifier

anyId::= identifier



